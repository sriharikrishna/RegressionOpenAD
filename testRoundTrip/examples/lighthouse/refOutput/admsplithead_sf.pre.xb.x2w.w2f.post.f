
!$OPENAD XXX File_start [OAD_intrinsics.f90]
MODULE oad_intrinsics
use OAD_active
use w2f__types
IMPLICIT NONE
SAVE
!
!     **** Statements ****
!
END MODULE

C$OPENAD XXX File_start [all_globals_mod.f]
      MODULE all_globals_mod
      use OAD_active
      use w2f__types
      IMPLICIT NONE
      SAVE
C
C     **** Statements ****
C
      END MODULE
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
C
C$OPENAD XXX File_start [head.f]
      SUBROUTINE head(X, Y)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use OAD_active
      use w2f__types
      use oad_intrinsics
      use oad_intrinsics
      use oad_intrinsics
      IMPLICIT NONE
C
C     **** Parameters and Result ****
C
      type(active) :: X(1:4)
      type(active) :: Y(1:2)
C
C     **** Local Variables and Functions ****
C
      type(active) :: GAMMA
      type(active) :: NU
      type(active) :: OMEGA
      type(active) :: T
      type(active) :: V
      REAL(w2f__8) OpenAD_Symbol_0
      REAL(w2f__8) OpenAD_Symbol_1
      REAL(w2f__8) OpenAD_Symbol_2
      REAL(w2f__8) OpenAD_Symbol_3
      REAL(w2f__8) OpenAD_Symbol_4
      REAL(w2f__8) OpenAD_Symbol_5
      REAL(w2f__8) OpenAD_acc_0
      REAL(w2f__8) OpenAD_acc_1
      REAL(w2f__8) OpenAD_acc_2
      REAL(w2f__8) OpenAD_acc_3
      REAL(w2f__8) OpenAD_aux_0
      REAL(w2f__8) OpenAD_aux_1
      REAL(w2f__8) OpenAD_aux_2
      REAL(w2f__8) OpenAD_lin_0
      REAL(w2f__8) OpenAD_lin_1
      REAL(w2f__8) OpenAD_lin_2
      REAL(w2f__8) OpenAD_lin_3
      REAL(w2f__8) OpenAD_lin_4
      REAL(w2f__8) OpenAD_lin_5
      REAL(w2f__8) OpenAD_lin_6
      REAL(w2f__8) OpenAD_lin_7
      REAL(w2f__8) OpenAD_lin_8
      type(active) :: OpenAD_prp_0
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(Y)
C
C     **** Statements ****
C


          integer iaddr
          external iaddr

         if (our_rev_mode%plain) then
C original function
      NU%v = X(1)%v
      GAMMA%v = X(2)%v
      OMEGA%v = X(3)%v
      T%v = X(4)%v
      V%v = TAN(OMEGA%v*T%v)
      Y(1)%v = ((NU%v*V%v)/(GAMMA%v-V%v))
      Y(2)%v = (Y(1)%v*GAMMA%v)
          end if
          if (our_rev_mode%tape) then
C taping
      NU%v = X(1)%v
      GAMMA%v = X(2)%v
      OMEGA%v = X(3)%v
      T%v = X(4)%v
      OpenAD_aux_0 = TAN(OMEGA%v*T%v)
      OpenAD_lin_1 = T%v
      OpenAD_lin_2 = OMEGA%v
      OpenAD_lin_0 = (OpenAD_aux_0*OpenAD_aux_0+INT(1_w2f__i8))
      V%v = OpenAD_aux_0
      OpenAD_aux_1 = (NU%v*V%v)
      OpenAD_aux_2 = (GAMMA%v-V%v)
      OpenAD_lin_5 = V%v
      OpenAD_lin_6 = NU%v
      OpenAD_lin_3 = (INT(1_w2f__i8)/OpenAD_aux_2)
      OpenAD_lin_4 = (-(OpenAD_aux_1/(OpenAD_aux_2*OpenAD_aux_2)))
      Y(1)%v = (OpenAD_aux_1/OpenAD_aux_2)
      OpenAD_acc_0 = (OpenAD_lin_6*OpenAD_lin_3+INT((-1_w2f__i8))*OpenAD
     +_lin_4)
      OpenAD_acc_1 = (OpenAD_lin_5*OpenAD_lin_3)
      OpenAD_acc_2 = (OpenAD_lin_1*OpenAD_lin_0*OpenAD_acc_0)
      OpenAD_acc_3 = (OpenAD_lin_2*OpenAD_lin_0*OpenAD_acc_0)
      double_tape(double_tape_pointer) = OpenAD_acc_1
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_2
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_3
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_4
      double_tape_pointer = double_tape_pointer+1
      OpenAD_lin_7 = GAMMA%v
      OpenAD_lin_8 = Y(1)%v
      Y(2)%v = (Y(1)%v*GAMMA%v)
      double_tape(double_tape_pointer) = OpenAD_lin_7
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_8
      double_tape_pointer = double_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_0 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_1 = double_tape(double_tape_pointer)
      GAMMA%d = GAMMA%d+Y(2)%d*(OpenAD_Symbol_0)
      OpenAD_prp_0%d = OpenAD_prp_0%d+Y(2)%d*(OpenAD_Symbol_1)
      Y(2)%d = 0.0d0
      Y(1)%d = Y(1)%d+OpenAD_prp_0%d
      OpenAD_prp_0%d = 0.0d0
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_2 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_3 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_4 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_5 = double_tape(double_tape_pointer)
      GAMMA%d = GAMMA%d+Y(1)%d*(OpenAD_Symbol_2)
      X(4)%d = X(4)%d+Y(1)%d*(OpenAD_Symbol_3)
      X(3)%d = X(3)%d+Y(1)%d*(OpenAD_Symbol_4)
      X(1)%d = X(1)%d+Y(1)%d*(OpenAD_Symbol_5)
      Y(1)%d = 0.0d0
      X(2)%d = X(2)%d+GAMMA%d
      GAMMA%d = 0.0d0
          end if
        end subroutine head
