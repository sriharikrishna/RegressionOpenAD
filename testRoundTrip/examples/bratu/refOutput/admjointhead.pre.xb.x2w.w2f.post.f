
C ========== begin copyright notice ==============
C This file is part of 
C ---------------
C xaifBooster
C ---------------
C Distributed under the BSD license as follows:
C Copyright (c) 2005, The University of Chicago
C All rights reserved.
C
C Redistribution and use in source and binary forms, 
C with or without modification, are permitted provided that the following conditions are met:
C
C    - Redistributions of source code must retain the above copyright notice, 
C      this list of conditions and the following disclaimer.
C    - Redistributions in binary form must reproduce the above copyright notice, 
C      this list of conditions and the following disclaimer in the documentation 
C      and/or other materials provided with the distribution.
C    - Neither the name of The University of Chicago nor the names of its contributors 
C      may be used to endorse or promote products derived from this software without 
C      specific prior written permission.
C
C THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
C EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
C OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
C SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
C INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
C PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
C INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
C LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
C OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C 
C General Information:
C xaifBooster is intended for the transformation of 
C numerical programs represented as xml files according 
C to the XAIF schema. It is part of the OpenAD framework. 
C The main application is automatic 
C differentiation, i.e. the generation of code for 
C the computation of derivatives. 
C The following people are the principal authors of the 
C current version: 
C 	Uwe Naumann
C	Jean Utke
C Additional contributors are: 
C	Andrew Lyons
C	Peter Fine
C
C For more details about xaifBooster and its use in OpenAD please visit:
C   http://www.mcs.anl.gov/openad
C
C This work is partially supported by:
C 	NSF-ITR grant OCE-0205590
C ========== end copyright notice ==============

      SUBROUTINE head(X, F)
          use OAD_tape
          use OAD_rev
          use OAD_cp

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_0
      INTEGER(w2f__i8) OpenAD_Symbol_1
      INTEGER(w2f__i8) OpenAD_Symbol_2
      INTEGER(w2f__i8) OpenAD_Symbol_3
      INTEGER(w2f__i8) OpenAD_Symbol_4
      INTEGER(w2f__i8) OpenAD_Symbol_5
      REAL(w2f__8) OpenAD_acc_0
      REAL(w2f__8) OpenAD_acc_1
      REAL(w2f__8) OpenAD_acc_10
      REAL(w2f__8) OpenAD_acc_11
      REAL(w2f__8) OpenAD_acc_12
      REAL(w2f__8) OpenAD_acc_13
      REAL(w2f__8) OpenAD_acc_14
      REAL(w2f__8) OpenAD_acc_15
      REAL(w2f__8) OpenAD_acc_16
      REAL(w2f__8) OpenAD_acc_17
      REAL(w2f__8) OpenAD_acc_18
      REAL(w2f__8) OpenAD_acc_19
      REAL(w2f__8) OpenAD_acc_2
      REAL(w2f__8) OpenAD_acc_20
      REAL(w2f__8) OpenAD_acc_21
      REAL(w2f__8) OpenAD_acc_22
      REAL(w2f__8) OpenAD_acc_23
      REAL(w2f__8) OpenAD_acc_24
      REAL(w2f__8) OpenAD_acc_25
      REAL(w2f__8) OpenAD_acc_26
      REAL(w2f__8) OpenAD_acc_27
      REAL(w2f__8) OpenAD_acc_28
      REAL(w2f__8) OpenAD_acc_29
      REAL(w2f__8) OpenAD_acc_3
      REAL(w2f__8) OpenAD_acc_30
      REAL(w2f__8) OpenAD_acc_31
      REAL(w2f__8) OpenAD_acc_32
      REAL(w2f__8) OpenAD_acc_33
      REAL(w2f__8) OpenAD_acc_34
      REAL(w2f__8) OpenAD_acc_35
      REAL(w2f__8) OpenAD_acc_36
      REAL(w2f__8) OpenAD_acc_37
      REAL(w2f__8) OpenAD_acc_38
      REAL(w2f__8) OpenAD_acc_39
      REAL(w2f__8) OpenAD_acc_4
      REAL(w2f__8) OpenAD_acc_40
      REAL(w2f__8) OpenAD_acc_41
      REAL(w2f__8) OpenAD_acc_5
      REAL(w2f__8) OpenAD_acc_6
      REAL(w2f__8) OpenAD_acc_7
      REAL(w2f__8) OpenAD_acc_8
      REAL(w2f__8) OpenAD_acc_9
      REAL(w2f__8) OpenAD_lin_1
      REAL(w2f__8) OpenAD_lin_10
      REAL(w2f__8) OpenAD_lin_11
      REAL(w2f__8) OpenAD_lin_13
      REAL(w2f__8) OpenAD_lin_14
      REAL(w2f__8) OpenAD_lin_15
      REAL(w2f__8) OpenAD_lin_16
      REAL(w2f__8) OpenAD_lin_17
      REAL(w2f__8) OpenAD_lin_18
      REAL(w2f__8) OpenAD_lin_19
      REAL(w2f__8) OpenAD_lin_2
      REAL(w2f__8) OpenAD_lin_21
      REAL(w2f__8) OpenAD_lin_22
      REAL(w2f__8) OpenAD_lin_23
      REAL(w2f__8) OpenAD_lin_25
      REAL(w2f__8) OpenAD_lin_27
      REAL(w2f__8) OpenAD_lin_28
      REAL(w2f__8) OpenAD_lin_29
      REAL(w2f__8) OpenAD_lin_3
      REAL(w2f__8) OpenAD_lin_30
      REAL(w2f__8) OpenAD_lin_31
      REAL(w2f__8) OpenAD_lin_33
      REAL(w2f__8) OpenAD_lin_34
      REAL(w2f__8) OpenAD_lin_35
      REAL(w2f__8) OpenAD_lin_37
      REAL(w2f__8) OpenAD_lin_39
      REAL(w2f__8) OpenAD_lin_40
      REAL(w2f__8) OpenAD_lin_41
      REAL(w2f__8) OpenAD_lin_42
      REAL(w2f__8) OpenAD_lin_43
      REAL(w2f__8) OpenAD_lin_45
      REAL(w2f__8) OpenAD_lin_46
      REAL(w2f__8) OpenAD_lin_47
      REAL(w2f__8) OpenAD_lin_49
      REAL(w2f__8) OpenAD_lin_5
      REAL(w2f__8) OpenAD_lin_52
      REAL(w2f__8) OpenAD_lin_53
      REAL(w2f__8) OpenAD_lin_54
      REAL(w2f__8) OpenAD_lin_55
      REAL(w2f__8) OpenAD_lin_56
      REAL(w2f__8) OpenAD_lin_58
      REAL(w2f__8) OpenAD_lin_59
      REAL(w2f__8) OpenAD_lin_60
      REAL(w2f__8) OpenAD_lin_62
      REAL(w2f__8) OpenAD_lin_64
      REAL(w2f__8) OpenAD_lin_65
      REAL(w2f__8) OpenAD_lin_66
      REAL(w2f__8) OpenAD_lin_67
      REAL(w2f__8) OpenAD_lin_68
      REAL(w2f__8) OpenAD_lin_70
      REAL(w2f__8) OpenAD_lin_71
      REAL(w2f__8) OpenAD_lin_72
      REAL(w2f__8) OpenAD_lin_74
      REAL(w2f__8) OpenAD_lin_77
      REAL(w2f__8) OpenAD_lin_78
      REAL(w2f__8) OpenAD_lin_79
      REAL(w2f__8) OpenAD_lin_81
      REAL(w2f__8) OpenAD_lin_85
      REAL(w2f__8) OpenAD_lin_86
      REAL(w2f__8) OpenAD_lin_87
      REAL(w2f__8) OpenAD_lin_89
      REAL(w2f__8) OpenAD_lin_9
      REAL(w2f__8) OpenAD_lin_90
      type(active) :: OpenAD_prop_0
      type(active) :: OpenAD_prop_1
      type(active) :: OpenAD_prop_2
      type(active) :: OpenAD_prop_3
      type(active) :: OpenAD_prop_4
      REAL(w2f__8) OpenAD_tmp_0
      REAL(w2f__8) OpenAD_tmp_1
      REAL(w2f__8) OpenAD_tmp_10
      REAL(w2f__8) OpenAD_tmp_11
      REAL(w2f__8) OpenAD_tmp_12
      REAL(w2f__8) OpenAD_tmp_13
      REAL(w2f__8) OpenAD_tmp_14
      REAL(w2f__8) OpenAD_tmp_15
      REAL(w2f__8) OpenAD_tmp_16
      REAL(w2f__8) OpenAD_tmp_17
      REAL(w2f__8) OpenAD_tmp_18
      REAL(w2f__8) OpenAD_tmp_19
      REAL(w2f__8) OpenAD_tmp_2
      REAL(w2f__8) OpenAD_tmp_20
      REAL(w2f__8) OpenAD_tmp_21
      REAL(w2f__8) OpenAD_tmp_22
      REAL(w2f__8) OpenAD_tmp_23
      REAL(w2f__8) OpenAD_tmp_24
      REAL(w2f__8) OpenAD_tmp_25
      REAL(w2f__8) OpenAD_tmp_26
      REAL(w2f__8) OpenAD_tmp_27
      REAL(w2f__8) OpenAD_tmp_28
      REAL(w2f__8) OpenAD_tmp_29
      REAL(w2f__8) OpenAD_tmp_3
      REAL(w2f__8) OpenAD_tmp_30
      REAL(w2f__8) OpenAD_tmp_31
      REAL(w2f__8) OpenAD_tmp_32
      REAL(w2f__8) OpenAD_tmp_33
      REAL(w2f__8) OpenAD_tmp_34
      REAL(w2f__8) OpenAD_tmp_35
      REAL(w2f__8) OpenAD_tmp_36
      REAL(w2f__8) OpenAD_tmp_37
      REAL(w2f__8) OpenAD_tmp_38
      REAL(w2f__8) OpenAD_tmp_39
      REAL(w2f__8) OpenAD_tmp_4
      REAL(w2f__8) OpenAD_tmp_40
      REAL(w2f__8) OpenAD_tmp_41
      REAL(w2f__8) OpenAD_tmp_42
      REAL(w2f__8) OpenAD_tmp_43
      REAL(w2f__8) OpenAD_tmp_5
      REAL(w2f__8) OpenAD_tmp_6
      REAL(w2f__8) OpenAD_tmp_7
      REAL(w2f__8) OpenAD_tmp_8
      REAL(w2f__8) OpenAD_tmp_9
C
C     **** Parameters and Result ****
C
      type(active) :: X(1:9)
      type(active) :: F(1:7)
C
C     **** Local Variables and Functions ****
C
      REAL(w2f__8) H
      INTEGER(w2f__i4) I
      INTEGER(w2f__i8) OpenAD_Symbol_10
      INTEGER(w2f__i8) OpenAD_Symbol_11
      INTEGER(w2f__i8) OpenAD_Symbol_12
      INTEGER(w2f__i8) OpenAD_Symbol_13
      INTEGER(w2f__i8) OpenAD_Symbol_14
      INTEGER(w2f__i8) OpenAD_Symbol_15
      INTEGER(w2f__i8) OpenAD_Symbol_16
      INTEGER(w2f__i8) OpenAD_Symbol_17
      REAL(w2f__8) OpenAD_Symbol_18
      REAL(w2f__8) OpenAD_Symbol_19
      REAL(w2f__8) OpenAD_Symbol_20
      REAL(w2f__8) OpenAD_Symbol_21
      REAL(w2f__8) OpenAD_Symbol_22
      REAL(w2f__8) OpenAD_Symbol_23
      REAL(w2f__8) OpenAD_Symbol_24
      REAL(w2f__8) OpenAD_Symbol_25
      INTEGER(w2f__i8) OpenAD_Symbol_26
      REAL(w2f__8) OpenAD_Symbol_27
      REAL(w2f__8) OpenAD_Symbol_28
      REAL(w2f__8) OpenAD_Symbol_29
      REAL(w2f__8) OpenAD_Symbol_30
      INTEGER(w2f__i8) OpenAD_Symbol_31
      INTEGER(w2f__i8) OpenAD_Symbol_32
      INTEGER(w2f__i8) OpenAD_Symbol_33
      INTEGER(w2f__i8) OpenAD_Symbol_34
      INTEGER(w2f__i8) OpenAD_Symbol_35
      INTEGER(w2f__i8) OpenAD_Symbol_36
      REAL(w2f__8) OpenAD_Symbol_37
      REAL(w2f__8) OpenAD_Symbol_38
      REAL(w2f__8) OpenAD_Symbol_39
      REAL(w2f__8) OpenAD_Symbol_40
      INTEGER(w2f__i8) OpenAD_Symbol_41
      REAL(w2f__8) OpenAD_Symbol_42
      REAL(w2f__8) OpenAD_Symbol_43
      REAL(w2f__8) OpenAD_Symbol_44
      REAL(w2f__8) OpenAD_Symbol_45
      INTEGER(w2f__i8) OpenAD_Symbol_46
      INTEGER(w2f__i8) OpenAD_Symbol_47
      INTEGER(w2f__i8) OpenAD_Symbol_48
      INTEGER(w2f__i8) OpenAD_Symbol_49
      INTEGER(w2f__i8) OpenAD_Symbol_50
      INTEGER(w2f__i8) OpenAD_Symbol_51
      INTEGER(w2f__i8) OpenAD_Symbol_52
      REAL(w2f__8) OpenAD_Symbol_53
      REAL(w2f__8) OpenAD_Symbol_54
      REAL(w2f__8) OpenAD_Symbol_55
      REAL(w2f__8) OpenAD_Symbol_56
      REAL(w2f__8) OpenAD_Symbol_57
      REAL(w2f__8) OpenAD_Symbol_58
      REAL(w2f__8) OpenAD_Symbol_59
      INTEGER(w2f__i8) OpenAD_Symbol_6
      REAL(w2f__8) OpenAD_Symbol_60
      INTEGER(w2f__i8) OpenAD_Symbol_7
      INTEGER(w2f__i8) OpenAD_Symbol_8
      INTEGER(w2f__i8) OpenAD_Symbol_9


          ! checkpointing stacks and offsets
          integer :: cp_loop_variable_1,cp_loop_variable_2,
     +cp_loop_variable_3,cp_loop_variable_4,cp_loop_variable_5
          ! floats 'F'
          double precision, dimension(:), allocatable, save :: 
     +theArgFStack
          integer, save :: theArgFStackoffset=0, theArgFStackSize=0
          ! integers 'I'
          integer, dimension(:), allocatable, save :: 
     +theArgIStack
          integer, save :: theArgIStackoffset=0, theArgIStackSize=0
          ! booleans 'B'
          logical, dimension(:), allocatable, save :: 
     +theArgBStack
          integer, save :: theArgBStackoffset=0, theArgBStackSize=0
          ! strings 'S'
          character*(80), dimension(:), allocatable, save :: 
     +theArgSStack
          integer, save :: theArgSStackoffset=0, theArgSStackSize=0

          type(modeType) :: our_orig_mode

! external C function used in inlined code
          integer iaddr
          external iaddr
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(F)
C
C     **** Statements ****
C

          if (our_rev_mode%arg_store) then 
C store arguments

          end if 
          if (our_rev_mode%arg_restore) then
C restore arguments

          end if
          if (our_rev_mode%plain) then
            our_orig_mode=our_rev_mode
            our_rev_mode%arg_store=.FALSE.
C original function
C$OPENAD XXX Template ad_template.f
      H = 2.5D-01
      F(1)%v = (X(1)%v*(-2.0D00)+((X(8)%v*H*H)/1.2D+01)*(EXP(X(1)%v/(X(1
     +)%v*X(9)%v+1.0D00))*1.0D+01+1.0D00))
      F(2)%v = (X(1)%v+EXP(X(1)%v/(X(1)%v*X(9)%v+1.0D00))*((X(8)%v*H*H)/
     +1.2D+01))
      DO I = 2, 6, 1
        F(INT(I+(-1)))%v = (X(I)%v+F(I+(-1))%v+EXP(X(I)%v/(X(I)%v*X(9)%v
     ++1.0D00))*((X(8)%v*H*H)/1.2D+01))
        F(INT(I))%v = (EXP(X(I)%v/(X(I)%v*X(9)%v+1.0D00))*((X(8)%v*H*H)/
     +1.19999999999999995559D00)+F(I)%v-X(I)%v*2.0D00)
        F(INT(I+1))%v = (X(I)%v+EXP(X(I)%v/(X(I)%v*X(9)%v+1.0D00))*((X(8
     +)%v*H*H)/1.2D+01))
      END DO
      F(6)%v = (X(7)%v+F(6)%v+EXP(X(7)%v/(X(7)%v*X(9)%v+1.0D00))*((X(8)%
     +v*H*H)/1.2D+01))
      F(7)%v = (F(7)%v-X(7)%v*2.0D00)
      F(7)%v = (F(7)%v+((X(8)%v*H*H)/1.2D+01)*(EXP(X(7)%v/(X(7)%v*X(9)%v
     ++1.0D00))*1.0D+01+1.0D00))

C original function end
            our_rev_mode=our_orig_mode
          end if 
          if (our_rev_mode%tape) then
C            print*, " tape       ", our_rev_mode
            our_rev_mode%arg_store=.TRUE.
            our_rev_mode%arg_restore=.FALSE.
            our_rev_mode%plain=.TRUE.
            our_rev_mode%tape=.FALSE.
            our_rev_mode%adjoint=.FALSE.
C taping
C$OPENAD XXX Template ad_template.f
      H = 2.5D-01
      OpenAD_tmp_3 = (H * H)
      OpenAD_tmp_2 = (X(8)%v*OpenAD_tmp_3)
      OpenAD_tmp_0 = (OpenAD_tmp_2 / 1.2D+01)
      OpenAD_tmp_6 = (X(1)%v*X(9)%v+1.0D00)
      OpenAD_tmp_5 = (X(1)%v/OpenAD_tmp_6)
      OpenAD_tmp_4 = EXP(OpenAD_tmp_5)
      OpenAD_tmp_1 = (OpenAD_tmp_4 * 1.0D+01 + 1.0D00)
      F(1)%v = (X(1)%v*(-2.0D00)+OpenAD_tmp_0*OpenAD_tmp_1)
      OpenAD_lin_5 = OpenAD_tmp_3
      OpenAD_lin_3 = (INT(1_w2f__i8) / 1.2D+01)
      OpenAD_lin_1 = OpenAD_tmp_1
      OpenAD_lin_10 = (INT(1_w2f__i8) / OpenAD_tmp_6)
      OpenAD_lin_13 = X(9)%v
      OpenAD_lin_14 = X(1)%v
      OpenAD_lin_11 = (-(X(1)%v/(OpenAD_tmp_6*OpenAD_tmp_6)))
      OpenAD_lin_9 = EXP(OpenAD_tmp_5)
      OpenAD_lin_2 = OpenAD_tmp_0
      OpenAD_acc_0 = (OpenAD_lin_9 * 1.0D+01)
      OpenAD_acc_1 = (OpenAD_lin_5 * OpenAD_lin_3 * OpenAD_lin_1)
      OpenAD_acc_2 = (OpenAD_lin_10 * OpenAD_acc_0 * OpenAD_lin_2)
      OpenAD_acc_3 = (OpenAD_lin_11 * OpenAD_acc_0 * OpenAD_lin_2)
      OpenAD_acc_4 = (OpenAD_lin_13 * OpenAD_acc_3)
      OpenAD_acc_5 = (OpenAD_lin_14 * OpenAD_acc_3)
      double_tape(double_tape_pointer) = OpenAD_acc_1
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_2
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_4
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_5
      double_tape_pointer = double_tape_pointer+1
      OpenAD_tmp_10 = (X(1)%v*X(9)%v+1.0D00)
      OpenAD_tmp_9 = (X(1)%v/OpenAD_tmp_10)
      OpenAD_tmp_7 = EXP(OpenAD_tmp_9)
      OpenAD_tmp_12 = (H * H)
      OpenAD_tmp_11 = (X(8)%v*OpenAD_tmp_12)
      OpenAD_tmp_8 = (OpenAD_tmp_11 / 1.2D+01)
      F(2)%v = (X(1)%v+OpenAD_tmp_7*OpenAD_tmp_8)
      OpenAD_lin_18 = (INT(1_w2f__i8) / OpenAD_tmp_10)
      OpenAD_lin_21 = X(9)%v
      OpenAD_lin_22 = X(1)%v
      OpenAD_lin_19 = (-(X(1)%v/(OpenAD_tmp_10*OpenAD_tmp_10)))
      OpenAD_lin_17 = EXP(OpenAD_tmp_9)
      OpenAD_lin_15 = OpenAD_tmp_8
      OpenAD_lin_25 = OpenAD_tmp_12
      OpenAD_lin_23 = (INT(1_w2f__i8) / 1.2D+01)
      OpenAD_lin_16 = OpenAD_tmp_7
      OpenAD_acc_6 = (OpenAD_lin_17 * OpenAD_lin_15)
      OpenAD_acc_7 = (OpenAD_lin_25 * OpenAD_lin_23 * OpenAD_lin_16)
      OpenAD_acc_8 = (OpenAD_lin_18 * OpenAD_acc_6)
      OpenAD_acc_9 = (OpenAD_lin_19 * OpenAD_acc_6)
      OpenAD_acc_10 = (OpenAD_lin_21 * OpenAD_acc_9)
      OpenAD_acc_11 = (OpenAD_lin_22 * OpenAD_acc_9)
      double_tape(double_tape_pointer) = OpenAD_acc_7
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_8
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_10
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_11
      double_tape_pointer = double_tape_pointer+1
      OpenAD_Symbol_2 = 0_w2f__i8
      DO I = 2, 6, 1
        OpenAD_tmp_16 = (X(I)%v*X(9)%v+1.0D00)
        OpenAD_tmp_15 = (X(I)%v/OpenAD_tmp_16)
        OpenAD_tmp_13 = EXP(OpenAD_tmp_15)
        OpenAD_tmp_18 = (H * H)
        OpenAD_tmp_17 = (X(8)%v*OpenAD_tmp_18)
        OpenAD_tmp_14 = (OpenAD_tmp_17 / 1.2D+01)
        F(INT(I+(-1)))%v = (X(I)%v+F(I+(-1))%v+OpenAD_tmp_13*OpenAD_tmp_
     +14)
        OpenAD_lin_30 = (INT(1_w2f__i8) / OpenAD_tmp_16)
        OpenAD_lin_33 = X(9)%v
        OpenAD_lin_34 = X(I)%v
        OpenAD_lin_31 = (-(X(I)%v/(OpenAD_tmp_16*OpenAD_tmp_16)))
        OpenAD_lin_29 = EXP(OpenAD_tmp_15)
        OpenAD_lin_27 = OpenAD_tmp_14
        OpenAD_lin_37 = OpenAD_tmp_18
        OpenAD_lin_35 = (INT(1_w2f__i8) / 1.2D+01)
        OpenAD_lin_28 = OpenAD_tmp_13
        OpenAD_acc_12 = (OpenAD_lin_29 * OpenAD_lin_27)
        OpenAD_acc_13 = (OpenAD_lin_37 * OpenAD_lin_35 * OpenAD_lin_28)
        OpenAD_acc_14 = (OpenAD_lin_30 * OpenAD_acc_12)
        OpenAD_acc_15 = (OpenAD_lin_31 * OpenAD_acc_12)
        OpenAD_acc_16 = (OpenAD_lin_33 * OpenAD_acc_15)
        OpenAD_acc_17 = (OpenAD_lin_34 * OpenAD_acc_15)
        OpenAD_Symbol_6 = (I +(-1))
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_6
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_7 = (I +(-1))
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_7
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_8 = (I +(-1))
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_8
        integer_tape_pointer = integer_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_13
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_9 = (I +(-1))
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_9
        integer_tape_pointer = integer_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_14
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_10 = (I +(-1))
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_10
        integer_tape_pointer = integer_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_16
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_11 = (I +(-1))
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_11
        integer_tape_pointer = integer_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_17
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_12 = (I +(-1))
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_12
        integer_tape_pointer = integer_tape_pointer+1
        integer_tape(integer_tape_pointer) = I
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_tmp_22 = (X(I)%v*X(9)%v+1.0D00)
        OpenAD_tmp_21 = (X(I)%v/OpenAD_tmp_22)
        OpenAD_tmp_19 = EXP(OpenAD_tmp_21)
        OpenAD_tmp_24 = (H * H)
        OpenAD_tmp_23 = (X(8)%v*OpenAD_tmp_24)
        OpenAD_tmp_20 = (OpenAD_tmp_23 / 1.19999999999999995559D00)
        F(INT(I))%v = (OpenAD_tmp_19*OpenAD_tmp_20+F(I)%v-X(I)%v*2.0D00)
        OpenAD_lin_42 = (INT(1_w2f__i8) / OpenAD_tmp_22)
        OpenAD_lin_45 = X(9)%v
        OpenAD_lin_46 = X(I)%v
        OpenAD_lin_43 = (-(X(I)%v/(OpenAD_tmp_22*OpenAD_tmp_22)))
        OpenAD_lin_41 = EXP(OpenAD_tmp_21)
        OpenAD_lin_39 = OpenAD_tmp_20
        OpenAD_lin_49 = OpenAD_tmp_24
        OpenAD_lin_47 = (INT(1_w2f__i8) / 1.19999999999999995559D00)
        OpenAD_lin_40 = OpenAD_tmp_19
        OpenAD_acc_18 = (OpenAD_lin_41 * OpenAD_lin_39)
        OpenAD_acc_19 = (OpenAD_lin_49 * OpenAD_lin_47 * OpenAD_lin_40)
        OpenAD_acc_20 = (OpenAD_lin_42 * OpenAD_acc_18)
        OpenAD_acc_21 = (OpenAD_lin_43 * OpenAD_acc_18)
        OpenAD_acc_22 = (OpenAD_lin_45 * OpenAD_acc_21)
        OpenAD_acc_23 = (OpenAD_lin_46 * OpenAD_acc_21)
        double_tape(double_tape_pointer) = OpenAD_acc_19
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_20
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_22
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_23
        double_tape_pointer = double_tape_pointer+1
        integer_tape(integer_tape_pointer) = I
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_tmp_28 = (X(I)%v*X(9)%v+1.0D00)
        OpenAD_tmp_27 = (X(I)%v/OpenAD_tmp_28)
        OpenAD_tmp_25 = EXP(OpenAD_tmp_27)
        OpenAD_tmp_30 = (H * H)
        OpenAD_tmp_29 = (X(8)%v*OpenAD_tmp_30)
        OpenAD_tmp_26 = (OpenAD_tmp_29 / 1.2D+01)
        F(INT(I+1))%v = (X(I)%v+OpenAD_tmp_25*OpenAD_tmp_26)
        OpenAD_lin_55 = (INT(1_w2f__i8) / OpenAD_tmp_28)
        OpenAD_lin_58 = X(9)%v
        OpenAD_lin_59 = X(I)%v
        OpenAD_lin_56 = (-(X(I)%v/(OpenAD_tmp_28*OpenAD_tmp_28)))
        OpenAD_lin_54 = EXP(OpenAD_tmp_27)
        OpenAD_lin_52 = OpenAD_tmp_26
        OpenAD_lin_62 = OpenAD_tmp_30
        OpenAD_lin_60 = (INT(1_w2f__i8) / 1.2D+01)
        OpenAD_lin_53 = OpenAD_tmp_25
        OpenAD_acc_24 = (OpenAD_lin_54 * OpenAD_lin_52)
        OpenAD_acc_25 = (OpenAD_lin_62 * OpenAD_lin_60 * OpenAD_lin_53)
        OpenAD_acc_26 = (OpenAD_lin_55 * OpenAD_acc_24)
        OpenAD_acc_27 = (OpenAD_lin_56 * OpenAD_acc_24)
        OpenAD_acc_28 = (OpenAD_lin_58 * OpenAD_acc_27)
        OpenAD_acc_29 = (OpenAD_lin_59 * OpenAD_acc_27)
        OpenAD_Symbol_13 = (I + 1)
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_13
        integer_tape_pointer = integer_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_25
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_14 = (I + 1)
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_14
        integer_tape_pointer = integer_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_26
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_15 = (I + 1)
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_15
        integer_tape_pointer = integer_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_28
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_16 = (I + 1)
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_16
        integer_tape_pointer = integer_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_acc_29
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_17 = (I + 1)
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_17
        integer_tape_pointer = integer_tape_pointer+1
        integer_tape(integer_tape_pointer) = I
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_2 = (INT(OpenAD_Symbol_2) + INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_2
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_tmp_34 = (X(7)%v*X(9)%v+1.0D00)
      OpenAD_tmp_33 = (X(7)%v/OpenAD_tmp_34)
      OpenAD_tmp_31 = EXP(OpenAD_tmp_33)
      OpenAD_tmp_36 = (H * H)
      OpenAD_tmp_35 = (X(8)%v*OpenAD_tmp_36)
      OpenAD_tmp_32 = (OpenAD_tmp_35 / 1.2D+01)
      F(6)%v = (X(7)%v+F(6)%v+OpenAD_tmp_31*OpenAD_tmp_32)
      OpenAD_lin_67 = (INT(1_w2f__i8) / OpenAD_tmp_34)
      OpenAD_lin_70 = X(9)%v
      OpenAD_lin_71 = X(7)%v
      OpenAD_lin_68 = (-(X(7)%v/(OpenAD_tmp_34*OpenAD_tmp_34)))
      OpenAD_lin_66 = EXP(OpenAD_tmp_33)
      OpenAD_lin_64 = OpenAD_tmp_32
      OpenAD_lin_74 = OpenAD_tmp_36
      OpenAD_lin_72 = (INT(1_w2f__i8) / 1.2D+01)
      OpenAD_lin_65 = OpenAD_tmp_31
      OpenAD_acc_30 = (OpenAD_lin_66 * OpenAD_lin_64)
      OpenAD_acc_31 = (OpenAD_lin_74 * OpenAD_lin_72 * OpenAD_lin_65)
      OpenAD_acc_32 = (OpenAD_lin_67 * OpenAD_acc_30)
      OpenAD_acc_33 = (OpenAD_lin_68 * OpenAD_acc_30)
      OpenAD_acc_34 = (OpenAD_lin_70 * OpenAD_acc_33)
      OpenAD_acc_35 = (OpenAD_lin_71 * OpenAD_acc_33)
      double_tape(double_tape_pointer) = OpenAD_acc_31
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_32
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_34
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_35
      double_tape_pointer = double_tape_pointer+1
      F(7)%v = (F(7)%v-X(7)%v*2.0D00)
      OpenAD_tmp_40 = (H * H)
      OpenAD_tmp_39 = (X(8)%v*OpenAD_tmp_40)
      OpenAD_tmp_37 = (OpenAD_tmp_39 / 1.2D+01)
      OpenAD_tmp_43 = (X(7)%v*X(9)%v+1.0D00)
      OpenAD_tmp_42 = (X(7)%v/OpenAD_tmp_43)
      OpenAD_tmp_41 = EXP(OpenAD_tmp_42)
      OpenAD_tmp_38 = (OpenAD_tmp_41 * 1.0D+01 + 1.0D00)
      F(7)%v = (F(7)%v+OpenAD_tmp_37*OpenAD_tmp_38)
      OpenAD_lin_81 = OpenAD_tmp_40
      OpenAD_lin_79 = (INT(1_w2f__i8) / 1.2D+01)
      OpenAD_lin_77 = OpenAD_tmp_38
      OpenAD_lin_86 = (INT(1_w2f__i8) / OpenAD_tmp_43)
      OpenAD_lin_89 = X(9)%v
      OpenAD_lin_90 = X(7)%v
      OpenAD_lin_87 = (-(X(7)%v/(OpenAD_tmp_43*OpenAD_tmp_43)))
      OpenAD_lin_85 = EXP(OpenAD_tmp_42)
      OpenAD_lin_78 = OpenAD_tmp_37
      OpenAD_acc_36 = (OpenAD_lin_85 * 1.0D+01)
      OpenAD_acc_37 = (OpenAD_lin_81 * OpenAD_lin_79 * OpenAD_lin_77)
      OpenAD_acc_38 = (OpenAD_lin_86 * OpenAD_acc_36 * OpenAD_lin_78)
      OpenAD_acc_39 = (OpenAD_lin_87 * OpenAD_acc_36 * OpenAD_lin_78)
      OpenAD_acc_40 = (OpenAD_lin_89 * OpenAD_acc_39)
      OpenAD_acc_41 = (OpenAD_lin_90 * OpenAD_acc_39)
      double_tape(double_tape_pointer) = OpenAD_acc_37
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_38
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_40
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_acc_41
      double_tape_pointer = double_tape_pointer+1

C taping end
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.FALSE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.FALSE.
            our_rev_mode%adjoint=.TRUE.
          end if 
          if (our_rev_mode%adjoint) then
C            print*, " adjoint    ", our_rev_mode
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.TRUE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.TRUE.
            our_rev_mode%adjoint=.FALSE.
C adjoint
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_53 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_54 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_55 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_56 = double_tape(double_tape_pointer)
      X(9)%d = X(9)%d+F(7)%d*(OpenAD_Symbol_53)
      X(7)%d = X(7)%d+F(7)%d*(OpenAD_Symbol_54)
      X(7)%d = X(7)%d+F(7)%d*(OpenAD_Symbol_55)
      X(8)%d = X(8)%d+F(7)%d*(OpenAD_Symbol_56)
      OpenAD_prop_4%d = OpenAD_prop_4%d+F(7)%d
      F(7)%d = 0.0d0
      F(7)%d = F(7)%d+OpenAD_prop_4%d
      OpenAD_prop_4%d = 0.0d0
      X(7)%d = X(7)%d+F(7)%d*(-2.0D00)
      OpenAD_prop_3%d = OpenAD_prop_3%d+F(7)%d
      F(7)%d = 0.0d0
      F(7)%d = F(7)%d+OpenAD_prop_3%d
      OpenAD_prop_3%d = 0.0d0
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_57 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_58 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_59 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_60 = double_tape(double_tape_pointer)
      X(9)%d = X(9)%d+F(6)%d*(OpenAD_Symbol_57)
      X(7)%d = X(7)%d+F(6)%d*(OpenAD_Symbol_58)
      X(7)%d = X(7)%d+F(6)%d*(OpenAD_Symbol_59)
      X(8)%d = X(8)%d+F(6)%d*(OpenAD_Symbol_60)
      OpenAD_prop_2%d = OpenAD_prop_2%d+F(6)%d
      X(7)%d = X(7)%d+F(6)%d
      F(6)%d = 0.0d0
      F(6)%d = F(6)%d+OpenAD_prop_2%d
      OpenAD_prop_2%d = 0.0d0
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_0 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_1 = 1
      DO WHILE(INT(OpenAD_Symbol_1) .LE. INT(OpenAD_Symbol_0))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_26 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_27 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_28 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_29 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_30 = double_tape(double_tape_pointer)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_31 = integer_tape(integer_tape_pointer)
        X(9)%d = X(9)%d+F(INT(OpenAD_Symbol_31))%d*(OpenAD_Symbol_27)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_32 = integer_tape(integer_tape_pointer)
        X(INT(OpenAD_Symbol_26))%d = X(INT(OpenAD_Symbol_26))%d+F(INT(Op
     +enAD_Symbol_32))%d*(OpenAD_Symbol_28)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_33 = integer_tape(integer_tape_pointer)
        X(INT(OpenAD_Symbol_26))%d = X(INT(OpenAD_Symbol_26))%d+F(INT(Op
     +enAD_Symbol_33))%d*(OpenAD_Symbol_29)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_34 = integer_tape(integer_tape_pointer)
        X(8)%d = X(8)%d+F(INT(OpenAD_Symbol_34))%d*(OpenAD_Symbol_30)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_35 = integer_tape(integer_tape_pointer)
        X(INT(OpenAD_Symbol_26))%d = X(INT(OpenAD_Symbol_26))%d+F(INT(Op
     +enAD_Symbol_35))%d
        F(INT(OpenAD_Symbol_35))%d = 0.0d0
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_36 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_37 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_38 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_39 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_40 = double_tape(double_tape_pointer)
        X(9)%d = X(9)%d+F(INT(OpenAD_Symbol_36))%d*(OpenAD_Symbol_37)
        X(INT(OpenAD_Symbol_36))%d = X(INT(OpenAD_Symbol_36))%d+F(INT(Op
     +enAD_Symbol_36))%d*(OpenAD_Symbol_38)
        X(INT(OpenAD_Symbol_36))%d = X(INT(OpenAD_Symbol_36))%d+F(INT(Op
     +enAD_Symbol_36))%d*(OpenAD_Symbol_39)
        X(8)%d = X(8)%d+F(INT(OpenAD_Symbol_36))%d*(OpenAD_Symbol_40)
        X(INT(OpenAD_Symbol_36))%d = X(INT(OpenAD_Symbol_36))%d+F(INT(Op
     +enAD_Symbol_36))%d*(-2.0D00)
        OpenAD_prop_1%d = OpenAD_prop_1%d+F(INT(OpenAD_Symbol_36))%d
        F(INT(OpenAD_Symbol_36))%d = 0.0d0
        F(INT(OpenAD_Symbol_36))%d = F(INT(OpenAD_Symbol_36))%d+OpenAD_p
     +rop_1%d
        OpenAD_prop_1%d = 0.0d0
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_41 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_42 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_43 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_44 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_45 = double_tape(double_tape_pointer)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_46 = integer_tape(integer_tape_pointer)
        X(9)%d = X(9)%d+F(INT(OpenAD_Symbol_46))%d*(OpenAD_Symbol_42)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_47 = integer_tape(integer_tape_pointer)
        X(INT(OpenAD_Symbol_41))%d = X(INT(OpenAD_Symbol_41))%d+F(INT(Op
     +enAD_Symbol_47))%d*(OpenAD_Symbol_43)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_48 = integer_tape(integer_tape_pointer)
        X(INT(OpenAD_Symbol_41))%d = X(INT(OpenAD_Symbol_41))%d+F(INT(Op
     +enAD_Symbol_48))%d*(OpenAD_Symbol_44)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_49 = integer_tape(integer_tape_pointer)
        X(8)%d = X(8)%d+F(INT(OpenAD_Symbol_49))%d*(OpenAD_Symbol_45)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_50 = integer_tape(integer_tape_pointer)
        OpenAD_prop_0%d = OpenAD_prop_0%d+F(INT(OpenAD_Symbol_50))%d
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_51 = integer_tape(integer_tape_pointer)
        X(INT(OpenAD_Symbol_41))%d = X(INT(OpenAD_Symbol_41))%d+F(INT(Op
     +enAD_Symbol_51))%d
        F(INT(OpenAD_Symbol_51))%d = 0.0d0
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_52 = integer_tape(integer_tape_pointer)
        F(INT(OpenAD_Symbol_52))%d = F(INT(OpenAD_Symbol_52))%d+OpenAD_p
     +rop_0%d
        OpenAD_prop_0%d = 0.0d0
        OpenAD_Symbol_1 = INT(OpenAD_Symbol_1) + 1
      END DO
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_18 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_19 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_20 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_21 = double_tape(double_tape_pointer)
      X(9)%d = X(9)%d+F(2)%d*(OpenAD_Symbol_18)
      X(1)%d = X(1)%d+F(2)%d*(OpenAD_Symbol_19)
      X(1)%d = X(1)%d+F(2)%d*(OpenAD_Symbol_20)
      X(8)%d = X(8)%d+F(2)%d*(OpenAD_Symbol_21)
      X(1)%d = X(1)%d+F(2)%d
      F(2)%d = 0.0d0
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_22 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_23 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_24 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_25 = double_tape(double_tape_pointer)
      X(9)%d = X(9)%d+F(1)%d*(OpenAD_Symbol_22)
      X(1)%d = X(1)%d+F(1)%d*(OpenAD_Symbol_23)
      X(1)%d = X(1)%d+F(1)%d*(OpenAD_Symbol_24)
      X(8)%d = X(8)%d+F(1)%d*(OpenAD_Symbol_25)
      X(1)%d = X(1)%d+F(1)%d*(-2.0D00)
      F(1)%d = 0.0d0

C adjoint end
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.TRUE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.TRUE.
            our_rev_mode%adjoint=.FALSE.
          end if 
        end subroutine head
