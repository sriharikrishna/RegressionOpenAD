
      MODULE all_globals_mod
      use w2f__types
      use OAD_active
      IMPLICIT NONE
      SAVE
C
C     **** Statements ****
C
      END MODULE
C ========== begin copyright notice ==============
C This file is part of 
C ---------------
C xaifBooster
C ---------------
C Distributed under the BSD license as follows:
C Copyright (c) 2005, The University of Chicago
C All rights reserved.
C
C Redistribution and use in source and binary forms, 
C with or without modification, are permitted provided that the following conditions are met:
C
C    - Redistributions of source code must retain the above copyright notice, 
C      this list of conditions and the following disclaimer.
C    - Redistributions in binary form must reproduce the above copyright notice, 
C      this list of conditions and the following disclaimer in the documentation 
C      and/or other materials provided with the distribution.
C    - Neither the name of The University of Chicago nor the names of its contributors 
C      may be used to endorse or promote products derived from this software without 
C      specific prior written permission.
C
C THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
C EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
C OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
C SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
C INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
C PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
C INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
C LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
C OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C 
C General Information:
C xaifBooster is intended for the transformation of 
C numerical programs represented as xml files according 
C to the XAIF schema. It is part of the OpenAD framework. 
C The main application is automatic 
C differentiation, i.e. the generation of code for 
C the computation of derivatives. 
C The following people are the principal authors of the 
C current version: 
C 	Uwe Naumann
C	Jean Utke
C Additional contributors are: 
C	Andrew Lyons
C	Peter Fine
C
C For more details about xaifBooster and its use in OpenAD please visit:
C   http://www.mcs.anl.gov/openad
C
C This work is partially supported by:
C 	NSF-ITR grant OCE-0205590
C ========== end copyright notice ==============

      SUBROUTINE head(X, F)
          use OAD_tape
          use OAD_rev
          use OAD_cp

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      REAL(w2f__8) OpenAD_Symbol_1
      REAL(w2f__8) OpenAD_Symbol_100
      REAL(w2f__8) OpenAD_Symbol_101
      REAL(w2f__8) OpenAD_Symbol_102
      REAL(w2f__8) OpenAD_Symbol_103
      REAL(w2f__8) OpenAD_Symbol_105
      REAL(w2f__8) OpenAD_Symbol_106
      REAL(w2f__8) OpenAD_Symbol_107
      REAL(w2f__8) OpenAD_Symbol_108
      REAL(w2f__8) OpenAD_Symbol_110
      REAL(w2f__8) OpenAD_Symbol_111
      REAL(w2f__8) OpenAD_Symbol_114
      REAL(w2f__8) OpenAD_Symbol_115
      REAL(w2f__8) OpenAD_Symbol_116
      REAL(w2f__8) OpenAD_Symbol_117
      REAL(w2f__8) OpenAD_Symbol_118
      REAL(w2f__8) OpenAD_Symbol_119
      REAL(w2f__8) OpenAD_Symbol_12
      REAL(w2f__8) OpenAD_Symbol_121
      REAL(w2f__8) OpenAD_Symbol_122
      REAL(w2f__8) OpenAD_Symbol_125
      REAL(w2f__8) OpenAD_Symbol_127
      REAL(w2f__8) OpenAD_Symbol_128
      REAL(w2f__8) OpenAD_Symbol_129
      REAL(w2f__8) OpenAD_Symbol_130
      REAL(w2f__8) OpenAD_Symbol_131
      REAL(w2f__8) OpenAD_Symbol_133
      REAL(w2f__8) OpenAD_Symbol_134
      REAL(w2f__8) OpenAD_Symbol_135
      REAL(w2f__8) OpenAD_Symbol_136
      REAL(w2f__8) OpenAD_Symbol_137
      REAL(w2f__8) OpenAD_Symbol_138
      REAL(w2f__8) OpenAD_Symbol_139
      REAL(w2f__8) OpenAD_Symbol_14
      REAL(w2f__8) OpenAD_Symbol_140
      REAL(w2f__8) OpenAD_Symbol_141
      REAL(w2f__8) OpenAD_Symbol_142
      REAL(w2f__8) OpenAD_Symbol_143
      REAL(w2f__8) OpenAD_Symbol_144
      REAL(w2f__8) OpenAD_Symbol_145
      REAL(w2f__8) OpenAD_Symbol_146
      REAL(w2f__8) OpenAD_Symbol_147
      REAL(w2f__8) OpenAD_Symbol_148
      REAL(w2f__8) OpenAD_Symbol_149
      REAL(w2f__8) OpenAD_Symbol_15
      REAL(w2f__8) OpenAD_Symbol_150
      REAL(w2f__8) OpenAD_Symbol_151
      REAL(w2f__8) OpenAD_Symbol_152
      type(active) :: OpenAD_Symbol_153
      REAL(w2f__8) OpenAD_Symbol_154
      REAL(w2f__8) OpenAD_Symbol_155
      REAL(w2f__8) OpenAD_Symbol_156
      REAL(w2f__8) OpenAD_Symbol_157
      REAL(w2f__8) OpenAD_Symbol_158
      REAL(w2f__8) OpenAD_Symbol_159
      REAL(w2f__8) OpenAD_Symbol_16
      type(active) :: OpenAD_Symbol_160
      REAL(w2f__8) OpenAD_Symbol_161
      REAL(w2f__8) OpenAD_Symbol_162
      REAL(w2f__8) OpenAD_Symbol_163
      REAL(w2f__8) OpenAD_Symbol_164
      REAL(w2f__8) OpenAD_Symbol_165
      REAL(w2f__8) OpenAD_Symbol_166
      REAL(w2f__8) OpenAD_Symbol_167
      REAL(w2f__8) OpenAD_Symbol_168
      REAL(w2f__8) OpenAD_Symbol_169
      REAL(w2f__8) OpenAD_Symbol_17
      REAL(w2f__8) OpenAD_Symbol_170
      REAL(w2f__8) OpenAD_Symbol_171
      REAL(w2f__8) OpenAD_Symbol_172
      type(active) :: OpenAD_Symbol_173
      type(active) :: OpenAD_Symbol_174
      REAL(w2f__8) OpenAD_Symbol_175
      REAL(w2f__8) OpenAD_Symbol_176
      REAL(w2f__8) OpenAD_Symbol_177
      REAL(w2f__8) OpenAD_Symbol_178
      REAL(w2f__8) OpenAD_Symbol_179
      REAL(w2f__8) OpenAD_Symbol_18
      REAL(w2f__8) OpenAD_Symbol_180
      type(active) :: OpenAD_Symbol_181
      INTEGER(w2f__i8) OpenAD_Symbol_182
      INTEGER(w2f__i8) OpenAD_Symbol_183
      INTEGER(w2f__i8) OpenAD_Symbol_184
      INTEGER(w2f__i8) OpenAD_Symbol_185
      INTEGER(w2f__i8) OpenAD_Symbol_186
      INTEGER(w2f__i8) OpenAD_Symbol_187
      REAL(w2f__8) OpenAD_Symbol_2
      REAL(w2f__8) OpenAD_Symbol_20
      REAL(w2f__8) OpenAD_Symbol_21
      REAL(w2f__8) OpenAD_Symbol_22
      REAL(w2f__8) OpenAD_Symbol_23
      REAL(w2f__8) OpenAD_Symbol_24
      REAL(w2f__8) OpenAD_Symbol_25
      REAL(w2f__8) OpenAD_Symbol_26
      REAL(w2f__8) OpenAD_Symbol_27
      REAL(w2f__8) OpenAD_Symbol_28
      REAL(w2f__8) OpenAD_Symbol_29
      REAL(w2f__8) OpenAD_Symbol_3
      REAL(w2f__8) OpenAD_Symbol_30
      REAL(w2f__8) OpenAD_Symbol_32
      REAL(w2f__8) OpenAD_Symbol_33
      REAL(w2f__8) OpenAD_Symbol_34
      REAL(w2f__8) OpenAD_Symbol_35
      REAL(w2f__8) OpenAD_Symbol_37
      REAL(w2f__8) OpenAD_Symbol_38
      REAL(w2f__8) OpenAD_Symbol_4
      REAL(w2f__8) OpenAD_Symbol_40
      REAL(w2f__8) OpenAD_Symbol_41
      REAL(w2f__8) OpenAD_Symbol_42
      REAL(w2f__8) OpenAD_Symbol_43
      REAL(w2f__8) OpenAD_Symbol_44
      REAL(w2f__8) OpenAD_Symbol_45
      REAL(w2f__8) OpenAD_Symbol_46
      REAL(w2f__8) OpenAD_Symbol_47
      REAL(w2f__8) OpenAD_Symbol_48
      REAL(w2f__8) OpenAD_Symbol_5
      REAL(w2f__8) OpenAD_Symbol_50
      REAL(w2f__8) OpenAD_Symbol_51
      REAL(w2f__8) OpenAD_Symbol_52
      REAL(w2f__8) OpenAD_Symbol_53
      REAL(w2f__8) OpenAD_Symbol_55
      REAL(w2f__8) OpenAD_Symbol_56
      REAL(w2f__8) OpenAD_Symbol_58
      REAL(w2f__8) OpenAD_Symbol_59
      REAL(w2f__8) OpenAD_Symbol_6
      REAL(w2f__8) OpenAD_Symbol_60
      REAL(w2f__8) OpenAD_Symbol_61
      REAL(w2f__8) OpenAD_Symbol_62
      REAL(w2f__8) OpenAD_Symbol_63
      REAL(w2f__8) OpenAD_Symbol_64
      REAL(w2f__8) OpenAD_Symbol_65
      REAL(w2f__8) OpenAD_Symbol_66
      REAL(w2f__8) OpenAD_Symbol_68
      REAL(w2f__8) OpenAD_Symbol_69
      REAL(w2f__8) OpenAD_Symbol_70
      REAL(w2f__8) OpenAD_Symbol_71
      REAL(w2f__8) OpenAD_Symbol_73
      REAL(w2f__8) OpenAD_Symbol_74
      REAL(w2f__8) OpenAD_Symbol_77
      REAL(w2f__8) OpenAD_Symbol_78
      REAL(w2f__8) OpenAD_Symbol_79
      REAL(w2f__8) OpenAD_Symbol_8
      REAL(w2f__8) OpenAD_Symbol_80
      REAL(w2f__8) OpenAD_Symbol_81
      REAL(w2f__8) OpenAD_Symbol_82
      REAL(w2f__8) OpenAD_Symbol_83
      REAL(w2f__8) OpenAD_Symbol_84
      REAL(w2f__8) OpenAD_Symbol_85
      REAL(w2f__8) OpenAD_Symbol_87
      REAL(w2f__8) OpenAD_Symbol_88
      REAL(w2f__8) OpenAD_Symbol_89
      REAL(w2f__8) OpenAD_Symbol_9
      REAL(w2f__8) OpenAD_Symbol_90
      REAL(w2f__8) OpenAD_Symbol_92
      REAL(w2f__8) OpenAD_Symbol_93
      REAL(w2f__8) OpenAD_Symbol_95
      REAL(w2f__8) OpenAD_Symbol_96
      REAL(w2f__8) OpenAD_Symbol_97
      REAL(w2f__8) OpenAD_Symbol_98
      REAL(w2f__8) OpenAD_Symbol_99
C
C     **** Parameters and Result ****
C
      type(active) :: X(1:9)
      type(active) :: F(1:7)
C
C     **** Local Variables and Functions ****
C
      REAL(w2f__8) H
      INTEGER(w2f__i4) I
      INTEGER(w2f__i8) OpenAD_Symbol_188
      INTEGER(w2f__i8) OpenAD_Symbol_189
      INTEGER(w2f__i8) OpenAD_Symbol_190
      INTEGER(w2f__i8) OpenAD_Symbol_191
      INTEGER(w2f__i8) OpenAD_Symbol_192
      INTEGER(w2f__i8) OpenAD_Symbol_193
      INTEGER(w2f__i8) OpenAD_Symbol_194
      INTEGER(w2f__i8) OpenAD_Symbol_195
      INTEGER(w2f__i8) OpenAD_Symbol_196
      INTEGER(w2f__i8) OpenAD_Symbol_197
      INTEGER(w2f__i8) OpenAD_Symbol_198
      INTEGER(w2f__i8) OpenAD_Symbol_199
      REAL(w2f__8) OpenAD_Symbol_200
      REAL(w2f__8) OpenAD_Symbol_201
      REAL(w2f__8) OpenAD_Symbol_202
      REAL(w2f__8) OpenAD_Symbol_203
      REAL(w2f__8) OpenAD_Symbol_204
      REAL(w2f__8) OpenAD_Symbol_205
      REAL(w2f__8) OpenAD_Symbol_206
      REAL(w2f__8) OpenAD_Symbol_207
      INTEGER(w2f__i8) OpenAD_Symbol_208
      REAL(w2f__8) OpenAD_Symbol_209
      REAL(w2f__8) OpenAD_Symbol_210
      REAL(w2f__8) OpenAD_Symbol_211
      REAL(w2f__8) OpenAD_Symbol_212
      INTEGER(w2f__i8) OpenAD_Symbol_213
      INTEGER(w2f__i8) OpenAD_Symbol_214
      INTEGER(w2f__i8) OpenAD_Symbol_215
      INTEGER(w2f__i8) OpenAD_Symbol_216
      INTEGER(w2f__i8) OpenAD_Symbol_217
      INTEGER(w2f__i8) OpenAD_Symbol_218
      REAL(w2f__8) OpenAD_Symbol_219
      REAL(w2f__8) OpenAD_Symbol_220
      REAL(w2f__8) OpenAD_Symbol_221
      REAL(w2f__8) OpenAD_Symbol_222
      INTEGER(w2f__i8) OpenAD_Symbol_223
      REAL(w2f__8) OpenAD_Symbol_224
      REAL(w2f__8) OpenAD_Symbol_225
      REAL(w2f__8) OpenAD_Symbol_226
      REAL(w2f__8) OpenAD_Symbol_227
      INTEGER(w2f__i8) OpenAD_Symbol_228
      INTEGER(w2f__i8) OpenAD_Symbol_229
      INTEGER(w2f__i8) OpenAD_Symbol_230
      INTEGER(w2f__i8) OpenAD_Symbol_231
      INTEGER(w2f__i8) OpenAD_Symbol_232
      INTEGER(w2f__i8) OpenAD_Symbol_233
      INTEGER(w2f__i8) OpenAD_Symbol_234
      REAL(w2f__8) OpenAD_Symbol_235
      REAL(w2f__8) OpenAD_Symbol_236
      REAL(w2f__8) OpenAD_Symbol_237
      REAL(w2f__8) OpenAD_Symbol_238
      REAL(w2f__8) OpenAD_Symbol_239
      REAL(w2f__8) OpenAD_Symbol_240
      REAL(w2f__8) OpenAD_Symbol_241
      REAL(w2f__8) OpenAD_Symbol_242


          ! checkpointing stacks and offsets
          integer :: cp_loop_variable_1,cp_loop_variable_2,
     +cp_loop_variable_3,cp_loop_variable_4,cp_loop_variable_5
          ! floats 'F'
          double precision, dimension(:), allocatable, save :: 
     +theArgFStack
          integer, save :: theArgFStackoffset=0, theArgFStackSize=0
          ! integers 'I'
          integer, dimension(:), allocatable, save :: 
     +theArgIStack
          integer, save :: theArgIStackoffset=0, theArgIStackSize=0
          ! booleans 'B'
          logical, dimension(:), allocatable, save :: 
     +theArgBStack
          integer, save :: theArgBStackoffset=0, theArgBStackSize=0
          ! strings 'S'
          character*(80), dimension(:), allocatable, save :: 
     +theArgSStack
          integer, save :: theArgSStackoffset=0, theArgSStackSize=0

          type(modeType) :: our_orig_mode

! external C function used in inlined code
          integer iaddr
          external iaddr
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(F)
C
C     **** Statements ****
C

          if (our_rev_mode%arg_store) then 
C store arguments

          end if 
          if (our_rev_mode%arg_restore) then
C restore arguments

          end if
          if (our_rev_mode%plain) then
            our_orig_mode=our_rev_mode
            our_rev_mode%arg_store=.FALSE.
C original function
C$OPENAD XXX Template ad_template.f
      H = 2.5D-01
      F(1)%v = (X(1)%v*(-2.0D00)+((X(8)%v*H*H)/1.2D+01)*(EXP(X(1)%v/(X(1
     +)%v*X(9)%v+1.0D00))*1.0D+01+1.0D00))
      F(2)%v = (X(1)%v+EXP(X(1)%v/(X(1)%v*X(9)%v+1.0D00))*((X(8)%v*H*H)/
     +1.2D+01))
      DO I = 2, 6, 1
        F(INT(I+(-1)))%v = (X(I)%v+F(I+(-1))%v+EXP(X(I)%v/(X(I)%v*X(9)%v
     ++1.0D00))*((X(8)%v*H*H)/1.2D+01))
        F(INT(I))%v = (EXP(X(I)%v/(X(I)%v*X(9)%v+1.0D00))*((X(8)%v*H*H)/
     +1.19999999999999995559D00)+F(I)%v-X(I)%v*2.0D00)
        F(INT(I+1))%v = (X(I)%v+EXP(X(I)%v/(X(I)%v*X(9)%v+1.0D00))*((X(8
     +)%v*H*H)/1.2D+01))
      END DO
      F(6)%v = (X(7)%v+F(6)%v+EXP(X(7)%v/(X(7)%v*X(9)%v+1.0D00))*((X(8)%
     +v*H*H)/1.2D+01))
      F(7)%v = (F(7)%v-X(7)%v*2.0D00)
      F(7)%v = (F(7)%v+((X(8)%v*H*H)/1.2D+01)*(EXP(X(7)%v/(X(7)%v*X(9)%v
     ++1.0D00))*1.0D+01+1.0D00))

C original function end
            our_rev_mode=our_orig_mode
          end if 
          if (our_rev_mode%tape) then
C            print*, " tape       ", our_rev_mode
            our_rev_mode%arg_store=.TRUE.
            our_rev_mode%arg_restore=.FALSE.
            our_rev_mode%plain=.TRUE.
            our_rev_mode%tape=.FALSE.
            our_rev_mode%adjoint=.FALSE.
C taping
C$OPENAD XXX Template ad_template.f
      H = 2.5D-01
      OpenAD_Symbol_8 = (H * H)
      OpenAD_Symbol_5 = (X(8)%v*OpenAD_Symbol_8)
      OpenAD_Symbol_1 = (OpenAD_Symbol_5 / 1.2D+01)
      OpenAD_Symbol_16 = (X(1)%v*X(9)%v+1.0D00)
      OpenAD_Symbol_14 = (X(1)%v/OpenAD_Symbol_16)
      OpenAD_Symbol_12 = EXP(OpenAD_Symbol_14)
      OpenAD_Symbol_2 = (OpenAD_Symbol_12 * 1.0D+01 + 1.0D00)
      F(1)%v = (X(1)%v*(-2.0D00)+OpenAD_Symbol_1*OpenAD_Symbol_2)
      OpenAD_Symbol_9 = OpenAD_Symbol_8
      OpenAD_Symbol_6 = (INT(1_w2f__i8) / 1.2D+01)
      OpenAD_Symbol_3 = OpenAD_Symbol_2
      OpenAD_Symbol_17 = (INT(1_w2f__i8) / OpenAD_Symbol_16)
      OpenAD_Symbol_20 = X(9)%v
      OpenAD_Symbol_21 = X(1)%v
      OpenAD_Symbol_18 = (-(X(1)%v/(OpenAD_Symbol_16*OpenAD_Symbol_16)))
      OpenAD_Symbol_15 = EXP(OpenAD_Symbol_14)
      OpenAD_Symbol_4 = OpenAD_Symbol_1
      OpenAD_Symbol_135 = (OpenAD_Symbol_15 * 1.0D+01)
      OpenAD_Symbol_136 = (OpenAD_Symbol_9 * OpenAD_Symbol_6 *
     >  OpenAD_Symbol_3)
      OpenAD_Symbol_137 = (OpenAD_Symbol_17 * OpenAD_Symbol_135 *
     >  OpenAD_Symbol_4)
      OpenAD_Symbol_138 = (OpenAD_Symbol_18 * OpenAD_Symbol_135 *
     >  OpenAD_Symbol_4)
      OpenAD_Symbol_139 = (OpenAD_Symbol_20 * OpenAD_Symbol_138)
      OpenAD_Symbol_140 = (OpenAD_Symbol_21 * OpenAD_Symbol_138)
          double_tape(double_tape_pointer) = OpenAD_Symbol_136
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_137
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_139
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_140
          double_tape_pointer = double_tape_pointer+1
      OpenAD_Symbol_28 = (X(1)%v*X(9)%v+1.0D00)
      OpenAD_Symbol_26 = (X(1)%v/OpenAD_Symbol_28)
      OpenAD_Symbol_22 = EXP(OpenAD_Symbol_26)
      OpenAD_Symbol_37 = (H * H)
      OpenAD_Symbol_34 = (X(8)%v*OpenAD_Symbol_37)
      OpenAD_Symbol_23 = (OpenAD_Symbol_34 / 1.2D+01)
      F(2)%v = (X(1)%v+OpenAD_Symbol_22*OpenAD_Symbol_23)
      OpenAD_Symbol_29 = (INT(1_w2f__i8) / OpenAD_Symbol_28)
      OpenAD_Symbol_32 = X(9)%v
      OpenAD_Symbol_33 = X(1)%v
      OpenAD_Symbol_30 = (-(X(1)%v/(OpenAD_Symbol_28*OpenAD_Symbol_28)))
      OpenAD_Symbol_27 = EXP(OpenAD_Symbol_26)
      OpenAD_Symbol_24 = OpenAD_Symbol_23
      OpenAD_Symbol_38 = OpenAD_Symbol_37
      OpenAD_Symbol_35 = (INT(1_w2f__i8) / 1.2D+01)
      OpenAD_Symbol_25 = OpenAD_Symbol_22
      OpenAD_Symbol_141 = (OpenAD_Symbol_27 * OpenAD_Symbol_24)
      OpenAD_Symbol_142 = (OpenAD_Symbol_38 * OpenAD_Symbol_35 *
     >  OpenAD_Symbol_25)
      OpenAD_Symbol_143 = (OpenAD_Symbol_29 * OpenAD_Symbol_141)
      OpenAD_Symbol_144 = (OpenAD_Symbol_30 * OpenAD_Symbol_141)
      OpenAD_Symbol_145 = (OpenAD_Symbol_32 * OpenAD_Symbol_144)
      OpenAD_Symbol_146 = (OpenAD_Symbol_33 * OpenAD_Symbol_144)
          double_tape(double_tape_pointer) = OpenAD_Symbol_142
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_143
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_145
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_146
          double_tape_pointer = double_tape_pointer+1
      OpenAD_Symbol_184 = 0_w2f__i8
      DO I = 2, 6, 1
        OpenAD_Symbol_46 = (X(I)%v*X(9)%v+1.0D00)
        OpenAD_Symbol_44 = (X(I)%v/OpenAD_Symbol_46)
        OpenAD_Symbol_40 = EXP(OpenAD_Symbol_44)
        OpenAD_Symbol_55 = (H * H)
        OpenAD_Symbol_52 = (X(8)%v*OpenAD_Symbol_55)
        OpenAD_Symbol_41 = (OpenAD_Symbol_52 / 1.2D+01)
        F(INT(I+(-1)))%v = (X(I)%v+F(I+(-1))%v+OpenAD_Symbol_40*OpenAD_S
     +ymbol_41)
        OpenAD_Symbol_47 = (INT(1_w2f__i8) / OpenAD_Symbol_46)
        OpenAD_Symbol_50 = X(9)%v
        OpenAD_Symbol_51 = X(I)%v
        OpenAD_Symbol_48 = (-(X(I)%v/(OpenAD_Symbol_46*OpenAD_Symbol_46)
     +))
        OpenAD_Symbol_45 = EXP(OpenAD_Symbol_44)
        OpenAD_Symbol_42 = OpenAD_Symbol_41
        OpenAD_Symbol_56 = OpenAD_Symbol_55
        OpenAD_Symbol_53 = (INT(1_w2f__i8) / 1.2D+01)
        OpenAD_Symbol_43 = OpenAD_Symbol_40
        OpenAD_Symbol_147 = (OpenAD_Symbol_45 * OpenAD_Symbol_42)
        OpenAD_Symbol_148 = (OpenAD_Symbol_56 * OpenAD_Symbol_53 *
     >  OpenAD_Symbol_43)
        OpenAD_Symbol_149 = (OpenAD_Symbol_47 * OpenAD_Symbol_147)
        OpenAD_Symbol_150 = (OpenAD_Symbol_48 * OpenAD_Symbol_147)
        OpenAD_Symbol_151 = (OpenAD_Symbol_50 * OpenAD_Symbol_150)
        OpenAD_Symbol_152 = (OpenAD_Symbol_51 * OpenAD_Symbol_150)
        OpenAD_Symbol_188 = (I +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_188
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_148
          double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_189 = (I +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_189
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_149
          double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_190 = (I +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_190
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_151
          double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_191 = (I +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_191
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_152
          double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_192 = (I +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_192
          integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_193 = (I +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_193
          integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_194 = (I +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_194
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = I
          integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_64 = (X(I)%v*X(9)%v+1.0D00)
        OpenAD_Symbol_62 = (X(I)%v/OpenAD_Symbol_64)
        OpenAD_Symbol_58 = EXP(OpenAD_Symbol_62)
        OpenAD_Symbol_73 = (H * H)
        OpenAD_Symbol_70 = (X(8)%v*OpenAD_Symbol_73)
        OpenAD_Symbol_59 = (OpenAD_Symbol_70 /
     >  1.19999999999999995559D00)
        F(INT(I))%v = (OpenAD_Symbol_58*OpenAD_Symbol_59+F(I)%v-X(I)%v*2
     +.0D00)
        OpenAD_Symbol_65 = (INT(1_w2f__i8) / OpenAD_Symbol_64)
        OpenAD_Symbol_68 = X(9)%v
        OpenAD_Symbol_69 = X(I)%v
        OpenAD_Symbol_66 = (-(X(I)%v/(OpenAD_Symbol_64*OpenAD_Symbol_64)
     +))
        OpenAD_Symbol_63 = EXP(OpenAD_Symbol_62)
        OpenAD_Symbol_60 = OpenAD_Symbol_59
        OpenAD_Symbol_74 = OpenAD_Symbol_73
        OpenAD_Symbol_71 = (INT(1_w2f__i8) / 1.19999999999999995559D00)
        OpenAD_Symbol_61 = OpenAD_Symbol_58
        OpenAD_Symbol_154 = (OpenAD_Symbol_63 * OpenAD_Symbol_60)
        OpenAD_Symbol_155 = (OpenAD_Symbol_74 * OpenAD_Symbol_71 *
     >  OpenAD_Symbol_61)
        OpenAD_Symbol_156 = (OpenAD_Symbol_65 * OpenAD_Symbol_154)
        OpenAD_Symbol_157 = (OpenAD_Symbol_66 * OpenAD_Symbol_154)
        OpenAD_Symbol_158 = (OpenAD_Symbol_68 * OpenAD_Symbol_157)
        OpenAD_Symbol_159 = (OpenAD_Symbol_69 * OpenAD_Symbol_157)
          double_tape(double_tape_pointer) = OpenAD_Symbol_155
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_156
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_158
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_159
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = I
          integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_83 = (X(I)%v*X(9)%v+1.0D00)
        OpenAD_Symbol_81 = (X(I)%v/OpenAD_Symbol_83)
        OpenAD_Symbol_77 = EXP(OpenAD_Symbol_81)
        OpenAD_Symbol_92 = (H * H)
        OpenAD_Symbol_89 = (X(8)%v*OpenAD_Symbol_92)
        OpenAD_Symbol_78 = (OpenAD_Symbol_89 / 1.2D+01)
        F(INT(I+1))%v = (X(I)%v+OpenAD_Symbol_77*OpenAD_Symbol_78)
        OpenAD_Symbol_84 = (INT(1_w2f__i8) / OpenAD_Symbol_83)
        OpenAD_Symbol_87 = X(9)%v
        OpenAD_Symbol_88 = X(I)%v
        OpenAD_Symbol_85 = (-(X(I)%v/(OpenAD_Symbol_83*OpenAD_Symbol_83)
     +))
        OpenAD_Symbol_82 = EXP(OpenAD_Symbol_81)
        OpenAD_Symbol_79 = OpenAD_Symbol_78
        OpenAD_Symbol_93 = OpenAD_Symbol_92
        OpenAD_Symbol_90 = (INT(1_w2f__i8) / 1.2D+01)
        OpenAD_Symbol_80 = OpenAD_Symbol_77
        OpenAD_Symbol_161 = (OpenAD_Symbol_82 * OpenAD_Symbol_79)
        OpenAD_Symbol_162 = (OpenAD_Symbol_93 * OpenAD_Symbol_90 *
     >  OpenAD_Symbol_80)
        OpenAD_Symbol_163 = (OpenAD_Symbol_84 * OpenAD_Symbol_161)
        OpenAD_Symbol_164 = (OpenAD_Symbol_85 * OpenAD_Symbol_161)
        OpenAD_Symbol_165 = (OpenAD_Symbol_87 * OpenAD_Symbol_164)
        OpenAD_Symbol_166 = (OpenAD_Symbol_88 * OpenAD_Symbol_164)
        OpenAD_Symbol_195 = (I + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_195
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_162
          double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_196 = (I + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_196
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_163
          double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_197 = (I + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_197
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_165
          double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_198 = (I + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_198
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_166
          double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_199 = (I + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_199
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = I
          integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_184 = (INT(OpenAD_Symbol_184) + INT(1_w2f__i8))
      END DO
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_184
          integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_101 = (X(7)%v*X(9)%v+1.0D00)
      OpenAD_Symbol_99 = (X(7)%v/OpenAD_Symbol_101)
      OpenAD_Symbol_95 = EXP(OpenAD_Symbol_99)
      OpenAD_Symbol_110 = (H * H)
      OpenAD_Symbol_107 = (X(8)%v*OpenAD_Symbol_110)
      OpenAD_Symbol_96 = (OpenAD_Symbol_107 / 1.2D+01)
      F(6)%v = (X(7)%v+F(6)%v+OpenAD_Symbol_95*OpenAD_Symbol_96)
      OpenAD_Symbol_102 = (INT(1_w2f__i8) / OpenAD_Symbol_101)
      OpenAD_Symbol_105 = X(9)%v
      OpenAD_Symbol_106 = X(7)%v
      OpenAD_Symbol_103 = (-(X(7)%v/(OpenAD_Symbol_101*OpenAD_Symbol_101
     +)))
      OpenAD_Symbol_100 = EXP(OpenAD_Symbol_99)
      OpenAD_Symbol_97 = OpenAD_Symbol_96
      OpenAD_Symbol_111 = OpenAD_Symbol_110
      OpenAD_Symbol_108 = (INT(1_w2f__i8) / 1.2D+01)
      OpenAD_Symbol_98 = OpenAD_Symbol_95
      OpenAD_Symbol_167 = (OpenAD_Symbol_100 * OpenAD_Symbol_97)
      OpenAD_Symbol_168 = (OpenAD_Symbol_111 * OpenAD_Symbol_108 *
     >  OpenAD_Symbol_98)
      OpenAD_Symbol_169 = (OpenAD_Symbol_102 * OpenAD_Symbol_167)
      OpenAD_Symbol_170 = (OpenAD_Symbol_103 * OpenAD_Symbol_167)
      OpenAD_Symbol_171 = (OpenAD_Symbol_105 * OpenAD_Symbol_170)
      OpenAD_Symbol_172 = (OpenAD_Symbol_106 * OpenAD_Symbol_170)
          double_tape(double_tape_pointer) = OpenAD_Symbol_168
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_169
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_171
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_172
          double_tape_pointer = double_tape_pointer+1
      F(7)%v = (F(7)%v-X(7)%v*2.0D00)
      OpenAD_Symbol_121 = (H * H)
      OpenAD_Symbol_118 = (X(8)%v*OpenAD_Symbol_121)
      OpenAD_Symbol_114 = (OpenAD_Symbol_118 / 1.2D+01)
      OpenAD_Symbol_129 = (X(7)%v*X(9)%v+1.0D00)
      OpenAD_Symbol_127 = (X(7)%v/OpenAD_Symbol_129)
      OpenAD_Symbol_125 = EXP(OpenAD_Symbol_127)
      OpenAD_Symbol_115 = (OpenAD_Symbol_125 * 1.0D+01 + 1.0D00)
      F(7)%v = (F(7)%v+OpenAD_Symbol_114*OpenAD_Symbol_115)
      OpenAD_Symbol_122 = OpenAD_Symbol_121
      OpenAD_Symbol_119 = (INT(1_w2f__i8) / 1.2D+01)
      OpenAD_Symbol_116 = OpenAD_Symbol_115
      OpenAD_Symbol_130 = (INT(1_w2f__i8) / OpenAD_Symbol_129)
      OpenAD_Symbol_133 = X(9)%v
      OpenAD_Symbol_134 = X(7)%v
      OpenAD_Symbol_131 = (-(X(7)%v/(OpenAD_Symbol_129*OpenAD_Symbol_129
     +)))
      OpenAD_Symbol_128 = EXP(OpenAD_Symbol_127)
      OpenAD_Symbol_117 = OpenAD_Symbol_114
      OpenAD_Symbol_175 = (OpenAD_Symbol_128 * 1.0D+01)
      OpenAD_Symbol_176 = (OpenAD_Symbol_122 * OpenAD_Symbol_119 *
     >  OpenAD_Symbol_116)
      OpenAD_Symbol_177 = (OpenAD_Symbol_130 * OpenAD_Symbol_175 *
     >  OpenAD_Symbol_117)
      OpenAD_Symbol_178 = (OpenAD_Symbol_131 * OpenAD_Symbol_175 *
     >  OpenAD_Symbol_117)
      OpenAD_Symbol_179 = (OpenAD_Symbol_133 * OpenAD_Symbol_178)
      OpenAD_Symbol_180 = (OpenAD_Symbol_134 * OpenAD_Symbol_178)
          double_tape(double_tape_pointer) = OpenAD_Symbol_176
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_177
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_179
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_180
          double_tape_pointer = double_tape_pointer+1

C taping end
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.FALSE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.FALSE.
            our_rev_mode%adjoint=.TRUE.
          end if 
          if (our_rev_mode%adjoint) then
C            print*, " adjoint    ", our_rev_mode
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.TRUE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.TRUE.
            our_rev_mode%adjoint=.FALSE.
C adjoint
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_235 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_236 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_237 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_238 = double_tape(double_tape_pointer)
          X(9)%d = X(9)%d+F(7)%d*OpenAD_Symbol_235
          X(7)%d = X(7)%d+F(7)%d*OpenAD_Symbol_236
          X(7)%d = X(7)%d+F(7)%d*OpenAD_Symbol_237
          X(8)%d = X(8)%d+F(7)%d*OpenAD_Symbol_238
          OpenAD_Symbol_181%d = OpenAD_Symbol_181%d+F(7)%d*1_w2f__i8
          F(7)%d = 0.0d0
          F(7)%d = F(7)%d+OpenAD_Symbol_181%d
          OpenAD_Symbol_181%d = 0.0d0
          X(7)%d = X(7)%d+F(7)%d*-2.0D00
          OpenAD_Symbol_174%d = OpenAD_Symbol_174%d+F(7)%d*1_w2f__i8
          F(7)%d = 0.0d0
          F(7)%d = F(7)%d+OpenAD_Symbol_174%d
          OpenAD_Symbol_174%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_239 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_240 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_241 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_242 = double_tape(double_tape_pointer)
          OpenAD_Symbol_173%d = OpenAD_Symbol_173%d+F(6)%d*1_w2f__i8
          X(7)%d = X(7)%d+F(6)%d*1_w2f__i8
          X(9)%d = X(9)%d+F(6)%d*OpenAD_Symbol_239
          X(7)%d = X(7)%d+F(6)%d*OpenAD_Symbol_240
          X(7)%d = X(7)%d+F(6)%d*OpenAD_Symbol_241
          X(8)%d = X(8)%d+F(6)%d*OpenAD_Symbol_242
          F(6)%d = 0.0d0
          F(6)%d = F(6)%d+OpenAD_Symbol_173%d
          OpenAD_Symbol_173%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_182 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_183 = 1
      DO WHILE(INT(OpenAD_Symbol_183) .LE. INT(OpenAD_Symbol_182))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_208 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_209 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_210 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_211 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_212 = double_tape(double_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_213 = integer_tape(integer_tape_pointer)
          X(9)%d = X(9)%d+F(INT(OpenAD_Symbol_213))%d*OpenAD_Symbol_209
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_214 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_208))%d = X(INT(OpenAD_Symbol_208))%d+F(IN
     +T(OpenAD_Symbol_214))%d*OpenAD_Symbol_210
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_215 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_208))%d = X(INT(OpenAD_Symbol_208))%d+F(IN
     +T(OpenAD_Symbol_215))%d*OpenAD_Symbol_211
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_216 = integer_tape(integer_tape_pointer)
          X(8)%d = X(8)%d+F(INT(OpenAD_Symbol_216))%d*OpenAD_Symbol_212
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_217 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_208))%d = X(INT(OpenAD_Symbol_208))%d+F(IN
     +T(OpenAD_Symbol_217))%d*1_w2f__i8
          F(INT(OpenAD_Symbol_217))%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_218 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_219 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_220 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_221 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_222 = double_tape(double_tape_pointer)
          X(INT(OpenAD_Symbol_218))%d = X(INT(OpenAD_Symbol_218))%d+F(IN
     +T(OpenAD_Symbol_218))%d*-2.0D00
          X(9)%d = X(9)%d+F(INT(OpenAD_Symbol_218))%d*OpenAD_Symbol_219
          X(INT(OpenAD_Symbol_218))%d = X(INT(OpenAD_Symbol_218))%d+F(IN
     +T(OpenAD_Symbol_218))%d*OpenAD_Symbol_220
          OpenAD_Symbol_160%d = OpenAD_Symbol_160%d+F(INT(OpenAD_Symbol_
     +218))%d*1_w2f__i8
          X(INT(OpenAD_Symbol_218))%d = X(INT(OpenAD_Symbol_218))%d+F(IN
     +T(OpenAD_Symbol_218))%d*OpenAD_Symbol_221
          X(8)%d = X(8)%d+F(INT(OpenAD_Symbol_218))%d*OpenAD_Symbol_222
          F(INT(OpenAD_Symbol_218))%d = 0.0d0
          F(INT(OpenAD_Symbol_218))%d = F(INT(OpenAD_Symbol_218))%d+Open
     +AD_Symbol_160%d
          OpenAD_Symbol_160%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_223 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_224 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_225 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_226 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_227 = double_tape(double_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_228 = integer_tape(integer_tape_pointer)
          OpenAD_Symbol_153%d = OpenAD_Symbol_153%d+F(INT(OpenAD_Symbol_
     +228))%d*1_w2f__i8
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_229 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_223))%d = X(INT(OpenAD_Symbol_223))%d+F(IN
     +T(OpenAD_Symbol_229))%d*1_w2f__i8
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_230 = integer_tape(integer_tape_pointer)
          X(9)%d = X(9)%d+F(INT(OpenAD_Symbol_230))%d*OpenAD_Symbol_224
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_231 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_223))%d = X(INT(OpenAD_Symbol_223))%d+F(IN
     +T(OpenAD_Symbol_231))%d*OpenAD_Symbol_225
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_232 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_223))%d = X(INT(OpenAD_Symbol_223))%d+F(IN
     +T(OpenAD_Symbol_232))%d*OpenAD_Symbol_226
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_233 = integer_tape(integer_tape_pointer)
          X(8)%d = X(8)%d+F(INT(OpenAD_Symbol_233))%d*OpenAD_Symbol_227
          F(INT(OpenAD_Symbol_233))%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_234 = integer_tape(integer_tape_pointer)
          F(INT(OpenAD_Symbol_234))%d = F(INT(OpenAD_Symbol_234))%d+Open
     +AD_Symbol_153%d
          OpenAD_Symbol_153%d = 0.0d0
        OpenAD_Symbol_183 = INT(OpenAD_Symbol_183) + 1
      END DO
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_200 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_201 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_202 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_203 = double_tape(double_tape_pointer)
          X(9)%d = X(9)%d+F(2)%d*OpenAD_Symbol_200
          X(1)%d = X(1)%d+F(2)%d*OpenAD_Symbol_201
          X(1)%d = X(1)%d+F(2)%d*OpenAD_Symbol_202
          X(8)%d = X(8)%d+F(2)%d*OpenAD_Symbol_203
          X(1)%d = X(1)%d+F(2)%d*1_w2f__i8
          F(2)%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_204 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_205 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_206 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_207 = double_tape(double_tape_pointer)
          X(1)%d = X(1)%d+F(1)%d*-2.0D00
          X(9)%d = X(9)%d+F(1)%d*OpenAD_Symbol_204
          X(1)%d = X(1)%d+F(1)%d*OpenAD_Symbol_205
          X(1)%d = X(1)%d+F(1)%d*OpenAD_Symbol_206
          X(8)%d = X(8)%d+F(1)%d*OpenAD_Symbol_207
          F(1)%d = 0.0d0

C adjoint end
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.TRUE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.TRUE.
            our_rev_mode%adjoint=.FALSE.
          end if 
        end subroutine head
