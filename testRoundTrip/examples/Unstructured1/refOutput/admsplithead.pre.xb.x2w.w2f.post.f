
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE head(X, Y)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      REAL(w2f__8) OpenAD_Symbol_0
      REAL(w2f__8) OpenAD_Symbol_1
      INTEGER(w2f__i8) OpenAD_Symbol_10
      INTEGER(w2f__i8) OpenAD_Symbol_11
      INTEGER(w2f__i8) OpenAD_Symbol_12
      INTEGER(w2f__i8) OpenAD_Symbol_13
      INTEGER(w2f__i8) OpenAD_Symbol_14
      INTEGER(w2f__i8) OpenAD_Symbol_15
      INTEGER(w2f__i8) OpenAD_Symbol_16
      INTEGER(w2f__i8) OpenAD_Symbol_2
      INTEGER(w2f__i8) OpenAD_Symbol_3
      INTEGER(w2f__i8) OpenAD_Symbol_4
      INTEGER(w2f__i8) OpenAD_Symbol_5
      INTEGER(w2f__i8) OpenAD_Symbol_6
      INTEGER(w2f__i8) OpenAD_Symbol_7
      INTEGER(w2f__i8) OpenAD_Symbol_8
      REAL(w2f__8) OpenAD_lin_1
      type(active) :: OpenAD_prop_0
      type(active) :: OpenAD_prop_1
C
C     **** Parameters and Result ****
C
      type(active) :: X(1:1)
      type(active) :: Y(1:1)
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) I
      INTEGER(w2f__i8) OpenAD_Symbol_17
      REAL(w2f__8) OpenAD_Symbol_18
      INTEGER(w2f__i8) OpenAD_Symbol_9


          integer iaddr
          external iaddr
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(Y)
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
 1    CONTINUE
      goto 2
 2    CONTINUE
C$OPENAD XXX Template ad_template.f
      I = 2
      goto 3
 3    CONTINUE
      IF (X(1)%v.LT.1.0D00) THEN
        goto 7
      ELSE
        goto 4
      ENDIF
 4    CONTINUE
      goto 5
 5    CONTINUE
      goto 6
 6    CONTINUE
      Y(1)%v = (Y(1)%v*2.0D00)
      goto 9
 7    CONTINUE
      Y(1)%v = (I*X(1)%v)
      goto 8
 8    CONTINUE
      Y(1)%v = (Y(1)%v*3.0D00)
      goto 9
 9    CONTINUE
      goto 10
 10   CONTINUE
          end if
          if (our_rev_mode%tape) then
C taping
 11   CONTINUE
      goto 12
 12   CONTINUE
      OpenAD_Symbol_2 = 0_w2f__i8
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_2
      integer_tape_pointer = integer_tape_pointer+1
      goto 13
 13   CONTINUE
C$OPENAD XXX Template ad_template.f
      I = 2
      goto 14
 14   CONTINUE
      OpenAD_Symbol_3 = 1_w2f__i8
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_3
      integer_tape_pointer = integer_tape_pointer+1
      goto 15
 15   CONTINUE
      IF (X(1)%v.LT.1.0D00) THEN
        goto 21
      ELSE
        goto 16
      ENDIF
 16   CONTINUE
      goto 17
 17   CONTINUE
      OpenAD_Symbol_7 = 5_w2f__i8
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_7
      integer_tape_pointer = integer_tape_pointer+1
      goto 18
 18   CONTINUE
      goto 19
 19   CONTINUE
      OpenAD_Symbol_1 = (Y(1)%v*2.0D00)
      Y(1)%v = OpenAD_Symbol_1
      goto 20
 20   CONTINUE
      OpenAD_Symbol_8 = 6_w2f__i8
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_8
      integer_tape_pointer = integer_tape_pointer+1
      goto 25
 21   CONTINUE
      Y(1)%v = (I*X(1)%v)
      OpenAD_lin_1 = I
      double_tape(double_tape_pointer) = OpenAD_lin_1
      double_tape_pointer = double_tape_pointer+1
      goto 22
 22   CONTINUE
      OpenAD_Symbol_4 = 2_w2f__i8
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_4
      integer_tape_pointer = integer_tape_pointer+1
      goto 23
 23   CONTINUE
      OpenAD_Symbol_0 = (Y(1)%v*3.0D00)
      Y(1)%v = OpenAD_Symbol_0
      goto 24
 24   CONTINUE
      OpenAD_Symbol_5 = 3_w2f__i8
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_5
      integer_tape_pointer = integer_tape_pointer+1
      goto 25
 25   CONTINUE
      goto 26
 26   CONTINUE
      OpenAD_Symbol_6 = 4_w2f__i8
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_6
      integer_tape_pointer = integer_tape_pointer+1
      goto 27
 27   CONTINUE
          end if 
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_9 = integer_tape(integer_tape_pointer)
      do while (INT(OpenAD_Symbol_9).ne.INT(0_w2f__i8))
        IF (OpenAD_Symbol_9.EQ.1) goto 50
        IF (OpenAD_Symbol_9.EQ.2) goto 51
        IF (OpenAD_Symbol_9.EQ.3) goto 52
        IF (OpenAD_Symbol_9.EQ.4) goto 53
        IF (OpenAD_Symbol_9.EQ.5) goto 54
        IF (OpenAD_Symbol_9.EQ.6) goto 55
 50     CONTINUE
        goto 47
 51     CONTINUE
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_18 = double_tape(double_tape_pointer)
        X(1)%d = X(1)%d+Y(1)%d*(OpenAD_Symbol_18)
        Y(1)%d = 0.0d0
        goto 47
 52     CONTINUE
        OpenAD_prop_0%d = OpenAD_prop_0%d+Y(1)%d*(3.0D00)
        Y(1)%d = 0.0d0
        Y(1)%d = Y(1)%d+OpenAD_prop_0%d
        OpenAD_prop_0%d = 0.0d0
        goto 47
 53     CONTINUE
        goto 47
 54     CONTINUE
        goto 47
 55     CONTINUE
        OpenAD_prop_1%d = OpenAD_prop_1%d+Y(1)%d*(2.0D00)
        Y(1)%d = 0.0d0
        Y(1)%d = Y(1)%d+OpenAD_prop_1%d
        OpenAD_prop_1%d = 0.0d0
        goto 47
 47     CONTINUE
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_9 = integer_tape(integer_tape_pointer)
      END DO
          end if 
        end subroutine head
