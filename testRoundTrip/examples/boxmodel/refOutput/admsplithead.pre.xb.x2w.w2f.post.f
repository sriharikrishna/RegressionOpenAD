C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
C
C$OPENAD XXX File_start [head.f]
      SUBROUTINE box_forward(ILEV1)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_108
      INTEGER(w2f__i8) OpenAD_Symbol_109
      INTEGER(w2f__i8) OpenAD_Symbol_110
      INTEGER(w2f__i8) OpenAD_Symbol_111
      INTEGER(w2f__i8) OpenAD_Symbol_112
      INTEGER(w2f__i8) OpenAD_Symbol_113
      INTEGER(w2f__i8) OpenAD_Symbol_114
      INTEGER(w2f__i8) OpenAD_Symbol_115
      INTEGER(w2f__i8) OpenAD_Symbol_116
      INTEGER(w2f__i8) OpenAD_Symbol_117
      INTEGER(w2f__i8) OpenAD_Symbol_118
      INTEGER(w2f__i8) OpenAD_Symbol_119
C
C     **** Parameters and Result ****
C
      INTEGER(w2f__i4) ILEV1
C
C     **** Local Variables and Functions ****
C
      EXTERNAL box_cycle_fields
      EXTERNAL box_density
      EXTERNAL box_robert_filter
      EXTERNAL box_timestep
      EXTERNAL box_transport
      INTEGER(w2f__i4) IKEY
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) L
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)
      INTEGER(w2f__i8) OpenAD_Symbol_259


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      IKEY = ILEV1
      CALL box_density(TNOW,SNOW,RHO)
      CALL box_transport(RHO,UVEL)
      CALL box_timestep(GAMMA_T,TSTAR,NULLFORCE,UVEL,TNOW,TOLD,TNEW)
      CALL box_timestep(GAMMA_S,SSTAR,FW,UVEL,SNOW,SOLD,SNEW)
      CALL box_robert_filter(TNOW,TOLD,TNEW)
      CALL box_robert_filter(SNOW,SOLD,SNEW)
      CALL box_cycle_fields()
      DO L = 1,3,1
        IF (TNOW(L)%v.LT.(-2.0D00)) THEN
          TNOW(INT(L))%v = 2.0D00
        ENDIF
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      IKEY = ILEV1
      CALL box_density(TNOW,SNOW,RHO)
      CALL box_transport(RHO,UVEL)
      CALL box_timestep(GAMMA_T,TSTAR,NULLFORCE,UVEL,TNOW,TOLD,TNEW)
      CALL box_timestep(GAMMA_S,SSTAR,FW,UVEL,SNOW,SOLD,SNEW)
      CALL box_robert_filter(TNOW,TOLD,TNEW)
      CALL box_robert_filter(SNOW,SOLD,SNEW)
      CALL box_cycle_fields()
      OpenAD_Symbol_111 = 0_w2f__i8
      DO L = 1,3,1
        IF (TNOW(L)%v.LT.(-2.0D00)) THEN
          TNOW(INT(L))%v = 2.0D00
          integer_tape(integer_tape_pointer) = L
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_112 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_112
          integer_tape_pointer = integer_tape_pointer+1
        ELSE
          OpenAD_Symbol_113 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_113
          integer_tape_pointer = integer_tape_pointer+1
        ENDIF
        OpenAD_Symbol_111 = (INT(OpenAD_Symbol_111)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_111
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_108 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_109 = 1
      do while (INT(OpenAD_Symbol_109).LE.INT(OpenAD_Symbol_108))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_110 = integer_tape(integer_tape_pointer)
        IF (OpenAD_Symbol_110.ne.0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_259 = integer_tape(integer_tape_pointer)
          TNOW(INT(OpenAD_Symbol_259))%d = 0.0d0
        ENDIF
        OpenAD_Symbol_109 = INT(OpenAD_Symbol_109)+1
      END DO
      CALL box_cycle_fields()
      CALL box_robert_filter(SNOW,SOLD,SNEW)
      CALL box_robert_filter(TNOW,TOLD,TNEW)
      CALL box_timestep(GAMMA_S,SSTAR,FW,UVEL,SNOW,SOLD,SNEW)
      CALL box_timestep(GAMMA_T,TSTAR,NULLFORCE,UVEL,TNOW,TOLD,TNEW)
      CALL box_transport(RHO,UVEL)
      CALL box_density(TNOW,SNOW,RHO)
          end if
        end subroutine box_forward
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_final_state()
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_144
      INTEGER(w2f__i8) OpenAD_Symbol_145
      INTEGER(w2f__i8) OpenAD_Symbol_146
      INTEGER(w2f__i8) OpenAD_Symbol_147
      INTEGER(w2f__i8) OpenAD_Symbol_148
      INTEGER(w2f__i8) OpenAD_Symbol_149
      INTEGER(w2f__i8) OpenAD_Symbol_150
      INTEGER(w2f__i8) OpenAD_Symbol_151
      INTEGER(w2f__i8) OpenAD_Symbol_152
      INTEGER(w2f__i8) OpenAD_Symbol_153
      INTEGER(w2f__i8) OpenAD_Symbol_154
      INTEGER(w2f__i8) OpenAD_Symbol_155
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) L
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      DO L = 1, 6, 1
        TSVEC(INT(L)) = 0.0
      END DO
      DO L = 1, 3, 1
        TSVEC(INT(L)) = TNOW(L)%v
        TSVEC(INT(L+3)) = SNOW(L)%v
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_148 = 0_w2f__i8
      DO L = 1,6,1
        TSVEC(INT(L)) = 0.0
        OpenAD_Symbol_148 = (INT(OpenAD_Symbol_148)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_148
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_149 = 0_w2f__i8
      DO L = 1,3,1
        TSVEC(INT(L)) = TNOW(L)%v
        TSVEC(INT(L+3)) = SNOW(L)%v
        OpenAD_Symbol_149 = (INT(OpenAD_Symbol_149)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_149
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_144 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_145 = 1
      do while (INT(OpenAD_Symbol_145).LE.INT(OpenAD_Symbol_144))
        OpenAD_Symbol_145 = INT(OpenAD_Symbol_145)+1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_146 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_147 = 1
      do while (INT(OpenAD_Symbol_147).LE.INT(OpenAD_Symbol_146))
        OpenAD_Symbol_147 = INT(OpenAD_Symbol_147)+1
      END DO
          end if
        end subroutine box_final_state
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_ini_fields()
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_156
      INTEGER(w2f__i8) OpenAD_Symbol_157
      INTEGER(w2f__i8) OpenAD_Symbol_158
      INTEGER(w2f__i8) OpenAD_Symbol_159
      INTEGER(w2f__i8) OpenAD_Symbol_160
      INTEGER(w2f__i8) OpenAD_Symbol_161
      INTEGER(w2f__i8) OpenAD_Symbol_162
      INTEGER(w2f__i8) OpenAD_Symbol_163
      INTEGER(w2f__i8) OpenAD_Symbol_164
      INTEGER(w2f__i8) OpenAD_Symbol_165
      INTEGER(w2f__i8) OpenAD_Symbol_166
      INTEGER(w2f__i8) OpenAD_Symbol_167
      INTEGER(w2f__i8) OpenAD_Symbol_168
      INTEGER(w2f__i8) OpenAD_Symbol_169
      INTEGER(w2f__i8) OpenAD_Symbol_170
      INTEGER(w2f__i8) OpenAD_Symbol_171
      INTEGER(w2f__i8) OpenAD_Symbol_172
      INTEGER(w2f__i8) OpenAD_Symbol_173
      type(active) :: OpenAD_prop_12
      type(active) :: OpenAD_prop_13
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) L
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)
      INTEGER(w2f__i8) OpenAD_Symbol_174
      INTEGER(w2f__i8) OpenAD_Symbol_286
      INTEGER(w2f__i8) OpenAD_Symbol_287
      INTEGER(w2f__i8) OpenAD_Symbol_288
      INTEGER(w2f__i8) OpenAD_Symbol_289
      INTEGER(w2f__i8) OpenAD_Symbol_290
      INTEGER(w2f__i8) OpenAD_Symbol_291


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      THC_TOT = 0.0D00
      THC_T = 0.0D00
      THC_S = 0.0D00
      METRIC1 = 0.0D00
      METRIC2 = 0.0D00
      METRIC = 0.0D00
      NULLFORCE(1) = 0.0D00
      NULLFORCE(2) = 0.0D00
      FW(1) = (AREA(1) *(HUNDRED / YEAR) * 3.5D+01)
      FW(2) = (- FW(1))
      TSTAR(1) = 2.2D+01
      TSTAR(2) = 0.0D00
      SSTAR(1) = 3.6D+01
      SSTAR(2) = 3.4D+01
      UBAR = (SV * 2.0D+01)
      T(1)%v = 2.0D+01
      T(2)%v = 1.0D00
      T(3)%v = 1.0D00
      S(1)%v = 3.55D+01
      S(2)%v = 3.45D+01
      S(3)%v = 3.45D+01
      DO L = 1,6,1
        TSVEC(INT(L)) = 0.0
      END DO
      DO L = 1,3,1
        T(INT(L))%v = (T(L)%v+XX(L)%v)
        S(INT(L))%v = (S(L)%v+XX(L+3)%v)
      END DO
      DO L = 1,3,1
        TNEW(INT(L))%v = T(L)%v
        SNEW(INT(L))%v = S(L)%v
        TOLD(INT(L))%v = T(L)%v
        SOLD(INT(L))%v = S(L)%v
        TNOW(INT(L))%v = T(L)%v
        SNOW(INT(L))%v = S(L)%v
      END DO
      UVEL%v = UBAR
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      THC_TOT = 0.0D00
      THC_T = 0.0D00
      THC_S = 0.0D00
      METRIC1 = 0.0D00
      METRIC2 = 0.0D00
      METRIC = 0.0D00
      NULLFORCE(1) = 0.0D00
      NULLFORCE(2) = 0.0D00
      FW(1) = (AREA(1)*(HUNDRED/YEAR)*3.5D+01)
      FW(2) = (-FW(1))
      TSTAR(1) = 2.2D+01
      TSTAR(2) = 0.0D00
      SSTAR(1) = 3.6D+01
      SSTAR(2) = 3.4D+01
      UBAR = (SV*2.0D+01)
      T(1)%v = 2.0D+01
      T(2)%v = 1.0D00
      T(3)%v = 1.0D00
      S(1)%v = 3.55D+01
      S(2)%v = 3.45D+01
      S(3)%v = 3.45D+01
      OpenAD_Symbol_162 = 0_w2f__i8
      DO L = 1,6,1
        TSVEC(INT(L)) = 0.0
        OpenAD_Symbol_162 = (INT(OpenAD_Symbol_162)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_162
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_163 = 0_w2f__i8
      DO L = 1,3,1
        T(INT(L))%v = (T(L)%v+XX(L)%v)
        S(INT(L))%v = (S(L)%v+XX(L+3)%v)
        OpenAD_Symbol_174 = (L+3)
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_174
        integer_tape_pointer = integer_tape_pointer+1
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_163 = (INT(OpenAD_Symbol_163)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_163
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_164 = 0_w2f__i8
      DO L = 1,3,1
        TNEW(INT(L))%v = T(L)%v
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        SNEW(INT(L))%v = S(L)%v
        TOLD(INT(L))%v = T(L)%v
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        SOLD(INT(L))%v = S(L)%v
        TNOW(INT(L))%v = T(L)%v
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        SNOW(INT(L))%v = S(L)%v
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_164 = (INT(OpenAD_Symbol_164)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_164
      integer_tape_pointer = integer_tape_pointer+1
      UVEL%v = UBAR
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      UVEL%d = 0.0d0
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_156 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_157 = 1
      do while (INT(OpenAD_Symbol_157).LE.INT(OpenAD_Symbol_156))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_288 = integer_tape(integer_tape_pointer)
        S(INT(OpenAD_Symbol_288))%d = S(INT(OpenAD_Symbol_288))%d+SNOW(I
     +NT(OpenAD_Symbol_288))%d
        SNOW(INT(OpenAD_Symbol_288))%d = 0.0d0
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_289 = integer_tape(integer_tape_pointer)
        T(INT(OpenAD_Symbol_289))%d = T(INT(OpenAD_Symbol_289))%d+TNOW(I
     +NT(OpenAD_Symbol_289))%d
        TNOW(INT(OpenAD_Symbol_289))%d = 0.0d0
        S(INT(OpenAD_Symbol_289))%d = S(INT(OpenAD_Symbol_289))%d+SOLD(I
     +NT(OpenAD_Symbol_289))%d
        SOLD(INT(OpenAD_Symbol_289))%d = 0.0d0
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_290 = integer_tape(integer_tape_pointer)
        T(INT(OpenAD_Symbol_290))%d = T(INT(OpenAD_Symbol_290))%d+TOLD(I
     +NT(OpenAD_Symbol_290))%d
        TOLD(INT(OpenAD_Symbol_290))%d = 0.0d0
        S(INT(OpenAD_Symbol_290))%d = S(INT(OpenAD_Symbol_290))%d+SNEW(I
     +NT(OpenAD_Symbol_290))%d
        SNEW(INT(OpenAD_Symbol_290))%d = 0.0d0
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_291 = integer_tape(integer_tape_pointer)
        T(INT(OpenAD_Symbol_291))%d = T(INT(OpenAD_Symbol_291))%d+TNEW(I
     +NT(OpenAD_Symbol_291))%d
        TNEW(INT(OpenAD_Symbol_291))%d = 0.0d0
        OpenAD_Symbol_157 = INT(OpenAD_Symbol_157)+1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_158 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_159 = 1
      do while (INT(OpenAD_Symbol_159).LE.INT(OpenAD_Symbol_158))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_286 = integer_tape(integer_tape_pointer)
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_287 = integer_tape(integer_tape_pointer)
        XX(INT(OpenAD_Symbol_287))%d = XX(INT(OpenAD_Symbol_287))%d+S(IN
     +T(OpenAD_Symbol_286))%d
        OpenAD_prop_13%d = OpenAD_prop_13%d+S(INT(OpenAD_Symbol_286))%d
        S(INT(OpenAD_Symbol_286))%d = 0.0d0
        XX(INT(OpenAD_Symbol_286))%d = XX(INT(OpenAD_Symbol_286))%d+T(IN
     +T(OpenAD_Symbol_286))%d
        OpenAD_prop_12%d = OpenAD_prop_12%d+T(INT(OpenAD_Symbol_286))%d
        T(INT(OpenAD_Symbol_286))%d = 0.0d0
        S(INT(OpenAD_Symbol_286))%d = S(INT(OpenAD_Symbol_286))%d+OpenAD
     +_prop_13%d
        OpenAD_prop_13%d = 0.0d0
        T(INT(OpenAD_Symbol_286))%d = T(INT(OpenAD_Symbol_286))%d+OpenAD
     +_prop_12%d
        OpenAD_prop_12%d = 0.0d0
        OpenAD_Symbol_159 = INT(OpenAD_Symbol_159)+1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_160 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_161 = 1
      do while (INT(OpenAD_Symbol_161).LE.INT(OpenAD_Symbol_160))
        OpenAD_Symbol_161 = INT(OpenAD_Symbol_161)+1
      END DO
      S(3)%d = 0.0d0
      S(2)%d = 0.0d0
      S(1)%d = 0.0d0
      T(3)%d = 0.0d0
      T(2)%d = 0.0d0
      T(1)%d = 0.0d0
          end if
        end subroutine box_ini_fields
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_ini_params()
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_175
      INTEGER(w2f__i8) OpenAD_Symbol_176
      INTEGER(w2f__i8) OpenAD_Symbol_177
      INTEGER(w2f__i8) OpenAD_Symbol_178
      INTEGER(w2f__i8) OpenAD_Symbol_179
      INTEGER(w2f__i8) OpenAD_Symbol_180
      INTEGER(w2f__i8) OpenAD_Symbol_181
      INTEGER(w2f__i8) OpenAD_Symbol_182
      INTEGER(w2f__i8) OpenAD_Symbol_183
      INTEGER(w2f__i8) OpenAD_Symbol_184
      INTEGER(w2f__i8) OpenAD_Symbol_185
      INTEGER(w2f__i8) OpenAD_Symbol_186
      INTEGER(w2f__i8) OpenAD_Symbol_187
      INTEGER(w2f__i8) OpenAD_Symbol_188
      INTEGER(w2f__i8) OpenAD_Symbol_189
      INTEGER(w2f__i8) OpenAD_Symbol_190
      INTEGER(w2f__i8) OpenAD_Symbol_191
      INTEGER(w2f__i8) OpenAD_Symbol_192
      INTEGER(w2f__i8) OpenAD_Symbol_193
      INTEGER(w2f__i8) OpenAD_Symbol_194
      INTEGER(w2f__i8) OpenAD_Symbol_195
      INTEGER(w2f__i8) OpenAD_Symbol_196
      INTEGER(w2f__i8) OpenAD_Symbol_197
      INTEGER(w2f__i8) OpenAD_Symbol_198
      INTEGER(w2f__i8) OpenAD_Symbol_199
      INTEGER(w2f__i8) OpenAD_Symbol_200
      INTEGER(w2f__i8) OpenAD_Symbol_201
      INTEGER(w2f__i8) OpenAD_Symbol_202
      INTEGER(w2f__i8) OpenAD_Symbol_203
      INTEGER(w2f__i8) OpenAD_Symbol_204
      INTEGER(w2f__i8) OpenAD_Symbol_205
      INTEGER(w2f__i8) OpenAD_Symbol_206
      INTEGER(w2f__i8) OpenAD_Symbol_207
      INTEGER(w2f__i8) OpenAD_Symbol_208
      INTEGER(w2f__i8) OpenAD_Symbol_209
      INTEGER(w2f__i8) OpenAD_Symbol_210
      INTEGER(w2f__i8) OpenAD_Symbol_211
      INTEGER(w2f__i8) OpenAD_Symbol_212
      INTEGER(w2f__i8) OpenAD_Symbol_213
      INTEGER(w2f__i8) OpenAD_Symbol_214
      INTEGER(w2f__i8) OpenAD_Symbol_215
      INTEGER(w2f__i8) OpenAD_Symbol_216
      INTEGER(w2f__i8) OpenAD_Symbol_217
      INTEGER(w2f__i8) OpenAD_Symbol_218
      INTEGER(w2f__i8) OpenAD_Symbol_219
      INTEGER(w2f__i8) OpenAD_Symbol_220
      INTEGER(w2f__i8) OpenAD_Symbol_221
      INTEGER(w2f__i8) OpenAD_Symbol_222
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) I
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) J
      INTEGER(w2f__i4) L
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      VERBMODE = .FALSE.
      BLENGTH(1) = 5.0D+08
      BLENGTH(2) = 1.0D+08
      BLENGTH(3) = BLENGTH(1)
      BHEIGHT(1) = 1.0D+05
      BHEIGHT(3) = 4.0D+05
      BHEIGHT(2) = (BHEIGHT(1) + BHEIGHT(3))
      DELTA = (BHEIGHT(1) /(BHEIGHT(1) + BHEIGHT(3)))
      BWIDTH = 4.0D+08
      AREA(1) = (BLENGTH(1) * BWIDTH)
      AREA(2) = (BLENGTH(2) * BWIDTH)
      AREA(3) = (BLENGTH(3) * BWIDTH)
      VOL(1) = (AREA(1) * BHEIGHT(1))
      VOL(2) = (AREA(2) *(BHEIGHT(1) + BHEIGHT(3)))
      VOL(3) = (AREA(3) * BHEIGHT(3))
      ROBERT_FILTER_COEFF = 2.5D-01
      HUNDRED = 1.0D+02
      THOUSAND = 1.0D+03
      DAY = 8.64D+04
      YEAR = (DAY * 3.65D+02)
      SV = 1.0D+12
      U0 = ((SV * 1.6D+01) / 4.00000000000000019169D-04)
      ALPHA = 1.6679999999999998864D-04
      BETA = 7.81000000000000010186D-04
      DAYS_PER_50M_MIXED_LAYER = 5.0D+01
      GAMMA_T = (1.0D00 /(DAY * 3.0D+02))
      GAMMA_S = (0.0D00 /((BHEIGHT(1) / 5.0D+03) * DAY * DAYS_PER_50M_MI
     +XED_LAYER))
      EPSILON_IC = (-1.00000000000000004792D-04)
      NOISE_CORRELATION_TIME = (DAY * 1.5D+01)
      DELTA_T = (DAY * 5.0D00)
      INTEGRATION_TIME = (YEAR * 5.0D+01)
      N_MAX = INT(INTEGRATION_TIME / DELTA_T)
      FDEPS = 9.99999999999999954748D-07
      Y(1) = (THOUSAND / 3.2680000000000000715D-02)
      Y(2) = (THOUSAND / 7.9399999999999991418D-03)
      Y(3) = (THOUSAND / 1.39999999999999998578D-03)
      Y(4) = (THOUSAND / 1.41699999999999992628D-01)
      Y(5) = (THOUSAND / 1.28599999999999992095D-01)
      Y(6) = (THOUSAND / 8.7800000000000003042D-02)
      R(1) = (ALPHA * DELTA)
      R(2) = (- ALPHA)
      R(3) = (ALPHA *(1.0D00 - DELTA))
      R(4) = (-(BETA * DELTA))
      R(5) = BETA
      R(6) = (-(BETA *(1.0D00 - DELTA)))
      DO L = 1, 6, 1
        R(INT(L)) = ((R(L) * U0) / SV)
      END DO
      DO L = 1, 6, 1
        IF(L .LE. 3) THEN
          PROJ_T(INT(L)) = 1.0D00
          PROJ_S(INT(L)) = 0.0D00
        ELSE
          PROJ_T(INT(L)) = 0.0D00
          PROJ_S(INT(L)) = 1.0D00
        ENDIF
      END DO
      DO L = 1, 6, 1
        R_T(INT(L)) = (PROJ_T(L) * R(L))
        R_S(INT(L)) = (PROJ_S(L) * R(L))
      END DO
      R1(1) = 1.0D00
      R1(2) = (-1.0D00)
      R1(3) = 0.0D00
      R1(4) = 0.0D00
      R1(5) = 0.0D00
      R1(6) = 0.0D00
      DO J = 1, 6, 1
        DO I = 1, 6, 1
          X(INT(I), INT(J)) = (R(I) * R(J))
        END DO
      END DO
      EPSILON_REGULARIZE = 1.00000000000000002092D-08
      DO J = 1, 6, 1
        DO I = 1, 6, 1
          X(INT(I), INT(J)) = (X(I, J) + EPSILON_REGULARIZE)
        END DO
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      VERBMODE = .FALSE.
      BLENGTH(1) = 5.0D+08
      BLENGTH(2) = 1.0D+08
      BLENGTH(3) = BLENGTH(1)
      BHEIGHT(1) = 1.0D+05
      BHEIGHT(3) = 4.0D+05
      BHEIGHT(2) = (BHEIGHT(1) + BHEIGHT(3))
      DELTA = (BHEIGHT(1) /(BHEIGHT(1) + BHEIGHT(3)))
      BWIDTH = 4.0D+08
      AREA(1) = (BLENGTH(1) * BWIDTH)
      AREA(2) = (BLENGTH(2) * BWIDTH)
      AREA(3) = (BLENGTH(3) * BWIDTH)
      VOL(1) = (AREA(1) * BHEIGHT(1))
      VOL(2) = (AREA(2) *(BHEIGHT(1) + BHEIGHT(3)))
      VOL(3) = (AREA(3) * BHEIGHT(3))
      ROBERT_FILTER_COEFF = 2.5D-01
      HUNDRED = 1.0D+02
      THOUSAND = 1.0D+03
      DAY = 8.64D+04
      YEAR = (DAY * 3.65D+02)
      SV = 1.0D+12
      U0 = ((SV * 1.6D+01) / 4.00000000000000019169D-04)
      ALPHA = 1.6679999999999998864D-04
      BETA = 7.81000000000000010186D-04
      DAYS_PER_50M_MIXED_LAYER = 5.0D+01
      GAMMA_T = (1.0D00 /(DAY * 3.0D+02))
      GAMMA_S = (0.0D00 /((BHEIGHT(1) / 5.0D+03) * DAY * DAYS_PER_50M_MI
     +XED_LAYER))
      EPSILON_IC = (-1.00000000000000004792D-04)
      NOISE_CORRELATION_TIME = (DAY * 1.5D+01)
      DELTA_T = (DAY * 5.0D00)
      INTEGRATION_TIME = (YEAR * 5.0D+01)
      N_MAX = INT(INTEGRATION_TIME / DELTA_T)
      FDEPS = 9.99999999999999954748D-07
      Y(1) = (THOUSAND / 3.2680000000000000715D-02)
      Y(2) = (THOUSAND / 7.9399999999999991418D-03)
      Y(3) = (THOUSAND / 1.39999999999999998578D-03)
      Y(4) = (THOUSAND / 1.41699999999999992628D-01)
      Y(5) = (THOUSAND / 1.28599999999999992095D-01)
      Y(6) = (THOUSAND / 8.7800000000000003042D-02)
      R(1) = (ALPHA * DELTA)
      R(2) = (- ALPHA)
      R(3) = (ALPHA *(1.0D00 - DELTA))
      R(4) = (-(BETA * DELTA))
      R(5) = BETA
      R(6) = (-(BETA *(1.0D00 - DELTA)))
      OpenAD_Symbol_190 = 0_w2f__i8
      DO L = 1, 6, 1
        R(INT(L)) = ((R(L) * U0) / SV)
        OpenAD_Symbol_190 = (INT(OpenAD_Symbol_190) + INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_190
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_191 = 0_w2f__i8
      DO L = 1, 6, 1
        IF(L .LE. 3) THEN
          PROJ_T(INT(L)) = 1.0D00
          PROJ_S(INT(L)) = 0.0D00
          OpenAD_Symbol_192 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_192
          integer_tape_pointer = integer_tape_pointer+1
        ELSE
          PROJ_T(INT(L)) = 0.0D00
          PROJ_S(INT(L)) = 1.0D00
          OpenAD_Symbol_193 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_193
          integer_tape_pointer = integer_tape_pointer+1
        ENDIF
        OpenAD_Symbol_191 = (INT(OpenAD_Symbol_191) + INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_191
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_194 = 0_w2f__i8
      DO L = 1, 6, 1
        R_T(INT(L)) = (PROJ_T(L) * R(L))
        R_S(INT(L)) = (PROJ_S(L) * R(L))
        OpenAD_Symbol_194 = (INT(OpenAD_Symbol_194) + INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_194
      integer_tape_pointer = integer_tape_pointer+1
      R1(1) = 1.0D00
      R1(2) = (-1.0D00)
      R1(3) = 0.0D00
      R1(4) = 0.0D00
      R1(5) = 0.0D00
      R1(6) = 0.0D00
      OpenAD_Symbol_195 = 0_w2f__i8
      DO J = 1, 6, 1
        OpenAD_Symbol_196 = 0_w2f__i8
        DO I = 1, 6, 1
          X(INT(I), INT(J)) = (R(I) * R(J))
          OpenAD_Symbol_196 = (INT(OpenAD_Symbol_196) + INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_196
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_195 = (INT(OpenAD_Symbol_195) + INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_195
      integer_tape_pointer = integer_tape_pointer+1
      EPSILON_REGULARIZE = 1.00000000000000002092D-08
      OpenAD_Symbol_197 = 0_w2f__i8
      DO J = 1, 6, 1
        OpenAD_Symbol_198 = 0_w2f__i8
        DO I = 1, 6, 1
          X(INT(I), INT(J)) = (X(I, J) + EPSILON_REGULARIZE)
          OpenAD_Symbol_198 = (INT(OpenAD_Symbol_198) + INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_198
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_197 = (INT(OpenAD_Symbol_197) + INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_197
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_175 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_176 = 1
      DO WHILE(INT(OpenAD_Symbol_176) .LE. INT(OpenAD_Symbol_175))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_177 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_178 = 1
        DO WHILE(INT(OpenAD_Symbol_178) .LE. INT(OpenAD_Symbol_177))
          OpenAD_Symbol_178 = INT(OpenAD_Symbol_178) + 1
        END DO
        OpenAD_Symbol_176 = INT(OpenAD_Symbol_176) + 1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_179 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_180 = 1
      DO WHILE(INT(OpenAD_Symbol_180) .LE. INT(OpenAD_Symbol_179))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_181 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_182 = 1
        DO WHILE(INT(OpenAD_Symbol_182) .LE. INT(OpenAD_Symbol_181))
          OpenAD_Symbol_182 = INT(OpenAD_Symbol_182) + 1
        END DO
        OpenAD_Symbol_180 = INT(OpenAD_Symbol_180) + 1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_183 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_184 = 1
      DO WHILE(INT(OpenAD_Symbol_184) .LE. INT(OpenAD_Symbol_183))
        OpenAD_Symbol_184 = INT(OpenAD_Symbol_184) + 1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_185 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_186 = 1
      DO WHILE(INT(OpenAD_Symbol_186) .LE. INT(OpenAD_Symbol_185))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_187 = integer_tape(integer_tape_pointer)
        IF(OpenAD_Symbol_187 .ne. 0) THEN
        ENDIF
        OpenAD_Symbol_186 = INT(OpenAD_Symbol_186) + 1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_188 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_189 = 1
      DO WHILE(INT(OpenAD_Symbol_189) .LE. INT(OpenAD_Symbol_188))
        OpenAD_Symbol_189 = INT(OpenAD_Symbol_189) + 1
      END DO
          end if
        end subroutine box_ini_params
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_model_body()
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_223
      INTEGER(w2f__i8) OpenAD_Symbol_224
      INTEGER(w2f__i8) OpenAD_Symbol_225
      INTEGER(w2f__i8) OpenAD_Symbol_226
      INTEGER(w2f__i8) OpenAD_Symbol_227
      INTEGER(w2f__i8) OpenAD_Symbol_228
      INTEGER(w2f__i8) OpenAD_Symbol_229
      INTEGER(w2f__i8) OpenAD_Symbol_230
      INTEGER(w2f__i8) OpenAD_Symbol_231
      INTEGER(w2f__i8) OpenAD_Symbol_232
      INTEGER(w2f__i8) OpenAD_Symbol_233
      INTEGER(w2f__i8) OpenAD_Symbol_234
      INTEGER(w2f__i8) OpenAD_Symbol_235
      INTEGER(w2f__i8) OpenAD_Symbol_236
      INTEGER(w2f__i8) OpenAD_Symbol_237
      INTEGER(w2f__i8) OpenAD_Symbol_238
      INTEGER(w2f__i8) OpenAD_Symbol_239
      INTEGER(w2f__i8) OpenAD_Symbol_240
      INTEGER(w2f__i8) OpenAD_Symbol_241
      INTEGER(w2f__i8) OpenAD_Symbol_242
      INTEGER(w2f__i8) OpenAD_Symbol_243
      INTEGER(w2f__i8) OpenAD_Symbol_244
      INTEGER(w2f__i8) OpenAD_Symbol_245
      INTEGER(w2f__i8) OpenAD_Symbol_246
      INTEGER(w2f__i8) OpenAD_Symbol_247
      INTEGER(w2f__i8) OpenAD_Symbol_248
      INTEGER(w2f__i8) OpenAD_Symbol_249
      INTEGER(w2f__i8) OpenAD_Symbol_250
      INTEGER(w2f__i8) OpenAD_Symbol_251
      INTEGER(w2f__i8) OpenAD_Symbol_252
C
C     **** Local Variables and Functions ****
C
      EXTERNAL box_final_state
      EXTERNAL box_forward
      EXTERNAL box_ini_fields
      INTEGER(w2f__i4) ILEV1
      INTEGER(w2f__i4) ILEV2
      INTEGER(w2f__i4) ILOOP
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) MAXLEV2
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)


          integer iaddr
          external iaddr
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(XX)
C$OPENAD DEPENDENT(TNEW)
C$OPENAD DEPENDENT(SNEW)
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      CALL box_ini_fields()
      MAXLEV2 = ((N_MAX / 73) + 1)
      IF(N_MAX .GT. 3650) THEN
        WRITE(*,*) 'NEED TO SET nlev1*nlev2 >= n_max '
      ELSE
        DO ILEV2 = 1, 50, 1
          IF(ILEV2 .LE. MAXLEV2) THEN
            DO ILEV1 = 1, 73, 1
              ILOOP = (ILEV1 + ILEV2 * 73 +(-73))
              IF(ILOOP .LE. N_MAX) THEN
                CALL box_forward(ILEV1)
              ENDIF
            END DO
          ENDIF
        END DO
        CALL box_final_state()
      ENDIF
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      CALL box_ini_fields()
      MAXLEV2 = ((N_MAX / 73) + 1)
      IF(N_MAX .GT. 3650) THEN
        WRITE(*,*) 'NEED TO SET nlev1*nlev2 >= n_max '
        OpenAD_Symbol_236 = 1_w2f__i8
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_236
        integer_tape_pointer = integer_tape_pointer+1
      ELSE
        OpenAD_Symbol_230 = 0_w2f__i8
        DO ILEV2 = 1, 50, 1
          IF(ILEV2 .LE. MAXLEV2) THEN
            OpenAD_Symbol_231 = 0_w2f__i8
            DO ILEV1 = 1, 73, 1
              ILOOP = (ILEV1 + ILEV2 * 73 +(-73))
              IF(ILOOP .LE. N_MAX) THEN
                CALL box_forward(ILEV1)
                OpenAD_Symbol_232 = 1_w2f__i8
                integer_tape(integer_tape_pointer) = OpenAD_Symbol_232
                integer_tape_pointer = integer_tape_pointer+1
              ELSE
                OpenAD_Symbol_233 = 0_w2f__i8
                integer_tape(integer_tape_pointer) = OpenAD_Symbol_233
                integer_tape_pointer = integer_tape_pointer+1
              ENDIF
              OpenAD_Symbol_231 = (INT(OpenAD_Symbol_231) + INT( 1_w2f__
     +i8))
            END DO
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_231
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_235 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_235
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            OpenAD_Symbol_234 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_234
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          OpenAD_Symbol_230 = (INT(OpenAD_Symbol_230) + INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_230
        integer_tape_pointer = integer_tape_pointer+1
        CALL box_final_state()
        OpenAD_Symbol_237 = 0_w2f__i8
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_237
        integer_tape_pointer = integer_tape_pointer+1
      ENDIF
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_223 = integer_tape(integer_tape_pointer)
      IF(OpenAD_Symbol_223 .ne. 0) THEN
      ELSE
        CALL box_final_state()
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_224 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_225 = 1
        DO WHILE(INT(OpenAD_Symbol_225) .LE. INT(OpenAD_Symbol_224))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_226 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_226 .ne. 0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_227 = integer_tape(integer_tape_pointer)
            OpenAD_Symbol_228 = 1
            DO WHILE(INT(OpenAD_Symbol_228) .LE. INT(OpenAD_Symbol_227) 
     +)
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_229 = integer_tape(integer_tape_pointer)
              IF(OpenAD_Symbol_229 .ne. 0) THEN
                CALL box_forward(ILEV1)
              ENDIF
              OpenAD_Symbol_228 = INT(OpenAD_Symbol_228) + 1
            END DO
          ENDIF
          OpenAD_Symbol_225 = INT(OpenAD_Symbol_225) + 1
        END DO
      ENDIF
      CALL box_ini_fields()
          end if
        end subroutine box_model_body
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_density(TLOC, SLOC, RHOLOC)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_120
      INTEGER(w2f__i8) OpenAD_Symbol_121
      INTEGER(w2f__i8) OpenAD_Symbol_122
      INTEGER(w2f__i8) OpenAD_Symbol_123
      INTEGER(w2f__i8) OpenAD_Symbol_124
      INTEGER(w2f__i8) OpenAD_Symbol_125
C
C     **** Parameters and Result ****
C
      type(active) :: TLOC(1:3)
      type(active) :: SLOC(1:3)
      type(active) :: RHOLOC(1:3)
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) L
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)
      REAL(w2f__8) OpenAD_Symbol_0
      REAL(w2f__8) OpenAD_Symbol_2
      INTEGER(w2f__i8) OpenAD_Symbol_260
      REAL(w2f__8) OpenAD_Symbol_261
      REAL(w2f__8) OpenAD_Symbol_262
      REAL(w2f__8) OpenAD_Symbol_88


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      DO L = 1, 3, 1
        RHOLOC(INT(L))%v = (SLOC(L)%v*BETA-TLOC(L)%v*ALPHA)
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_122 = 0_w2f__i8
      DO L = 1,3,1
        RHOLOC(INT(L))%v = (SLOC(L)%v*BETA-TLOC(L)%v*ALPHA)
        OpenAD_Symbol_0 = BETA
        OpenAD_Symbol_2 = ALPHA
        OpenAD_Symbol_88 = (OpenAD_Symbol_2*INT((-1_w2f__i8)))
        double_tape(double_tape_pointer) = OpenAD_Symbol_0
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_88
        double_tape_pointer = double_tape_pointer+1
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_122 = (INT(OpenAD_Symbol_122)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_122
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_120 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_121 = 1
      do while (INT(OpenAD_Symbol_121).LE.INT(OpenAD_Symbol_120))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_260 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_261 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_262 = double_tape(double_tape_pointer)
        TLOC(INT(OpenAD_Symbol_260))%d = TLOC(INT(OpenAD_Symbol_260))%d+
     +RHOLOC(INT(OpenAD_Symbol_260))%d*(OpenAD_Symbol_261)
        SLOC(INT(OpenAD_Symbol_260))%d = SLOC(INT(OpenAD_Symbol_260))%d+
     +RHOLOC(INT(OpenAD_Symbol_260))%d*(OpenAD_Symbol_262)
        RHOLOC(INT(OpenAD_Symbol_260))%d = 0.0d0
        OpenAD_Symbol_121 = INT(OpenAD_Symbol_121)+1
      END DO
          end if
        end subroutine box_density
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_transport(RHOLOC, UVELLOC)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      type(active) :: OpenAD_prop_0
C
C     **** Parameters and Result ****
C
      type(active) :: RHOLOC(1:3)
      type(active) :: UVELLOC
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)
      REAL(w2f__8) OpenAD_Symbol_10
      REAL(w2f__8) OpenAD_Symbol_263
      REAL(w2f__8) OpenAD_Symbol_264
      REAL(w2f__8) OpenAD_Symbol_265
      REAL(w2f__8) OpenAD_Symbol_4
      REAL(w2f__8) OpenAD_Symbol_6
      REAL(w2f__8) OpenAD_Symbol_7
      REAL(w2f__8) OpenAD_Symbol_89
      REAL(w2f__8) OpenAD_Symbol_9
C
C     **** Statements ****
C


          integer iaddr
          external iaddr
C$OPENAD XXX Template ad_template.f

         if (our_rev_mode%plain) then
C original function
      UVELLOC%v = (-(U0*(RHOLOC(1)%v*DELTA+RHOLOC(3)%v*(1.0D00-DELTA)-RH
     +OLOC(2)%v)))
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_9 = (1.0D00-DELTA)
      OpenAD_Symbol_4 = (RHOLOC(1)%v*DELTA+RHOLOC(3)%v*OpenAD_Symbol_9-R
     +HOLOC(2)%v)
      UVELLOC%v = (-(U0*OpenAD_Symbol_4))
      OpenAD_Symbol_7 = DELTA
      OpenAD_Symbol_10 = OpenAD_Symbol_9
      OpenAD_Symbol_6 = U0
      OpenAD_Symbol_89 = (OpenAD_Symbol_6*INT((-1_w2f__i8)))
      double_tape(double_tape_pointer) = OpenAD_Symbol_7
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_Symbol_10
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_Symbol_89
      double_tape_pointer = double_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_263 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_264 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_265 = double_tape(double_tape_pointer)
      OpenAD_prop_0%d = OpenAD_prop_0%d+UVELLOC%d*(OpenAD_Symbol_263)
      UVELLOC%d = 0.0d0
      RHOLOC(3)%d = RHOLOC(3)%d+OpenAD_prop_0%d*(OpenAD_Symbol_264)
      RHOLOC(1)%d = RHOLOC(1)%d+OpenAD_prop_0%d*(OpenAD_Symbol_265)
      RHOLOC(2)%d = RHOLOC(2)%d-OpenAD_prop_0%d
      OpenAD_prop_0%d = 0.0d0
          end if
        end subroutine box_transport
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_robert_filter(FLDNOW, FLDOLD, FLDNEW)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_132
      INTEGER(w2f__i8) OpenAD_Symbol_133
      INTEGER(w2f__i8) OpenAD_Symbol_134
      INTEGER(w2f__i8) OpenAD_Symbol_135
      INTEGER(w2f__i8) OpenAD_Symbol_136
      INTEGER(w2f__i8) OpenAD_Symbol_137
      REAL(w2f__8) OpenAD_Symbol_84
      type(active) :: OpenAD_prop_7
      type(active) :: OpenAD_prop_8
      type(active) :: OpenAD_prop_9
C
C     **** Parameters and Result ****
C
      type(active) :: FLDNOW(1:3)
      type(active) :: FLDOLD(1:3)
      type(active) :: FLDNEW(1:3)
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) L
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)
      INTEGER(w2f__i8) OpenAD_Symbol_282
      REAL(w2f__8) OpenAD_Symbol_283
      REAL(w2f__8) OpenAD_Symbol_80
      REAL(w2f__8) OpenAD_Symbol_82


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      DO L = 1, 3, 1
        FLDNOW(INT(L))%v = (FLDNOW(L)%v+ROBERT_FILTER_COEFF*(FLDOLD(L)%v
     ++FLDNEW(L)%v-FLDNOW(L)%v*2.0D00))
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_134 = 0_w2f__i8
      DO L = 1,3,1
        OpenAD_Symbol_80 = (FLDOLD(L)%v+FLDNEW(L)%v-FLDNOW(L)%v*2.0D00)
        OpenAD_Symbol_84 = (FLDNOW(L)%v+ROBERT_FILTER_COEFF*OpenAD_Symbo
     +l_80)
        OpenAD_Symbol_82 = ROBERT_FILTER_COEFF
        FLDNOW(INT(L))%v = OpenAD_Symbol_84
        double_tape(double_tape_pointer) = OpenAD_Symbol_82
        double_tape_pointer = double_tape_pointer+1
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_134 = (INT(OpenAD_Symbol_134)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_134
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_132 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_133 = 1
      do while (INT(OpenAD_Symbol_133).LE.INT(OpenAD_Symbol_132))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_282 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_283 = double_tape(double_tape_pointer)
        OpenAD_prop_9%d = OpenAD_prop_9%d+FLDNOW(INT(OpenAD_Symbol_282))
     +%d*(OpenAD_Symbol_283)
        OpenAD_prop_7%d = OpenAD_prop_7%d+FLDNOW(INT(OpenAD_Symbol_282))
     +%d
        FLDNOW(INT(OpenAD_Symbol_282))%d = 0.0d0
        OpenAD_prop_8%d = OpenAD_prop_8%d+OpenAD_prop_9%d*(-2.0D00)
        FLDNEW(INT(OpenAD_Symbol_282))%d = FLDNEW(INT(OpenAD_Symbol_282)
     +)%d+OpenAD_prop_9%d
        FLDOLD(INT(OpenAD_Symbol_282))%d = FLDOLD(INT(OpenAD_Symbol_282)
     +)%d+OpenAD_prop_9%d
        OpenAD_prop_9%d = 0.0d0
        FLDNOW(INT(OpenAD_Symbol_282))%d = FLDNOW(INT(OpenAD_Symbol_282)
     +)%d+OpenAD_prop_8%d
        OpenAD_prop_8%d = 0.0d0
        FLDNOW(INT(OpenAD_Symbol_282))%d = FLDNOW(INT(OpenAD_Symbol_282)
     +)%d+OpenAD_prop_7%d
        OpenAD_prop_7%d = 0.0d0
        OpenAD_Symbol_133 = INT(OpenAD_Symbol_133)+1
      END DO
          end if
        end subroutine box_robert_filter
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_cycle_fields()
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_138
      INTEGER(w2f__i8) OpenAD_Symbol_139
      INTEGER(w2f__i8) OpenAD_Symbol_140
      INTEGER(w2f__i8) OpenAD_Symbol_141
      INTEGER(w2f__i8) OpenAD_Symbol_142
      INTEGER(w2f__i8) OpenAD_Symbol_143
      type(active) :: OpenAD_prop_10
      type(active) :: OpenAD_prop_11
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) L
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)
      INTEGER(w2f__i8) OpenAD_Symbol_284
      INTEGER(w2f__i8) OpenAD_Symbol_285


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      DO L = 1, 3, 1
        TOLD(INT(L))%v = TNOW(L)%v
        TNOW(INT(L))%v = TNEW(L)%v
        SOLD(INT(L))%v = SNOW(L)%v
        SNOW(INT(L))%v = SNEW(L)%v
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_140 = 0_w2f__i8
      DO L = 1,3,1
        TOLD(INT(L))%v = TNOW(L)%v
        TNOW(INT(L))%v = TNEW(L)%v
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        SOLD(INT(L))%v = SNOW(L)%v
        SNOW(INT(L))%v = SNEW(L)%v
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_140 = (INT(OpenAD_Symbol_140)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_140
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_138 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_139 = 1
      do while (INT(OpenAD_Symbol_139).LE.INT(OpenAD_Symbol_138))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_284 = integer_tape(integer_tape_pointer)
        SNEW(INT(OpenAD_Symbol_284))%d = SNEW(INT(OpenAD_Symbol_284))%d+
     +SNOW(INT(OpenAD_Symbol_284))%d
        SNOW(INT(OpenAD_Symbol_284))%d = 0.0d0
        OpenAD_prop_11%d = OpenAD_prop_11%d+SOLD(INT(OpenAD_Symbol_284))
     +%d
        SOLD(INT(OpenAD_Symbol_284))%d = 0.0d0
        SNOW(INT(OpenAD_Symbol_284))%d = SNOW(INT(OpenAD_Symbol_284))%d+
     +OpenAD_prop_11%d
        OpenAD_prop_11%d = 0.0d0
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_285 = integer_tape(integer_tape_pointer)
        TNEW(INT(OpenAD_Symbol_285))%d = TNEW(INT(OpenAD_Symbol_285))%d+
     +TNOW(INT(OpenAD_Symbol_285))%d
        TNOW(INT(OpenAD_Symbol_285))%d = 0.0d0
        OpenAD_prop_10%d = OpenAD_prop_10%d+TOLD(INT(OpenAD_Symbol_285))
     +%d
        TOLD(INT(OpenAD_Symbol_285))%d = 0.0d0
        TNOW(INT(OpenAD_Symbol_285))%d = TNOW(INT(OpenAD_Symbol_285))%d+
     +OpenAD_prop_10%d
        OpenAD_prop_10%d = 0.0d0
        OpenAD_Symbol_139 = INT(OpenAD_Symbol_139)+1
      END DO
          end if
        end subroutine box_cycle_fields
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_update(FLDNEW, FLDOLD, DFLDDT)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_253
      INTEGER(w2f__i8) OpenAD_Symbol_254
      INTEGER(w2f__i8) OpenAD_Symbol_255
      INTEGER(w2f__i8) OpenAD_Symbol_256
      INTEGER(w2f__i8) OpenAD_Symbol_257
      INTEGER(w2f__i8) OpenAD_Symbol_258
C
C     **** Parameters and Result ****
C
      type(active) :: FLDNEW(1:3)
      type(active) :: FLDOLD(1:3)
      type(active) :: DFLDDT(1:3)
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) L
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)
      INTEGER(w2f__i8) OpenAD_Symbol_292
      REAL(w2f__8) OpenAD_Symbol_293
      REAL(w2f__8) OpenAD_Symbol_85
      REAL(w2f__8) OpenAD_Symbol_86


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      DO L = 1, 3, 1
        FLDNEW(INT(L))%v = (FLDOLD(L)%v+DFLDDT(L)%v*DELTA_T*2.0D00)
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_255 = 0_w2f__i8
      DO L = 1,3,1
        OpenAD_Symbol_85 = (DELTA_T*2.0D00)
        FLDNEW(INT(L))%v = (FLDOLD(L)%v+DFLDDT(L)%v*OpenAD_Symbol_85)
        OpenAD_Symbol_86 = OpenAD_Symbol_85
        double_tape(double_tape_pointer) = OpenAD_Symbol_86
        double_tape_pointer = double_tape_pointer+1
        integer_tape(integer_tape_pointer) = L
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_255 = (INT(OpenAD_Symbol_255)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_255
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_253 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_254 = 1
      do while (INT(OpenAD_Symbol_254).LE.INT(OpenAD_Symbol_253))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_292 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_293 = double_tape(double_tape_pointer)
        DFLDDT(INT(OpenAD_Symbol_292))%d = DFLDDT(INT(OpenAD_Symbol_292)
     +)%d+FLDNEW(INT(OpenAD_Symbol_292))%d*(OpenAD_Symbol_293)
        FLDOLD(INT(OpenAD_Symbol_292))%d = FLDOLD(INT(OpenAD_Symbol_292)
     +)%d+FLDNEW(INT(OpenAD_Symbol_292))%d
        FLDNEW(INT(OpenAD_Symbol_292))%d = 0.0d0
        OpenAD_Symbol_254 = INT(OpenAD_Symbol_254)+1
      END DO
          end if
        end subroutine box_update
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE box_timestep(GAMMALOC, FLDSTAR, EXTFORLOC, UVELLOC, FLD
     +NOW, FLDOLD, FLDNEW)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      use oad_intrinsics
      use all_globals_mod
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_126
      INTEGER(w2f__i8) OpenAD_Symbol_127
      INTEGER(w2f__i8) OpenAD_Symbol_128
      INTEGER(w2f__i8) OpenAD_Symbol_129
      INTEGER(w2f__i8) OpenAD_Symbol_130
      INTEGER(w2f__i8) OpenAD_Symbol_131
      type(active) :: OpenAD_prop_1
      type(active) :: OpenAD_prop_2
      type(active) :: OpenAD_prop_3
      type(active) :: OpenAD_prop_4
      type(active) :: OpenAD_prop_5
      type(active) :: OpenAD_prop_6
C
C     **** Parameters and Result ****
C
      REAL(w2f__8) GAMMALOC
      REAL(w2f__8) FLDSTAR(1 : 2)
      REAL(w2f__8) EXTFORLOC(1 : 2)
      type(active) :: UVELLOC
      type(active) :: FLDNOW(1:3)
      type(active) :: FLDOLD(1:3)
      type(active) :: FLDNEW(1:3)
C
C     **** Local Variables and Functions ****
C
      EXTERNAL box_update
      type(active) :: DFLDDT(1:3)
      INTEGER(w2f__i4) ISBYTE
      PARAMETER ( ISBYTE = 8)
      INTEGER(w2f__i4) NLEV1
      PARAMETER ( NLEV1 = 73)
      INTEGER(w2f__i4) NLEV2
      PARAMETER ( NLEV2 = 50)
      REAL(w2f__8) OpenAD_Symbol_100
      REAL(w2f__8) OpenAD_Symbol_101
      REAL(w2f__8) OpenAD_Symbol_102
      REAL(w2f__8) OpenAD_Symbol_103
      REAL(w2f__8) OpenAD_Symbol_104
      REAL(w2f__8) OpenAD_Symbol_105
      REAL(w2f__8) OpenAD_Symbol_106
      REAL(w2f__8) OpenAD_Symbol_107
      REAL(w2f__8) OpenAD_Symbol_12
      REAL(w2f__8) OpenAD_Symbol_13
      REAL(w2f__8) OpenAD_Symbol_16
      REAL(w2f__8) OpenAD_Symbol_18
      REAL(w2f__8) OpenAD_Symbol_19
      REAL(w2f__8) OpenAD_Symbol_21
      REAL(w2f__8) OpenAD_Symbol_23
      REAL(w2f__8) OpenAD_Symbol_24
      REAL(w2f__8) OpenAD_Symbol_25
      REAL(w2f__8) OpenAD_Symbol_26
      REAL(w2f__8) OpenAD_Symbol_266
      REAL(w2f__8) OpenAD_Symbol_267
      REAL(w2f__8) OpenAD_Symbol_268
      REAL(w2f__8) OpenAD_Symbol_269
      REAL(w2f__8) OpenAD_Symbol_27
      REAL(w2f__8) OpenAD_Symbol_270
      REAL(w2f__8) OpenAD_Symbol_271
      REAL(w2f__8) OpenAD_Symbol_272
      REAL(w2f__8) OpenAD_Symbol_273
      REAL(w2f__8) OpenAD_Symbol_274
      REAL(w2f__8) OpenAD_Symbol_275
      REAL(w2f__8) OpenAD_Symbol_276
      REAL(w2f__8) OpenAD_Symbol_277
      REAL(w2f__8) OpenAD_Symbol_278
      REAL(w2f__8) OpenAD_Symbol_279
      REAL(w2f__8) OpenAD_Symbol_280
      REAL(w2f__8) OpenAD_Symbol_281
      REAL(w2f__8) OpenAD_Symbol_30
      REAL(w2f__8) OpenAD_Symbol_32
      REAL(w2f__8) OpenAD_Symbol_33
      REAL(w2f__8) OpenAD_Symbol_35
      REAL(w2f__8) OpenAD_Symbol_37
      REAL(w2f__8) OpenAD_Symbol_38
      REAL(w2f__8) OpenAD_Symbol_39
      REAL(w2f__8) OpenAD_Symbol_40
      REAL(w2f__8) OpenAD_Symbol_41
      REAL(w2f__8) OpenAD_Symbol_43
      REAL(w2f__8) OpenAD_Symbol_44
      REAL(w2f__8) OpenAD_Symbol_45
      REAL(w2f__8) OpenAD_Symbol_46
      REAL(w2f__8) OpenAD_Symbol_47
      REAL(w2f__8) OpenAD_Symbol_50
      REAL(w2f__8) OpenAD_Symbol_52
      REAL(w2f__8) OpenAD_Symbol_53
      REAL(w2f__8) OpenAD_Symbol_55
      REAL(w2f__8) OpenAD_Symbol_57
      REAL(w2f__8) OpenAD_Symbol_58
      REAL(w2f__8) OpenAD_Symbol_59
      REAL(w2f__8) OpenAD_Symbol_60
      REAL(w2f__8) OpenAD_Symbol_61
      REAL(w2f__8) OpenAD_Symbol_64
      REAL(w2f__8) OpenAD_Symbol_66
      REAL(w2f__8) OpenAD_Symbol_67
      REAL(w2f__8) OpenAD_Symbol_69
      REAL(w2f__8) OpenAD_Symbol_71
      REAL(w2f__8) OpenAD_Symbol_72
      REAL(w2f__8) OpenAD_Symbol_73
      REAL(w2f__8) OpenAD_Symbol_74
      REAL(w2f__8) OpenAD_Symbol_75
      REAL(w2f__8) OpenAD_Symbol_77
      REAL(w2f__8) OpenAD_Symbol_78
      REAL(w2f__8) OpenAD_Symbol_79
      REAL(w2f__8) OpenAD_Symbol_90
      REAL(w2f__8) OpenAD_Symbol_91
      REAL(w2f__8) OpenAD_Symbol_92
      REAL(w2f__8) OpenAD_Symbol_93
      REAL(w2f__8) OpenAD_Symbol_94
      REAL(w2f__8) OpenAD_Symbol_95
      REAL(w2f__8) OpenAD_Symbol_96
      REAL(w2f__8) OpenAD_Symbol_97
      REAL(w2f__8) OpenAD_Symbol_98
      REAL(w2f__8) OpenAD_Symbol_99


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      IF (UVELLOC%v.GE.0.0D00) THEN
        DFLDDT(1)%v = ((EXTFORLOC(1)+VOL(1)*GAMMALOC*(FLDSTAR(1)-FLDNOW(
     +1)%v)+UVELLOC%v*(FLDNOW(3)%v-FLDNOW(1)%v))/VOL(1))
        DFLDDT(2)%v = ((EXTFORLOC(2)+VOL(2)*GAMMALOC*(FLDSTAR(2)-FLDNOW(
     +2)%v)+UVELLOC%v*(FLDNOW(1)%v-FLDNOW(2)%v))/VOL(2))
        DFLDDT(3)%v = ((UVELLOC%v*(FLDNOW(2)%v-FLDNOW(3)%v))/VOL(3))
      ELSE
        DFLDDT(1)%v = ((EXTFORLOC(1)+VOL(1)*GAMMALOC*(FLDSTAR(1)-FLDNOW(
     +1)%v)-UVELLOC%v*(FLDNOW(2)%v-FLDNOW(1)%v))/VOL(1))
        DFLDDT(2)%v = ((EXTFORLOC(2)+VOL(2)*GAMMALOC*(FLDSTAR(2)-FLDNOW(
     +2)%v)-UVELLOC%v*(FLDNOW(3)%v-FLDNOW(2)%v))/VOL(2))
        DFLDDT(3)%v = (-((UVELLOC%v*(FLDNOW(1)%v-FLDNOW(3)%v))/VOL(3)))
      ENDIF
      CALL box_update(FLDNEW,FLDOLD,DFLDDT)
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      IF (UVELLOC%v.GE.0.0D00) THEN
        OpenAD_Symbol_19 = (FLDSTAR(1)-FLDNOW(1)%v)
        OpenAD_Symbol_16 = (GAMMALOC*OpenAD_Symbol_19)
        OpenAD_Symbol_23 = (FLDNOW(3)%v-FLDNOW(1)%v)
        OpenAD_Symbol_12 = (EXTFORLOC(1)+VOL(1)*OpenAD_Symbol_16+UVELLOC
     +%v*OpenAD_Symbol_23)
        DFLDDT(1)%v = (OpenAD_Symbol_12/VOL(1))
        OpenAD_Symbol_21 = GAMMALOC
        OpenAD_Symbol_18 = VOL(1)
        OpenAD_Symbol_24 = OpenAD_Symbol_23
        OpenAD_Symbol_25 = UVELLOC%v
        OpenAD_Symbol_13 = (INT(1_w2f__i8)/VOL(1))
        OpenAD_Symbol_90 = (OpenAD_Symbol_24*OpenAD_Symbol_13)
        OpenAD_Symbol_91 = (OpenAD_Symbol_25*OpenAD_Symbol_13)
        OpenAD_Symbol_92 = (INT((-1_w2f__i8))*OpenAD_Symbol_21*OpenAD_Sy
     +mbol_18*OpenAD_Symbol_13)
        double_tape(double_tape_pointer) = OpenAD_Symbol_90
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_91
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_92
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_33 = (FLDSTAR(2)-FLDNOW(2)%v)
        OpenAD_Symbol_30 = (GAMMALOC*OpenAD_Symbol_33)
        OpenAD_Symbol_37 = (FLDNOW(1)%v-FLDNOW(2)%v)
        OpenAD_Symbol_26 = (EXTFORLOC(2)+VOL(2)*OpenAD_Symbol_30+UVELLOC
     +%v*OpenAD_Symbol_37)
        DFLDDT(2)%v = (OpenAD_Symbol_26/VOL(2))
        OpenAD_Symbol_35 = GAMMALOC
        OpenAD_Symbol_32 = VOL(2)
        OpenAD_Symbol_38 = OpenAD_Symbol_37
        OpenAD_Symbol_39 = UVELLOC%v
        OpenAD_Symbol_27 = (INT(1_w2f__i8)/VOL(2))
        OpenAD_Symbol_93 = (OpenAD_Symbol_38*OpenAD_Symbol_27)
        OpenAD_Symbol_94 = (OpenAD_Symbol_39*OpenAD_Symbol_27)
        OpenAD_Symbol_95 = (INT((-1_w2f__i8))*OpenAD_Symbol_35*OpenAD_Sy
     +mbol_32*OpenAD_Symbol_27)
        double_tape(double_tape_pointer) = OpenAD_Symbol_93
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_94
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_95
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_43 = (FLDNOW(2)%v-FLDNOW(3)%v)
        OpenAD_Symbol_40 = (UVELLOC%v*OpenAD_Symbol_43)
        DFLDDT(3)%v = (OpenAD_Symbol_40/VOL(3))
        OpenAD_Symbol_44 = OpenAD_Symbol_43
        OpenAD_Symbol_45 = UVELLOC%v
        OpenAD_Symbol_41 = (INT(1_w2f__i8)/VOL(3))
        OpenAD_Symbol_96 = (OpenAD_Symbol_44*OpenAD_Symbol_41)
        OpenAD_Symbol_97 = (OpenAD_Symbol_45*OpenAD_Symbol_41)
        double_tape(double_tape_pointer) = OpenAD_Symbol_96
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_97
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_127 = 1_w2f__i8
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_127
        integer_tape_pointer = integer_tape_pointer+1
      ELSE
        OpenAD_Symbol_53 = (FLDSTAR(1)-FLDNOW(1)%v)
        OpenAD_Symbol_50 = (GAMMALOC*OpenAD_Symbol_53)
        OpenAD_Symbol_57 = (FLDNOW(2)%v-FLDNOW(1)%v)
        OpenAD_Symbol_46 = (EXTFORLOC(1)+VOL(1)*OpenAD_Symbol_50-UVELLOC
     +%v*OpenAD_Symbol_57)
        DFLDDT(1)%v = (OpenAD_Symbol_46/VOL(1))
        OpenAD_Symbol_55 = GAMMALOC
        OpenAD_Symbol_52 = VOL(1)
        OpenAD_Symbol_58 = OpenAD_Symbol_57
        OpenAD_Symbol_59 = UVELLOC%v
        OpenAD_Symbol_47 = (INT(1_w2f__i8)/VOL(1))
        OpenAD_Symbol_98 = (INT((-1_w2f__i8))*OpenAD_Symbol_47)
        OpenAD_Symbol_99 = (OpenAD_Symbol_58*OpenAD_Symbol_98)
        OpenAD_Symbol_100 = (OpenAD_Symbol_59*OpenAD_Symbol_98)
        OpenAD_Symbol_101 = (INT((-1_w2f__i8))*OpenAD_Symbol_55*OpenAD_S
     +ymbol_52*OpenAD_Symbol_47)
        double_tape(double_tape_pointer) = OpenAD_Symbol_99
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_100
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_101
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_67 = (FLDSTAR(2)-FLDNOW(2)%v)
        OpenAD_Symbol_64 = (GAMMALOC*OpenAD_Symbol_67)
        OpenAD_Symbol_71 = (FLDNOW(3)%v-FLDNOW(2)%v)
        OpenAD_Symbol_60 = (EXTFORLOC(2)+VOL(2)*OpenAD_Symbol_64-UVELLOC
     +%v*OpenAD_Symbol_71)
        DFLDDT(2)%v = (OpenAD_Symbol_60/VOL(2))
        OpenAD_Symbol_69 = GAMMALOC
        OpenAD_Symbol_66 = VOL(2)
        OpenAD_Symbol_72 = OpenAD_Symbol_71
        OpenAD_Symbol_73 = UVELLOC%v
        OpenAD_Symbol_61 = (INT(1_w2f__i8)/VOL(2))
        OpenAD_Symbol_102 = (INT((-1_w2f__i8))*OpenAD_Symbol_61)
        OpenAD_Symbol_103 = (OpenAD_Symbol_72*OpenAD_Symbol_102)
        OpenAD_Symbol_104 = (OpenAD_Symbol_73*OpenAD_Symbol_102)
        OpenAD_Symbol_105 = (INT((-1_w2f__i8))*OpenAD_Symbol_69*OpenAD_S
     +ymbol_66*OpenAD_Symbol_61)
        double_tape(double_tape_pointer) = OpenAD_Symbol_103
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_104
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_105
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_77 = (FLDNOW(1)%v-FLDNOW(3)%v)
        OpenAD_Symbol_74 = (UVELLOC%v*OpenAD_Symbol_77)
        DFLDDT(3)%v = (-(OpenAD_Symbol_74/VOL(3)))
        OpenAD_Symbol_78 = OpenAD_Symbol_77
        OpenAD_Symbol_79 = UVELLOC%v
        OpenAD_Symbol_75 = (INT(1_w2f__i8)/VOL(3))
        OpenAD_Symbol_106 = (OpenAD_Symbol_78*OpenAD_Symbol_75*INT((-1_w
     +2f__i8)))
        OpenAD_Symbol_107 = (OpenAD_Symbol_79*OpenAD_Symbol_75*INT((-1_w
     +2f__i8)))
        double_tape(double_tape_pointer) = OpenAD_Symbol_106
        double_tape_pointer = double_tape_pointer+1
        double_tape(double_tape_pointer) = OpenAD_Symbol_107
        double_tape_pointer = double_tape_pointer+1
        OpenAD_Symbol_128 = 0_w2f__i8
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_128
        integer_tape_pointer = integer_tape_pointer+1
      ENDIF
      CALL box_update(FLDNEW,FLDOLD,DFLDDT)
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      CALL box_update(FLDNEW,FLDOLD,DFLDDT)
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_126 = integer_tape(integer_tape_pointer)
      IF (OpenAD_Symbol_126.ne.0) THEN
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_266 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_267 = double_tape(double_tape_pointer)
        OpenAD_prop_3%d = OpenAD_prop_3%d+DFLDDT(3)%d*(OpenAD_Symbol_266
     +)
        UVELLOC%d = UVELLOC%d+DFLDDT(3)%d*(OpenAD_Symbol_267)
        DFLDDT(3)%d = 0.0d0
        FLDNOW(3)%d = FLDNOW(3)%d-OpenAD_prop_3%d
        FLDNOW(2)%d = FLDNOW(2)%d+OpenAD_prop_3%d
        OpenAD_prop_3%d = 0.0d0
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_268 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_269 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_270 = double_tape(double_tape_pointer)
        FLDNOW(2)%d = FLDNOW(2)%d+DFLDDT(2)%d*(OpenAD_Symbol_268)
        OpenAD_prop_2%d = OpenAD_prop_2%d+DFLDDT(2)%d*(OpenAD_Symbol_269
     +)
        UVELLOC%d = UVELLOC%d+DFLDDT(2)%d*(OpenAD_Symbol_270)
        DFLDDT(2)%d = 0.0d0
        FLDNOW(2)%d = FLDNOW(2)%d-OpenAD_prop_2%d
        FLDNOW(1)%d = FLDNOW(1)%d+OpenAD_prop_2%d
        OpenAD_prop_2%d = 0.0d0
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_271 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_272 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_273 = double_tape(double_tape_pointer)
        FLDNOW(1)%d = FLDNOW(1)%d+DFLDDT(1)%d*(OpenAD_Symbol_271)
        OpenAD_prop_1%d = OpenAD_prop_1%d+DFLDDT(1)%d*(OpenAD_Symbol_272
     +)
        UVELLOC%d = UVELLOC%d+DFLDDT(1)%d*(OpenAD_Symbol_273)
        DFLDDT(1)%d = 0.0d0
        FLDNOW(1)%d = FLDNOW(1)%d-OpenAD_prop_1%d
        FLDNOW(3)%d = FLDNOW(3)%d+OpenAD_prop_1%d
        OpenAD_prop_1%d = 0.0d0
      ELSE
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_274 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_275 = double_tape(double_tape_pointer)
        OpenAD_prop_6%d = OpenAD_prop_6%d+DFLDDT(3)%d*(OpenAD_Symbol_274
     +)
        UVELLOC%d = UVELLOC%d+DFLDDT(3)%d*(OpenAD_Symbol_275)
        DFLDDT(3)%d = 0.0d0
        FLDNOW(3)%d = FLDNOW(3)%d-OpenAD_prop_6%d
        FLDNOW(1)%d = FLDNOW(1)%d+OpenAD_prop_6%d
        OpenAD_prop_6%d = 0.0d0
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_276 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_277 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_278 = double_tape(double_tape_pointer)
        FLDNOW(2)%d = FLDNOW(2)%d+DFLDDT(2)%d*(OpenAD_Symbol_276)
        OpenAD_prop_5%d = OpenAD_prop_5%d+DFLDDT(2)%d*(OpenAD_Symbol_277
     +)
        UVELLOC%d = UVELLOC%d+DFLDDT(2)%d*(OpenAD_Symbol_278)
        DFLDDT(2)%d = 0.0d0
        FLDNOW(2)%d = FLDNOW(2)%d-OpenAD_prop_5%d
        FLDNOW(3)%d = FLDNOW(3)%d+OpenAD_prop_5%d
        OpenAD_prop_5%d = 0.0d0
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_279 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_280 = double_tape(double_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_281 = double_tape(double_tape_pointer)
        FLDNOW(1)%d = FLDNOW(1)%d+DFLDDT(1)%d*(OpenAD_Symbol_279)
        OpenAD_prop_4%d = OpenAD_prop_4%d+DFLDDT(1)%d*(OpenAD_Symbol_280
     +)
        UVELLOC%d = UVELLOC%d+DFLDDT(1)%d*(OpenAD_Symbol_281)
        DFLDDT(1)%d = 0.0d0
        FLDNOW(1)%d = FLDNOW(1)%d-OpenAD_prop_4%d
        FLDNOW(2)%d = FLDNOW(2)%d+OpenAD_prop_4%d
        OpenAD_prop_4%d = 0.0d0
      ENDIF
          end if
        end subroutine box_timestep
