
!$OPENAD XXX File_start [OAD_intrinsics.f90]
MODULE oad_intrinsics
use w2f__types
use OAD_active
IMPLICIT NONE
SAVE
!
!     **** Statements ****
!
END MODULE

C$OPENAD XXX File_start [all_globals_mod.f]
      MODULE all_globals_mod
      use w2f__types
      use OAD_active
      IMPLICIT NONE
      SAVE
C
C     **** Statements ****
C
      END MODULE
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
C
C$OPENAD XXX File_start [head.f]
      SUBROUTINE head(NX, NY, X, FVEC, R)
          use OAD_tape
          use OAD_rev
          use OAD_cp

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use oad_intrinsics
      use oad_intrinsics
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_100
      INTEGER(w2f__i8) OpenAD_Symbol_101
      INTEGER(w2f__i8) OpenAD_Symbol_102
      INTEGER(w2f__i8) OpenAD_Symbol_103
      INTEGER(w2f__i8) OpenAD_Symbol_104
      INTEGER(w2f__i8) OpenAD_Symbol_105
      INTEGER(w2f__i8) OpenAD_Symbol_106
      INTEGER(w2f__i8) OpenAD_Symbol_107
      INTEGER(w2f__i8) OpenAD_Symbol_108
      INTEGER(w2f__i8) OpenAD_Symbol_109
      INTEGER(w2f__i8) OpenAD_Symbol_110
      INTEGER(w2f__i8) OpenAD_Symbol_111
      INTEGER(w2f__i8) OpenAD_Symbol_112
      INTEGER(w2f__i8) OpenAD_Symbol_113
      INTEGER(w2f__i8) OpenAD_Symbol_114
      INTEGER(w2f__i8) OpenAD_Symbol_115
      INTEGER(w2f__i8) OpenAD_Symbol_116
      INTEGER(w2f__i8) OpenAD_Symbol_117
      INTEGER(w2f__i8) OpenAD_Symbol_118
      INTEGER(w2f__i8) OpenAD_Symbol_119
      INTEGER(w2f__i8) OpenAD_Symbol_120
      INTEGER(w2f__i8) OpenAD_Symbol_121
      INTEGER(w2f__i8) OpenAD_Symbol_122
      INTEGER(w2f__i8) OpenAD_Symbol_123
      INTEGER(w2f__i8) OpenAD_Symbol_124
      INTEGER(w2f__i8) OpenAD_Symbol_125
      INTEGER(w2f__i8) OpenAD_Symbol_126
      INTEGER(w2f__i8) OpenAD_Symbol_127
      INTEGER(w2f__i8) OpenAD_Symbol_128
      INTEGER(w2f__i8) OpenAD_Symbol_129
      INTEGER(w2f__i8) OpenAD_Symbol_130
      INTEGER(w2f__i8) OpenAD_Symbol_131
      INTEGER(w2f__i8) OpenAD_Symbol_132
      INTEGER(w2f__i8) OpenAD_Symbol_133
      INTEGER(w2f__i8) OpenAD_Symbol_134
      INTEGER(w2f__i8) OpenAD_Symbol_135
      INTEGER(w2f__i8) OpenAD_Symbol_136
      INTEGER(w2f__i8) OpenAD_Symbol_137
      INTEGER(w2f__i8) OpenAD_Symbol_138
      INTEGER(w2f__i8) OpenAD_Symbol_139
      INTEGER(w2f__i8) OpenAD_Symbol_140
      INTEGER(w2f__i8) OpenAD_Symbol_141
      INTEGER(w2f__i8) OpenAD_Symbol_142
      INTEGER(w2f__i8) OpenAD_Symbol_143
      INTEGER(w2f__i8) OpenAD_Symbol_144
      INTEGER(w2f__i8) OpenAD_Symbol_145
      INTEGER(w2f__i8) OpenAD_Symbol_146
      INTEGER(w2f__i8) OpenAD_Symbol_147
      INTEGER(w2f__i8) OpenAD_Symbol_148
      INTEGER(w2f__i8) OpenAD_Symbol_149
      INTEGER(w2f__i8) OpenAD_Symbol_150
      INTEGER(w2f__i8) OpenAD_Symbol_151
      INTEGER(w2f__i8) OpenAD_Symbol_152
      INTEGER(w2f__i8) OpenAD_Symbol_153
      INTEGER(w2f__i8) OpenAD_Symbol_154
      INTEGER(w2f__i8) OpenAD_Symbol_155
      INTEGER(w2f__i8) OpenAD_Symbol_156
      INTEGER(w2f__i8) OpenAD_Symbol_157
      INTEGER(w2f__i8) OpenAD_Symbol_158
      INTEGER(w2f__i8) OpenAD_Symbol_159
      INTEGER(w2f__i8) OpenAD_Symbol_160
      INTEGER(w2f__i8) OpenAD_Symbol_161
      INTEGER(w2f__i8) OpenAD_Symbol_162
      INTEGER(w2f__i8) OpenAD_Symbol_163
      INTEGER(w2f__i8) OpenAD_Symbol_164
      INTEGER(w2f__i8) OpenAD_Symbol_165
      INTEGER(w2f__i8) OpenAD_Symbol_166
      INTEGER(w2f__i8) OpenAD_Symbol_167
      REAL(w2f__8) OpenAD_Symbol_77
      INTEGER(w2f__i8) OpenAD_Symbol_78
      INTEGER(w2f__i8) OpenAD_Symbol_79
      INTEGER(w2f__i8) OpenAD_Symbol_80
      INTEGER(w2f__i8) OpenAD_Symbol_81
      INTEGER(w2f__i8) OpenAD_Symbol_82
      INTEGER(w2f__i8) OpenAD_Symbol_83
      INTEGER(w2f__i8) OpenAD_Symbol_84
      INTEGER(w2f__i8) OpenAD_Symbol_85
      INTEGER(w2f__i8) OpenAD_Symbol_86
      INTEGER(w2f__i8) OpenAD_Symbol_87
      INTEGER(w2f__i8) OpenAD_Symbol_88
      INTEGER(w2f__i8) OpenAD_Symbol_89
      INTEGER(w2f__i8) OpenAD_Symbol_90
      INTEGER(w2f__i8) OpenAD_Symbol_91
      INTEGER(w2f__i8) OpenAD_Symbol_92
      INTEGER(w2f__i8) OpenAD_Symbol_93
      INTEGER(w2f__i8) OpenAD_Symbol_94
      INTEGER(w2f__i8) OpenAD_Symbol_95
      INTEGER(w2f__i8) OpenAD_Symbol_96
      INTEGER(w2f__i8) OpenAD_Symbol_97
      INTEGER(w2f__i8) OpenAD_Symbol_98
      INTEGER(w2f__i8) OpenAD_Symbol_99
      REAL(w2f__8) OpenAD_acc_0
      REAL(w2f__8) OpenAD_acc_1
      REAL(w2f__8) OpenAD_acc_10
      REAL(w2f__8) OpenAD_acc_11
      REAL(w2f__8) OpenAD_acc_12
      REAL(w2f__8) OpenAD_acc_13
      REAL(w2f__8) OpenAD_acc_14
      REAL(w2f__8) OpenAD_acc_15
      REAL(w2f__8) OpenAD_acc_16
      REAL(w2f__8) OpenAD_acc_17
      REAL(w2f__8) OpenAD_acc_18
      REAL(w2f__8) OpenAD_acc_19
      REAL(w2f__8) OpenAD_acc_2
      REAL(w2f__8) OpenAD_acc_20
      REAL(w2f__8) OpenAD_acc_3
      REAL(w2f__8) OpenAD_acc_4
      REAL(w2f__8) OpenAD_acc_5
      REAL(w2f__8) OpenAD_acc_6
      REAL(w2f__8) OpenAD_acc_7
      REAL(w2f__8) OpenAD_acc_8
      REAL(w2f__8) OpenAD_acc_9
      type(active) :: OpenAD_prop_0
      type(active) :: OpenAD_prop_1
      type(active) :: OpenAD_prop_10
      type(active) :: OpenAD_prop_11
      type(active) :: OpenAD_prop_12
      type(active) :: OpenAD_prop_2
      type(active) :: OpenAD_prop_3
      type(active) :: OpenAD_prop_4
      type(active) :: OpenAD_prop_5
      type(active) :: OpenAD_prop_6
      type(active) :: OpenAD_prop_7
      type(active) :: OpenAD_prop_8
      type(active) :: OpenAD_prop_9
C
C     **** Parameters and Result ****
C
      INTEGER(w2f__i4) NX
      INTEGER(w2f__i4) NY
      type(active) :: X(1:INT((NX*NY)))
      type(active) :: FVEC(1:INT((NX*NY)))
      REAL(w2f__8) R
C
C     **** Local Variables and Functions ****
C
      type(active) :: DPDX
      type(active) :: DPDY
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      REAL(w2f__8) HX
      REAL(w2f__8) HX2
      REAL(w2f__8) HY
      REAL(w2f__8) HY2
      INTEGER(w2f__i4) I
      INTEGER(w2f__i4) J
      INTEGER(w2f__i4) K
      INTEGER(w2f__i4) N
      REAL(w2f__8) NXP1
      REAL(w2f__8) NYP1
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      type(active) :: P
      type(active) :: PB
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PBLAP
      type(active) :: PBR
      type(active) :: PL
      type(active) :: PLAP
      type(active) :: PLL
      type(active) :: PLLAP
      type(active) :: PR
      type(active) :: PRLAP
      type(active) :: PRR
      type(active) :: PT
      type(active) :: PTL
      type(active) :: PTLAP
      type(active) :: PTR
      type(active) :: PTT
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
      REAL(w2f__8) OpenAD_Symbol_0
      REAL(w2f__8) OpenAD_Symbol_1
      REAL(w2f__8) OpenAD_Symbol_12
      REAL(w2f__8) OpenAD_Symbol_13
      REAL(w2f__8) OpenAD_Symbol_16
      INTEGER(w2f__i8) OpenAD_Symbol_168
      INTEGER(w2f__i8) OpenAD_Symbol_169
      REAL(w2f__8) OpenAD_Symbol_17
      INTEGER(w2f__i8) OpenAD_Symbol_170
      INTEGER(w2f__i8) OpenAD_Symbol_171
      INTEGER(w2f__i8) OpenAD_Symbol_172
      INTEGER(w2f__i8) OpenAD_Symbol_173
      INTEGER(w2f__i8) OpenAD_Symbol_174
      INTEGER(w2f__i8) OpenAD_Symbol_175
      INTEGER(w2f__i8) OpenAD_Symbol_176
      INTEGER(w2f__i8) OpenAD_Symbol_177
      INTEGER(w2f__i8) OpenAD_Symbol_178
      INTEGER(w2f__i8) OpenAD_Symbol_179
      INTEGER(w2f__i8) OpenAD_Symbol_180
      INTEGER(w2f__i8) OpenAD_Symbol_181
      INTEGER(w2f__i8) OpenAD_Symbol_182
      INTEGER(w2f__i8) OpenAD_Symbol_183
      INTEGER(w2f__i8) OpenAD_Symbol_184
      INTEGER(w2f__i8) OpenAD_Symbol_185
      INTEGER(w2f__i8) OpenAD_Symbol_186
      INTEGER(w2f__i8) OpenAD_Symbol_187
      INTEGER(w2f__i8) OpenAD_Symbol_188
      INTEGER(w2f__i8) OpenAD_Symbol_189
      REAL(w2f__8) OpenAD_Symbol_190
      REAL(w2f__8) OpenAD_Symbol_191
      REAL(w2f__8) OpenAD_Symbol_192
      REAL(w2f__8) OpenAD_Symbol_193
      REAL(w2f__8) OpenAD_Symbol_194
      REAL(w2f__8) OpenAD_Symbol_195
      REAL(w2f__8) OpenAD_Symbol_196
      REAL(w2f__8) OpenAD_Symbol_197
      REAL(w2f__8) OpenAD_Symbol_198
      REAL(w2f__8) OpenAD_Symbol_199
      REAL(w2f__8) OpenAD_Symbol_2
      REAL(w2f__8) OpenAD_Symbol_20
      REAL(w2f__8) OpenAD_Symbol_200
      REAL(w2f__8) OpenAD_Symbol_201
      INTEGER(w2f__i8) OpenAD_Symbol_202
      INTEGER(w2f__i8) OpenAD_Symbol_203
      INTEGER(w2f__i8) OpenAD_Symbol_204
      INTEGER(w2f__i8) OpenAD_Symbol_205
      INTEGER(w2f__i8) OpenAD_Symbol_206
      INTEGER(w2f__i8) OpenAD_Symbol_207
      INTEGER(w2f__i8) OpenAD_Symbol_208
      INTEGER(w2f__i8) OpenAD_Symbol_209
      REAL(w2f__8) OpenAD_Symbol_21
      INTEGER(w2f__i8) OpenAD_Symbol_210
      INTEGER(w2f__i8) OpenAD_Symbol_211
      INTEGER(w2f__i8) OpenAD_Symbol_212
      INTEGER(w2f__i8) OpenAD_Symbol_213
      INTEGER(w2f__i8) OpenAD_Symbol_214
      INTEGER(w2f__i8) OpenAD_Symbol_215
      INTEGER(w2f__i8) OpenAD_Symbol_216
      INTEGER(w2f__i8) OpenAD_Symbol_217
      INTEGER(w2f__i8) OpenAD_Symbol_218
      REAL(w2f__8) OpenAD_Symbol_219
      REAL(w2f__8) OpenAD_Symbol_24
      REAL(w2f__8) OpenAD_Symbol_25
      REAL(w2f__8) OpenAD_Symbol_28
      REAL(w2f__8) OpenAD_Symbol_29
      REAL(w2f__8) OpenAD_Symbol_32
      REAL(w2f__8) OpenAD_Symbol_33
      REAL(w2f__8) OpenAD_Symbol_36
      REAL(w2f__8) OpenAD_Symbol_37
      REAL(w2f__8) OpenAD_Symbol_4
      REAL(w2f__8) OpenAD_Symbol_40
      REAL(w2f__8) OpenAD_Symbol_41
      REAL(w2f__8) OpenAD_Symbol_44
      REAL(w2f__8) OpenAD_Symbol_45
      REAL(w2f__8) OpenAD_Symbol_48
      REAL(w2f__8) OpenAD_Symbol_49
      REAL(w2f__8) OpenAD_Symbol_5
      REAL(w2f__8) OpenAD_Symbol_52
      REAL(w2f__8) OpenAD_Symbol_53
      REAL(w2f__8) OpenAD_Symbol_56
      REAL(w2f__8) OpenAD_Symbol_58
      REAL(w2f__8) OpenAD_Symbol_59
      REAL(w2f__8) OpenAD_Symbol_6
      REAL(w2f__8) OpenAD_Symbol_60
      REAL(w2f__8) OpenAD_Symbol_61
      REAL(w2f__8) OpenAD_Symbol_63
      REAL(w2f__8) OpenAD_Symbol_64
      REAL(w2f__8) OpenAD_Symbol_65
      REAL(w2f__8) OpenAD_Symbol_66
      REAL(w2f__8) OpenAD_Symbol_67
      REAL(w2f__8) OpenAD_Symbol_68
      REAL(w2f__8) OpenAD_Symbol_70
      REAL(w2f__8) OpenAD_Symbol_71
      REAL(w2f__8) OpenAD_Symbol_72
      REAL(w2f__8) OpenAD_Symbol_74
      REAL(w2f__8) OpenAD_Symbol_75
      REAL(w2f__8) OpenAD_Symbol_8
      REAL(w2f__8) OpenAD_Symbol_9


C checkpointing stacks and offsets
          integer :: cp_loop_variable_1,cp_loop_variable_2,cp_loop_varia
     +ble_3,cp_loop_variable_4,cp_loop_variable_5
C floats 'F'
          double precision, dimension(:), allocatable, save :: theArgFSt
     +ack
          integer, save :: theArgFStackoffset=0, theArgFStackSize=0
C integers 'I'
          integer, dimension(:), allocatable, save :: theArgIStack
          integer, save :: theArgIStackoffset=0, theArgIStackSize=0
C booleans 'B'
          logical, dimension(:), allocatable, save :: theArgBStack
          integer, save :: theArgBStackoffset=0, theArgBStackSize=0
C strings 'S'
          character*(80), dimension(:), allocatable, save :: theArgSStac
     +k
          integer, save :: theArgSStackoffset=0, theArgSStackSize=0

          type(modeType) :: our_orig_mode

C external C function used in inlined code
          integer iaddr
          external iaddr
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(FVEC)
C
C     **** Statements ****
C

          if (our_rev_mode%arg_store) then
C store arguments
          end if
          if (our_rev_mode%arg_restore) then
C restore arguments
          end if
          if (our_rev_mode%plain) then
            our_orig_mode=our_rev_mode
            our_rev_mode%arg_store=.FALSE.
C original function
C$OPENAD XXX Template ad_template.f
      N = (NX * NY)
      NXP1 = (NX + 1)
      NYP1 = (NY + 1)
      HX = (1.0D00 / NXP1)
      HY = (1.0D00 / NYP1)
      HY2 = (HY * HY)
      HX2 = (HX * HX)
      DO I = 1, NY, 1
        DO J = 1, NX, 1
          K = (J + NX *(I +(-1)))
          IF((I .eq. 1) .OR.(J .eq. 1)) THEN
            PBL%v = 0.0D00
          ELSE
            PBL%v = X(K-NX+(-1))%v
          ENDIF
          IF (I.eq.1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
          ELSE
            IF (I.eq.2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
            ENDIF
          ENDIF
          IF ((NX.eq.J).OR.(I.eq.1)) THEN
            PBR%v = 0.0D00
          ELSE
            PBR%v = X(K-NX+1)%v
          ENDIF
          IF (J.eq.1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
          ELSE
            IF (J.eq.2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
            ENDIF
          ENDIF
          P%v = X(K)%v
          IF (J.eq.(NX+(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
          ELSE
            IF (NX.eq.J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
            ENDIF
          ENDIF
          IF ((NY.eq.I).OR.(J.eq.1)) THEN
            PTL%v = 0.0D00
          ELSE
            PTL%v = X(NX+K+(-1))%v
          ENDIF
          IF (I.eq.(NY+(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
          ELSE
            IF (NY.eq.I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
            ENDIF
          ENDIF
          IF ((NX.eq.J).OR.(NY.eq.I)) THEN
            PTR%v = 0.0D00
          ELSE
            PTR%v = X(NX+K+1)%v
          ENDIF
          DPDY%v = ((PT%v-PB%v)/(HY*2.0D00))
          DPDX%v = ((PR%v-PL%v)/(HX*2.0D00))
          PBLAP%v = (((PBB%v+P%v-PB%v*2.0D00)/HY2)+((PBL%v+PBR%v-PB%v*2.
     +0D00)/HX2))
          PLLAP%v = (((PBL%v+PTL%v-PL%v*2.0D00)/HY2)+((PLL%v+P%v-PL%v*2.
     +0D00)/HX2))
          PLAP%v = (((PB%v+PT%v-P%v*2.0D00)/HY2)+((PL%v+PR%v-P%v*2.0D00)
     +/HX2))
          PRLAP%v = (((P%v+PRR%v-PR%v*2.0D00)/HX2)+((PBR%v+PTR%v-PR%v*2.
     +0D00)/HY2))
          PTLAP%v = (((P%v+PTT%v-PT%v*2.0D00)/HY2)+((PTL%v+PTR%v-PT%v*2.
     +0D00)/HX2))
          FVEC(INT(K))%v = (((PBLAP%v+PTLAP%v-PLAP%v*2.0D00)/HY2)+((PLLA
     +P%v+PRLAP%v-PLAP%v*2.0D00)/HX2)-R*(((DPDY%v*(PRLAP%v-PLLAP%v))/(HX
     +*2.0D00))-((DPDX%v*(PTLAP%v-PBLAP%v))/(HY*2.0D00))))
        END DO
      END DO
      DO K = 1,N,1
        FVEC(INT(K))%v = (FVEC(K)%v*HX2*HY2)
      END DO

C original function end
            our_rev_mode=our_orig_mode
          end if
          if (our_rev_mode%tape) then
C            print*, " tape       ", our_rev_mode
            our_rev_mode%arg_store=.TRUE.
            our_rev_mode%arg_restore=.FALSE.
            our_rev_mode%plain=.TRUE.
            our_rev_mode%tape=.FALSE.
            our_rev_mode%adjoint=.FALSE.
C taping
C$OPENAD XXX Template ad_template.f
      N = (NX*NY)
      NXP1 = (NX+1)
      NYP1 = (NY+1)
      HX = (1.0D00/NXP1)
      HY = (1.0D00/NYP1)
      HY2 = (HY*HY)
      HX2 = (HX*HX)
      OpenAD_Symbol_96 = 0_w2f__i8
      DO I = 1,NY,1
        OpenAD_Symbol_97 = 0_w2f__i8
        DO J = 1,NX,1
          K = (J+NX*(I+(-1)))
          IF ((I.eq.1).OR.(J.eq.1)) THEN
            PBL%v = 0.0D00
            OpenAD_Symbol_98 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_98
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PBL%v = X(K-NX+(-1))%v
            OpenAD_Symbol_183 = (K-NX+(-1))
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_183
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_99 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_99
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (I.eq.1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
            integer_tape(integer_tape_pointer) = K
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_102 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_102
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (I.eq.2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
              OpenAD_Symbol_180 = (K-NX)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_180
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_100 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_100
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
              OpenAD_Symbol_181 = (K-NX)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_181
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_182 = (K-NX*2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_182
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_101 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_101
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_103 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_103
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NX.eq.J).OR.(I.eq.1)) THEN
            PBR%v = 0.0D00
            OpenAD_Symbol_104 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_104
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PBR%v = X(K-NX+1)%v
            OpenAD_Symbol_179 = (K-NX+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_179
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_105 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_105
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (J.eq.1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
            integer_tape(integer_tape_pointer) = K
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_108 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_108
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (J.eq.2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
              OpenAD_Symbol_176 = (K+(-1))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_176
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_106 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_106
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
              OpenAD_Symbol_177 = (K+(-1))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_177
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_178 = (K+(-2))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_178
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_107 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_107
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_109 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_109
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          P%v = X(K)%v
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          IF (J.eq.(NX+(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
            OpenAD_Symbol_168 = (K+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_168
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_112 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_112
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (NX.eq.J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
              integer_tape(integer_tape_pointer) = K
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_110 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_110
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
              OpenAD_Symbol_174 = (K+1)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_174
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_175 = (K+2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_175
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_111 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_111
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_113 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_113
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NY.eq.I).OR.(J.eq.1)) THEN
            PTL%v = 0.0D00
            OpenAD_Symbol_114 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_114
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PTL%v = X(NX+K+(-1))%v
            OpenAD_Symbol_173 = (NX+K+(-1))
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_173
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_115 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_115
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (I.eq.(NY+(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
            OpenAD_Symbol_169 = (NX+K)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_169
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_118 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_118
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (NY.eq.I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
              integer_tape(integer_tape_pointer) = K
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_116 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_116
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
              OpenAD_Symbol_171 = (NX+K)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_171
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_172 = (K+NX*2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_172
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_117 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_117
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_119 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_119
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NX.eq.J).OR.(NY.eq.I)) THEN
            PTR%v = 0.0D00
            OpenAD_Symbol_120 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_120
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PTR%v = X(NX+K+1)%v
            OpenAD_Symbol_170 = (NX+K+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_170
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_121 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_121
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          OpenAD_Symbol_0 = (PT%v-PB%v)
          OpenAD_Symbol_1 = (HY*2.0D00)
          DPDY%v = (OpenAD_Symbol_0/OpenAD_Symbol_1)
          OpenAD_Symbol_2 = (INT(1_w2f__i8)/OpenAD_Symbol_1)
          OpenAD_Symbol_4 = (PR%v-PL%v)
          OpenAD_Symbol_5 = (HX*2.0D00)
          DPDX%v = (OpenAD_Symbol_4/OpenAD_Symbol_5)
          OpenAD_Symbol_6 = (INT(1_w2f__i8)/OpenAD_Symbol_5)
          OpenAD_Symbol_8 = (PBB%v+P%v-PB%v*2.0D00)
          OpenAD_Symbol_12 = (PBL%v+PBR%v-PB%v*2.0D00)
          PBLAP%v = ((OpenAD_Symbol_8/HY2)+(OpenAD_Symbol_12/HX2))
          OpenAD_Symbol_9 = (INT(1_w2f__i8)/HY2)
          OpenAD_Symbol_13 = (INT(1_w2f__i8)/HX2)
          OpenAD_Symbol_16 = (PBL%v+PTL%v-PL%v*2.0D00)
          OpenAD_Symbol_20 = (PLL%v+P%v-PL%v*2.0D00)
          PLLAP%v = ((OpenAD_Symbol_16/HY2)+(OpenAD_Symbol_20/HX2))
          OpenAD_Symbol_17 = (INT(1_w2f__i8)/HY2)
          OpenAD_Symbol_21 = (INT(1_w2f__i8)/HX2)
          OpenAD_Symbol_24 = (PB%v+PT%v-P%v*2.0D00)
          OpenAD_Symbol_28 = (PL%v+PR%v-P%v*2.0D00)
          PLAP%v = ((OpenAD_Symbol_24/HY2)+(OpenAD_Symbol_28/HX2))
          OpenAD_Symbol_25 = (INT(1_w2f__i8)/HY2)
          OpenAD_Symbol_29 = (INT(1_w2f__i8)/HX2)
          OpenAD_Symbol_32 = (P%v+PRR%v-PR%v*2.0D00)
          OpenAD_Symbol_36 = (PBR%v+PTR%v-PR%v*2.0D00)
          PRLAP%v = ((OpenAD_Symbol_32/HX2)+(OpenAD_Symbol_36/HY2))
          OpenAD_Symbol_33 = (INT(1_w2f__i8)/HX2)
          OpenAD_Symbol_37 = (INT(1_w2f__i8)/HY2)
          OpenAD_Symbol_40 = (P%v+PTT%v-PT%v*2.0D00)
          OpenAD_Symbol_44 = (PTL%v+PTR%v-PT%v*2.0D00)
          PTLAP%v = ((OpenAD_Symbol_40/HY2)+(OpenAD_Symbol_44/HX2))
          OpenAD_Symbol_41 = (INT(1_w2f__i8)/HY2)
          OpenAD_Symbol_45 = (INT(1_w2f__i8)/HX2)
          OpenAD_Symbol_48 = (PBLAP%v+PTLAP%v-PLAP%v*2.0D00)
          OpenAD_Symbol_52 = (PLLAP%v+PRLAP%v-PLAP%v*2.0D00)
          OpenAD_Symbol_63 = (PRLAP%v-PLLAP%v)
          OpenAD_Symbol_59 = (DPDY%v*OpenAD_Symbol_63)
          OpenAD_Symbol_60 = (HX*2.0D00)
          OpenAD_Symbol_70 = (PTLAP%v-PBLAP%v)
          OpenAD_Symbol_66 = (DPDX%v*OpenAD_Symbol_70)
          OpenAD_Symbol_67 = (HY*2.0D00)
          OpenAD_Symbol_56 = ((OpenAD_Symbol_59/OpenAD_Symbol_60)-(OpenA
     +D_Symbol_66/OpenAD_Symbol_67))
          FVEC(INT(K))%v = ((OpenAD_Symbol_48/HY2)+(OpenAD_Symbol_52/HX2
     +)-R*OpenAD_Symbol_56)
          OpenAD_Symbol_49 = (INT(1_w2f__i8)/HY2)
          OpenAD_Symbol_53 = (INT(1_w2f__i8)/HX2)
          OpenAD_Symbol_64 = OpenAD_Symbol_63
          OpenAD_Symbol_65 = DPDY%v
          OpenAD_Symbol_61 = (INT(1_w2f__i8)/OpenAD_Symbol_60)
          OpenAD_Symbol_71 = OpenAD_Symbol_70
          OpenAD_Symbol_72 = DPDX%v
          OpenAD_Symbol_68 = (INT(1_w2f__i8)/OpenAD_Symbol_67)
          OpenAD_Symbol_58 = R
          OpenAD_acc_0 = (OpenAD_Symbol_58*INT((-1_w2f__i8)))
          OpenAD_acc_1 = (INT((-1_w2f__i8))*OpenAD_acc_0)
          OpenAD_acc_2 = (OpenAD_Symbol_72*OpenAD_Symbol_68*OpenAD_acc_1
     +)
          OpenAD_acc_3 = (OpenAD_Symbol_6*OpenAD_Symbol_71*OpenAD_Symbol
     +_68*OpenAD_acc_1)
          OpenAD_acc_4 = (OpenAD_Symbol_65*OpenAD_Symbol_61*OpenAD_acc_0
     +)
          OpenAD_acc_5 = (OpenAD_Symbol_2*OpenAD_Symbol_64*OpenAD_Symbol
     +_61*OpenAD_acc_0)
          OpenAD_acc_6 = (OpenAD_Symbol_53+OpenAD_acc_4)
          OpenAD_acc_7 = (OpenAD_Symbol_53+INT((-1_w2f__i8))*OpenAD_acc_
     +4)
          OpenAD_acc_8 = (2.0D00*INT((-1_w2f__i8))*OpenAD_Symbol_53+2.0D
     +00*INT((-1_w2f__i8))*OpenAD_Symbol_49)
          OpenAD_acc_9 = (OpenAD_Symbol_49+OpenAD_acc_2)
          OpenAD_acc_10 = (OpenAD_Symbol_49+INT((-1_w2f__i8))*OpenAD_acc
     +_2)
          OpenAD_acc_11 = (OpenAD_Symbol_45*OpenAD_acc_9)
          OpenAD_acc_12 = (OpenAD_Symbol_41*OpenAD_acc_9)
          OpenAD_acc_13 = (OpenAD_Symbol_37*OpenAD_acc_6)
          OpenAD_acc_14 = (OpenAD_Symbol_33*OpenAD_acc_6)
          OpenAD_acc_15 = (OpenAD_Symbol_29*OpenAD_acc_8)
          OpenAD_acc_16 = (OpenAD_Symbol_25*OpenAD_acc_8)
          OpenAD_acc_17 = (OpenAD_Symbol_21*OpenAD_acc_7)
          OpenAD_acc_18 = (OpenAD_Symbol_17*OpenAD_acc_7)
          OpenAD_acc_19 = (OpenAD_Symbol_13*OpenAD_acc_10)
          OpenAD_acc_20 = (OpenAD_Symbol_9*OpenAD_acc_10)
          double_tape(double_tape_pointer) = OpenAD_acc_3
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_5
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_11
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_12
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_13
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_14
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_15
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_16
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_17
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_18
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_19
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_20
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_97 = (INT(OpenAD_Symbol_97)+INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_97
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_96 = (INT(OpenAD_Symbol_96)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_96
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_122 = 0_w2f__i8
      DO K = 1,N,1
        OpenAD_Symbol_74 = (HX2*HY2)
        OpenAD_Symbol_77 = (FVEC(K)%v*OpenAD_Symbol_74)
        OpenAD_Symbol_75 = OpenAD_Symbol_74
        FVEC(INT(K))%v = OpenAD_Symbol_77
        double_tape(double_tape_pointer) = OpenAD_Symbol_75
        double_tape_pointer = double_tape_pointer+1
        integer_tape(integer_tape_pointer) = K
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_122 = (INT(OpenAD_Symbol_122)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_122
      integer_tape_pointer = integer_tape_pointer+1

C taping end
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.FALSE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.FALSE.
            our_rev_mode%adjoint=.TRUE.
          end if
          if (our_rev_mode%adjoint) then
C            print*, " adjoint    ", our_rev_mode
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.TRUE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.TRUE.
            our_rev_mode%adjoint=.FALSE.
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_78 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_79 = 1
      do while (INT(OpenAD_Symbol_79).LE.INT(OpenAD_Symbol_78))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_218 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_219 = double_tape(double_tape_pointer)
        OpenAD_prop_12%d = OpenAD_prop_12%d+FVEC(INT(OpenAD_Symbol_218))
     +%d*(OpenAD_Symbol_219)
        FVEC(INT(OpenAD_Symbol_218))%d = 0.0d0
        FVEC(INT(OpenAD_Symbol_218))%d = FVEC(INT(OpenAD_Symbol_218))%d+
     +OpenAD_prop_12%d
        OpenAD_prop_12%d = 0.0d0
        OpenAD_Symbol_79 = INT(OpenAD_Symbol_79)+1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_80 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_81 = 1
      do while (INT(OpenAD_Symbol_81).LE.INT(OpenAD_Symbol_80))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_82 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_83 = 1
        do while (INT(OpenAD_Symbol_83).LE.INT(OpenAD_Symbol_82))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_189 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_190 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_191 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_192 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_193 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_194 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_195 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_196 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_197 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_198 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_199 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_200 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_201 = double_tape(double_tape_pointer)
          OpenAD_prop_2%d = OpenAD_prop_2%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_190)
          OpenAD_prop_3%d = OpenAD_prop_3%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_191)
          OpenAD_prop_4%d = OpenAD_prop_4%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_192)
          OpenAD_prop_5%d = OpenAD_prop_5%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_193)
          OpenAD_prop_6%d = OpenAD_prop_6%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_194)
          OpenAD_prop_7%d = OpenAD_prop_7%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_195)
          OpenAD_prop_8%d = OpenAD_prop_8%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_196)
          OpenAD_prop_9%d = OpenAD_prop_9%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_197)
          OpenAD_prop_10%d = OpenAD_prop_10%d+FVEC(INT(OpenAD_Symbol_189
     +))%d*(OpenAD_Symbol_198)
          OpenAD_prop_11%d = OpenAD_prop_11%d+FVEC(INT(OpenAD_Symbol_189
     +))%d*(OpenAD_Symbol_199)
          OpenAD_prop_0%d = OpenAD_prop_0%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_200)
          OpenAD_prop_1%d = OpenAD_prop_1%d+FVEC(INT(OpenAD_Symbol_189))
     +%d*(OpenAD_Symbol_201)
          FVEC(INT(OpenAD_Symbol_189))%d = 0.0d0
          PT%d = PT%d+OpenAD_prop_11%d*(-2.0D00)
          PTR%d = PTR%d+OpenAD_prop_11%d
          PTL%d = PTL%d+OpenAD_prop_11%d
          OpenAD_prop_11%d = 0.0d0
          PT%d = PT%d+OpenAD_prop_10%d*(-2.0D00)
          PTT%d = PTT%d+OpenAD_prop_10%d
          P%d = P%d+OpenAD_prop_10%d
          OpenAD_prop_10%d = 0.0d0
          PR%d = PR%d+OpenAD_prop_9%d*(-2.0D00)
          PTR%d = PTR%d+OpenAD_prop_9%d
          PBR%d = PBR%d+OpenAD_prop_9%d
          OpenAD_prop_9%d = 0.0d0
          PR%d = PR%d+OpenAD_prop_8%d*(-2.0D00)
          PRR%d = PRR%d+OpenAD_prop_8%d
          P%d = P%d+OpenAD_prop_8%d
          OpenAD_prop_8%d = 0.0d0
          P%d = P%d+OpenAD_prop_7%d*(-2.0D00)
          PR%d = PR%d+OpenAD_prop_7%d
          PL%d = PL%d+OpenAD_prop_7%d
          OpenAD_prop_7%d = 0.0d0
          P%d = P%d+OpenAD_prop_6%d*(-2.0D00)
          PT%d = PT%d+OpenAD_prop_6%d
          PB%d = PB%d+OpenAD_prop_6%d
          OpenAD_prop_6%d = 0.0d0
          PL%d = PL%d+OpenAD_prop_5%d*(-2.0D00)
          P%d = P%d+OpenAD_prop_5%d
          PLL%d = PLL%d+OpenAD_prop_5%d
          OpenAD_prop_5%d = 0.0d0
          PL%d = PL%d+OpenAD_prop_4%d*(-2.0D00)
          PTL%d = PTL%d+OpenAD_prop_4%d
          PBL%d = PBL%d+OpenAD_prop_4%d
          OpenAD_prop_4%d = 0.0d0
          PB%d = PB%d+OpenAD_prop_3%d*(-2.0D00)
          PBR%d = PBR%d+OpenAD_prop_3%d
          PBL%d = PBL%d+OpenAD_prop_3%d
          OpenAD_prop_3%d = 0.0d0
          PB%d = PB%d+OpenAD_prop_2%d*(-2.0D00)
          P%d = P%d+OpenAD_prop_2%d
          PBB%d = PBB%d+OpenAD_prop_2%d
          OpenAD_prop_2%d = 0.0d0
          PL%d = PL%d-OpenAD_prop_1%d
          PR%d = PR%d+OpenAD_prop_1%d
          OpenAD_prop_1%d = 0.0d0
          PB%d = PB%d-OpenAD_prop_0%d
          PT%d = PT%d+OpenAD_prop_0%d
          OpenAD_prop_0%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_84 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_84.ne.0) THEN
            PTR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_202 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_202))%d = X(INT(OpenAD_Symbol_202))%d+PT
     +R%d
            PTR%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_85 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_85.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_188 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_188))%d = X(INT(OpenAD_Symbol_188))%d+PT
     +%d
            PT%d = 0.0d0
            PTT%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_86 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_86.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_203 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_203))%d = X(INT(OpenAD_Symbol_203))%d+
     +PTT%d
              PTT%d = 0.0d0
              PT%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_204 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_204))%d = X(INT(OpenAD_Symbol_204))%d+
     +PTT%d
              PTT%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_205 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_205))%d = X(INT(OpenAD_Symbol_205))%d+
     +PT%d
              PT%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_87 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_87.ne.0) THEN
            PTL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_206 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_206))%d = X(INT(OpenAD_Symbol_206))%d+PT
     +L%d
            PTL%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_88 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_88.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_187 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_187))%d = X(INT(OpenAD_Symbol_187))%d+PR
     +%d
            PR%d = 0.0d0
            PRR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_89 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_89.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_207 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_207))%d = X(INT(OpenAD_Symbol_207))%d+
     +PRR%d
              PRR%d = 0.0d0
              PR%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_208 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_208))%d = X(INT(OpenAD_Symbol_208))%d+
     +PRR%d
              PRR%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_209 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_209))%d = X(INT(OpenAD_Symbol_209))%d+
     +PR%d
              PR%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_186 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_186))%d = X(INT(OpenAD_Symbol_186))%d+P%d
          P%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_90 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_90.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_185 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_185))%d = X(INT(OpenAD_Symbol_185))%d+PL
     +L%d
            PLL%d = 0.0d0
            PL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_91 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_91.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_210 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_210))%d = X(INT(OpenAD_Symbol_210))%d+
     +PL%d
              PL%d = 0.0d0
              PLL%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_211 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_211))%d = X(INT(OpenAD_Symbol_211))%d+
     +PLL%d
              PLL%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_212 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_212))%d = X(INT(OpenAD_Symbol_212))%d+
     +PL%d
              PL%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_92 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_92.ne.0) THEN
            PBR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_213 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_213))%d = X(INT(OpenAD_Symbol_213))%d+PB
     +R%d
            PBR%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_93 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_93.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_184 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_184))%d = X(INT(OpenAD_Symbol_184))%d+PB
     +B%d
            PBB%d = 0.0d0
            PB%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_94 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_94.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_214 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_214))%d = X(INT(OpenAD_Symbol_214))%d+
     +PB%d
              PB%d = 0.0d0
              PBB%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_215 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_215))%d = X(INT(OpenAD_Symbol_215))%d+
     +PBB%d
              PBB%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_216 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_216))%d = X(INT(OpenAD_Symbol_216))%d+
     +PB%d
              PB%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_95 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_95.ne.0) THEN
            PBL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_217 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_217))%d = X(INT(OpenAD_Symbol_217))%d+PB
     +L%d
            PBL%d = 0.0d0
          ENDIF
          OpenAD_Symbol_83 = INT(OpenAD_Symbol_83)+1
        END DO
        OpenAD_Symbol_81 = INT(OpenAD_Symbol_81)+1
      END DO

C adjoint end
            our_rev_mode%arg_store=.FALSE.
            our_rev_mode%arg_restore=.TRUE.
            our_rev_mode%plain=.FALSE.
            our_rev_mode%tape=.TRUE.
            our_rev_mode%adjoint=.FALSE.
          end if
        end subroutine head
