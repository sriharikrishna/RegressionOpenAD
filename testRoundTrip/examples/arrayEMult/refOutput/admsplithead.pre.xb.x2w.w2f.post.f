C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
C
C$OPENAD XXX File_start [head.f]
      SUBROUTINE head(X, Y)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use oad_intrinsics
      use oad_intrinsics
      IMPLICIT NONE
C
C     **** Parameters and Result ****
C
      type(active) :: X(1:2)
      type(active) :: Y(1:2)
C
C     **** Local Variables and Functions ****
C
      INTEGER(w2f__i4) N
      SAVE N
      type(active) :: Z(1:INT(SIZE(X)))
      REAL(w2f__8) OpenAD_Symbol_0(1 : 2)
      REAL(w2f__8) OpenAD_Symbol_1(1 : 2)
      INTEGER(w2f__i8) OpenAD_Symbol_2
      INTEGER(w2f__i8) OpenAD_Symbol_3
      REAL(w2f__8) OpenAD_Symbol_4(1 : 2)
      REAL(w2f__8) OpenAD_Symbol_5(1 : 2)
      INTEGER(w2f__i8) OpenAD_Symbol_6
      INTEGER(w2f__i8) OpenAD_Symbol_7
C
C     **** Initializers ****
C
      DATA N / 2 /
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(Y)
C
C     **** Statements ****
C


          integer iaddr
          external iaddr
C$OPENAD XXX Template ad_template.f
C$OPENAD XXX Template ad_template.f

         if (our_rev_mode%plain) then
C original function
      Z(1:INT(SIZE(X)))%v = X(1:2)%v
      Y(1:2)%v = (X(1:2)%v*Z(1:INT(SIZE(X)))%v)
          end if
          if (our_rev_mode%tape) then
C taping
      Z(1:INT(SIZE(X)))%v = X(1:2)%v
      OpenAD_Symbol_2 = SIZE(INT(X%v))
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_2
      integer_tape_pointer = integer_tape_pointer+1
      Y(1:2)%v = (X(1:2)%v*Z(1:INT(SIZE(X)))%v)
      OpenAD_Symbol_0 = Z(1:INT(SIZE(X)))%v
      OpenAD_Symbol_1 = X(1:2)%v
      double_tape(double_tape_pointer:) = OpenAD_Symbol_0(:)
      double_tape_pointer = double_tape_pointer+size(OpenAD_Symbol_0)
      double_tape(double_tape_pointer:) = OpenAD_Symbol_1(:)
      double_tape_pointer = double_tape_pointer+size(OpenAD_Symbol_1)
      OpenAD_Symbol_3 = SIZE(INT(X%v))
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_3
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      double_tape_pointer = double_tape_pointer-size(OpenAD_Symbol_4)
      OpenAD_Symbol_4(:) = double_tape(double_tape_pointer:)
      double_tape_pointer = double_tape_pointer-size(OpenAD_Symbol_5)
      OpenAD_Symbol_5(:) = double_tape(double_tape_pointer:)
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_6 = integer_tape(integer_tape_pointer)
      Z(1:INT(OpenAD_Symbol_6))%d = Z(1:INT(OpenAD_Symbol_6))%d+Y(1:2)%d
     +*(OpenAD_Symbol_4)
      X(1:2)%d = X(1:2)%d+Y(1:2)%d*(OpenAD_Symbol_5)
      Y(1:2)%d = 0.0d0
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_7 = integer_tape(integer_tape_pointer)
      X(1:2)%d = X(1:2)%d+Z(1:INT(OpenAD_Symbol_7))%d
      Z(1:INT(OpenAD_Symbol_7))%d = 0.0d0
          end if
        end subroutine head
