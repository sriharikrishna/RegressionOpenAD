      module all_globals_mod
      use w2f__types
      use OAD_active
      implicit none
      SAVE
C
C     **** Statements ****
C
      END MODULE
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
      subroutine head(NX,NY,X,FVEC,R)
          use OAD_tape
          use OAD_rev
C         ! original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster
      use w2f__types
      use OAD_active
      implicit none
C
C     **** Global Variables & Derived Type Definitions ****
C
      real(w2f__8) :: OpenAD_Symbol_0
      integer(w2f__i8) :: OpenAD_Symbol_1
      integer(w2f__i8) :: OpenAD_Symbol_2
      integer(w2f__i8) :: OpenAD_Symbol_3
      integer(w2f__i8) :: OpenAD_Symbol_4
      integer(w2f__i8) :: OpenAD_Symbol_5
      integer(w2f__i8) :: OpenAD_Symbol_6
      real(w2f__8) :: OpenAD_lin_0
      type(active) :: OpenAD_prop_0
      real(w2f__8) :: OpenAD_tmp_0
C
C     **** Parameters and Result ****
C
      integer(w2f__i4) :: NX
      integer(w2f__i4) :: NY
      type(active) :: X(1:INT((NX*NY)))
      type(active) :: FVEC(1:INT((NX*NY)))
      real(w2f__8) :: R
C
C     **** Local Variables and Functions ****
C
      external foo
      real(w2f__8) :: FOUR
      parameter (FOUR=4.0D00)
      real(w2f__8) :: HX
      real(w2f__8) :: HX2
      real(w2f__8) :: HY
      real(w2f__8) :: HY2
      integer(w2f__i4) :: K
      integer(w2f__i4) :: N
      real(w2f__8) :: NXP1
      real(w2f__8) :: NYP1
      real(w2f__8) :: ONE
      parameter (ONE=1.0D00)
      real(w2f__8) :: THREE
      parameter (THREE=3.0D00)
      real(w2f__8) :: TWO
      parameter (TWO=2.0D00)
      real(w2f__8) :: ZERO
      parameter (ZERO=0.0D00)
      integer(w2f__i8) :: OpenAD_Symbol_107
      real(w2f__8) :: OpenAD_Symbol_108
           integer :: iaddr
          external iaddr
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(FVEC)
C
C     **** Statements ****
C
          if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      N = (NX*NY)
      NXP1 = (NX+1)
      NYP1 = (NY+1)
      HX = (1.0D00/NXP1)
      HY = (1.0D00/NYP1)
      HY2 = (HY*HY)
      HX2 = (HX*HX)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
      DO K = 1,N,1
        FVEC(INT(K))%v = (FVEC(K)%v*HX2*HY2)
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      N = (NX*NY)
      NXP1 = (NX+1)
      NYP1 = (NY+1)
      HX = (1.0D00/NXP1)
      HY = (1.0D00/NYP1)
      HY2 = (HY*HY)
      HX2 = (HX*HX)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
      integer_tape(integer_tape_pointer) = NX
      integer_tape_pointer = integer_tape_pointer+1
      integer_tape(integer_tape_pointer) = NY
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_3 = 0_w2f__i8
      DO K = 1,N,1
        OpenAD_tmp_0 = (HX2*HY2)
        OpenAD_Symbol_0 = (FVEC(K)%v*OpenAD_tmp_0)
        OpenAD_lin_0 = OpenAD_tmp_0
        FVEC(INT(K))%v = OpenAD_Symbol_0
        double_tape(double_tape_pointer) = OpenAD_lin_0
        double_tape_pointer = double_tape_pointer+1
        integer_tape(integer_tape_pointer) = K
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_3 = (INT(OpenAD_Symbol_3)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_3
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_1 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_2 = 1
      do while (INT(OpenAD_Symbol_2).LE.INT(OpenAD_Symbol_1))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_107 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_108 = double_tape(double_tape_pointer)
        OpenAD_prop_0%d = OpenAD_prop_0%d+FVEC(INT(OpenAD_Symbol_107))%d
     +*(OpenAD_Symbol_108)
        FVEC(INT(OpenAD_Symbol_107))%d = 0.0d0
        FVEC(INT(OpenAD_Symbol_107))%d = FVEC(INT(OpenAD_Symbol_107))%d+
     +OpenAD_prop_0%d
        OpenAD_prop_0%d = 0.0d0
        OpenAD_Symbol_2 = INT(OpenAD_Symbol_2)+1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      NY = integer_tape(integer_tape_pointer)
      integer_tape_pointer = integer_tape_pointer-1
      NX = integer_tape(integer_tape_pointer)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
          end if
        end subroutine head
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
      subroutine foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
          use OAD_tape
          use OAD_rev
C         ! original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster
      use w2f__types
      use OAD_active
      implicit none
C
C     **** Global Variables & Derived Type Definitions ****
C
      integer(w2f__i8) :: OpenAD_Symbol_10
      integer(w2f__i8) :: OpenAD_Symbol_11
      integer(w2f__i8) :: OpenAD_Symbol_12
      integer(w2f__i8) :: OpenAD_Symbol_13
      integer(w2f__i8) :: OpenAD_Symbol_14
      integer(w2f__i8) :: OpenAD_Symbol_15
      integer(w2f__i8) :: OpenAD_Symbol_16
      integer(w2f__i8) :: OpenAD_Symbol_17
      integer(w2f__i8) :: OpenAD_Symbol_18
      integer(w2f__i8) :: OpenAD_Symbol_19
      integer(w2f__i8) :: OpenAD_Symbol_20
      integer(w2f__i8) :: OpenAD_Symbol_21
      integer(w2f__i8) :: OpenAD_Symbol_22
      integer(w2f__i8) :: OpenAD_Symbol_23
      integer(w2f__i8) :: OpenAD_Symbol_24
      integer(w2f__i8) :: OpenAD_Symbol_25
      integer(w2f__i8) :: OpenAD_Symbol_26
      integer(w2f__i8) :: OpenAD_Symbol_27
      integer(w2f__i8) :: OpenAD_Symbol_28
      integer(w2f__i8) :: OpenAD_Symbol_29
      integer(w2f__i8) :: OpenAD_Symbol_30
      integer(w2f__i8) :: OpenAD_Symbol_31
      integer(w2f__i8) :: OpenAD_Symbol_32
      integer(w2f__i8) :: OpenAD_Symbol_33
      integer(w2f__i8) :: OpenAD_Symbol_34
      integer(w2f__i8) :: OpenAD_Symbol_35
      integer(w2f__i8) :: OpenAD_Symbol_36
      integer(w2f__i8) :: OpenAD_Symbol_37
      integer(w2f__i8) :: OpenAD_Symbol_38
      integer(w2f__i8) :: OpenAD_Symbol_39
      integer(w2f__i8) :: OpenAD_Symbol_40
      integer(w2f__i8) :: OpenAD_Symbol_41
      integer(w2f__i8) :: OpenAD_Symbol_42
      integer(w2f__i8) :: OpenAD_Symbol_43
      integer(w2f__i8) :: OpenAD_Symbol_44
      integer(w2f__i8) :: OpenAD_Symbol_45
      integer(w2f__i8) :: OpenAD_Symbol_46
      integer(w2f__i8) :: OpenAD_Symbol_47
      integer(w2f__i8) :: OpenAD_Symbol_48
      integer(w2f__i8) :: OpenAD_Symbol_49
      integer(w2f__i8) :: OpenAD_Symbol_50
      integer(w2f__i8) :: OpenAD_Symbol_51
      integer(w2f__i8) :: OpenAD_Symbol_52
      integer(w2f__i8) :: OpenAD_Symbol_53
      integer(w2f__i8) :: OpenAD_Symbol_54
      integer(w2f__i8) :: OpenAD_Symbol_55
      integer(w2f__i8) :: OpenAD_Symbol_56
      integer(w2f__i8) :: OpenAD_Symbol_57
      integer(w2f__i8) :: OpenAD_Symbol_58
      integer(w2f__i8) :: OpenAD_Symbol_59
      integer(w2f__i8) :: OpenAD_Symbol_60
      integer(w2f__i8) :: OpenAD_Symbol_61
      integer(w2f__i8) :: OpenAD_Symbol_62
      integer(w2f__i8) :: OpenAD_Symbol_63
      integer(w2f__i8) :: OpenAD_Symbol_64
      integer(w2f__i8) :: OpenAD_Symbol_65
      integer(w2f__i8) :: OpenAD_Symbol_66
      integer(w2f__i8) :: OpenAD_Symbol_67
      integer(w2f__i8) :: OpenAD_Symbol_68
      integer(w2f__i8) :: OpenAD_Symbol_69
      integer(w2f__i8) :: OpenAD_Symbol_7
      integer(w2f__i8) :: OpenAD_Symbol_70
      integer(w2f__i8) :: OpenAD_Symbol_71
      integer(w2f__i8) :: OpenAD_Symbol_72
      integer(w2f__i8) :: OpenAD_Symbol_73
      integer(w2f__i8) :: OpenAD_Symbol_74
      integer(w2f__i8) :: OpenAD_Symbol_75
      integer(w2f__i8) :: OpenAD_Symbol_76
      integer(w2f__i8) :: OpenAD_Symbol_77
      integer(w2f__i8) :: OpenAD_Symbol_78
      integer(w2f__i8) :: OpenAD_Symbol_79
      integer(w2f__i8) :: OpenAD_Symbol_8
      integer(w2f__i8) :: OpenAD_Symbol_80
      integer(w2f__i8) :: OpenAD_Symbol_81
      integer(w2f__i8) :: OpenAD_Symbol_82
      integer(w2f__i8) :: OpenAD_Symbol_83
      integer(w2f__i8) :: OpenAD_Symbol_84
      integer(w2f__i8) :: OpenAD_Symbol_85
      integer(w2f__i8) :: OpenAD_Symbol_86
      integer(w2f__i8) :: OpenAD_Symbol_87
      integer(w2f__i8) :: OpenAD_Symbol_88
      integer(w2f__i8) :: OpenAD_Symbol_89
      integer(w2f__i8) :: OpenAD_Symbol_9
      integer(w2f__i8) :: OpenAD_Symbol_90
      real(w2f__8) :: OpenAD_acc_0
      real(w2f__8) :: OpenAD_acc_1
      real(w2f__8) :: OpenAD_acc_2
      real(w2f__8) :: OpenAD_acc_3
      real(w2f__8) :: OpenAD_acc_4
      real(w2f__8) :: OpenAD_acc_5
      real(w2f__8) :: OpenAD_lin_13
      real(w2f__8) :: OpenAD_lin_14
      real(w2f__8) :: OpenAD_lin_16
      real(w2f__8) :: OpenAD_lin_17
      real(w2f__8) :: OpenAD_lin_18
      real(w2f__8) :: OpenAD_lin_2
      real(w2f__8) :: OpenAD_lin_20
      real(w2f__8) :: OpenAD_lin_21
      real(w2f__8) :: OpenAD_lin_4
      real(w2f__8) :: OpenAD_lin_6
      real(w2f__8) :: OpenAD_lin_9
      type(active) :: OpenAD_prop_1
      type(active) :: OpenAD_prop_2
      type(active) :: OpenAD_prop_3
      type(active) :: OpenAD_prop_4
      type(active) :: OpenAD_prop_5
      type(active) :: OpenAD_prop_6
      real(w2f__8) :: OpenAD_tmp_1
      real(w2f__8) :: OpenAD_tmp_10
      real(w2f__8) :: OpenAD_tmp_11
      real(w2f__8) :: OpenAD_tmp_12
      real(w2f__8) :: OpenAD_tmp_13
      real(w2f__8) :: OpenAD_tmp_2
      real(w2f__8) :: OpenAD_tmp_3
      real(w2f__8) :: OpenAD_tmp_4
      real(w2f__8) :: OpenAD_tmp_5
      real(w2f__8) :: OpenAD_tmp_6
      real(w2f__8) :: OpenAD_tmp_7
      real(w2f__8) :: OpenAD_tmp_8
      real(w2f__8) :: OpenAD_tmp_9
C
C     **** Parameters and Result ****
C
      integer(w2f__i4) :: NX
      integer(w2f__i4) :: NY
      type(active) :: X(1:INT((NX*NY)))
      type(active) :: FVEC(1:INT((NX*NY)))
      real(w2f__8) :: R
      integer(w2f__i4) :: N
      real(w2f__8) :: HX
      real(w2f__8) :: HY
      real(w2f__8) :: HY2
      real(w2f__8) :: HX2
C
C     **** Local Variables and Functions ****
C
      external bar
      type(active) :: DPDX
      type(active) :: DPDY
      real(w2f__8) :: FOUR
      parameter (FOUR=4.0D00)
      integer(w2f__i4) :: I
      integer(w2f__i4) :: J
      integer(w2f__i4) :: K
      real(w2f__8) :: ONE
      parameter (ONE=1.0D00)
      type(active) :: P
      type(active) :: PB
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PBLAP
      type(active) :: PBR
      type(active) :: PL
      type(active) :: PLAP
      type(active) :: PLL
      type(active) :: PLLAP
      type(active) :: PR
      type(active) :: PRLAP
      type(active) :: PRR
      type(active) :: PT
      type(active) :: PTL
      type(active) :: PTLAP
      type(active) :: PTR
      type(active) :: PTT
      real(w2f__8) :: THREE
      parameter (THREE=3.0D00)
      real(w2f__8) :: TWO
      parameter (TWO=2.0D00)
      real(w2f__8) :: ZERO
      parameter (ZERO=0.0D00)
      integer(w2f__i8) :: OpenAD_Symbol_100
      integer(w2f__i8) :: OpenAD_Symbol_101
      integer(w2f__i8) :: OpenAD_Symbol_102
      integer(w2f__i8) :: OpenAD_Symbol_103
      integer(w2f__i8) :: OpenAD_Symbol_104
      integer(w2f__i8) :: OpenAD_Symbol_105
      integer(w2f__i8) :: OpenAD_Symbol_106
      integer(w2f__i8) :: OpenAD_Symbol_109
      integer(w2f__i8) :: OpenAD_Symbol_110
      integer(w2f__i8) :: OpenAD_Symbol_111
      integer(w2f__i8) :: OpenAD_Symbol_112
      integer(w2f__i8) :: OpenAD_Symbol_113
      integer(w2f__i8) :: OpenAD_Symbol_114
      real(w2f__8) :: OpenAD_Symbol_115
      real(w2f__8) :: OpenAD_Symbol_116
      real(w2f__8) :: OpenAD_Symbol_117
      real(w2f__8) :: OpenAD_Symbol_118
      real(w2f__8) :: OpenAD_Symbol_119
      real(w2f__8) :: OpenAD_Symbol_120
      real(w2f__8) :: OpenAD_Symbol_121
      real(w2f__8) :: OpenAD_Symbol_122
      integer(w2f__i8) :: OpenAD_Symbol_123
      integer(w2f__i8) :: OpenAD_Symbol_124
      integer(w2f__i8) :: OpenAD_Symbol_125
      integer(w2f__i8) :: OpenAD_Symbol_126
      integer(w2f__i8) :: OpenAD_Symbol_127
      integer(w2f__i8) :: OpenAD_Symbol_128
      integer(w2f__i8) :: OpenAD_Symbol_129
      integer(w2f__i8) :: OpenAD_Symbol_130
      integer(w2f__i8) :: OpenAD_Symbol_131
      integer(w2f__i8) :: OpenAD_Symbol_132
      integer(w2f__i8) :: OpenAD_Symbol_133
      integer(w2f__i8) :: OpenAD_Symbol_134
      integer(w2f__i8) :: OpenAD_Symbol_135
      integer(w2f__i8) :: OpenAD_Symbol_136
      integer(w2f__i8) :: OpenAD_Symbol_137
      integer(w2f__i8) :: OpenAD_Symbol_138
      integer(w2f__i8) :: OpenAD_Symbol_91
      integer(w2f__i8) :: OpenAD_Symbol_92
      integer(w2f__i8) :: OpenAD_Symbol_93
      integer(w2f__i8) :: OpenAD_Symbol_94
      integer(w2f__i8) :: OpenAD_Symbol_95
      integer(w2f__i8) :: OpenAD_Symbol_96
      integer(w2f__i8) :: OpenAD_Symbol_97
      integer(w2f__i8) :: OpenAD_Symbol_98
      integer(w2f__i8) :: OpenAD_Symbol_99
           integer :: iaddr
          external iaddr
C
C     **** Statements ****
C
          if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      DO I = 1,NY,1
        DO J = 1,NX,1
          K = (J+NX*(I+(-1)))
          IF ((I.eq.1).OR.(J.eq.1)) THEN
            PBL%v = 0.0D00
          ELSE
            PBL%v = X(K-NX+(-1))%v
          ENDIF
          IF (I.eq.1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
          ELSE
            IF (I.eq.2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
            ENDIF
          ENDIF
          IF ((NX.eq.J).OR.(I.eq.1)) THEN
            PBR%v = 0.0D00
          ELSE
            PBR%v = X(K-NX+1)%v
          ENDIF
          IF (J.eq.1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
          ELSE
            IF (J.eq.2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
            ENDIF
          ENDIF
          P%v = X(K)%v
          IF (J.eq.(NX+(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
          ELSE
            IF (NX.eq.J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
            ENDIF
          ENDIF
          IF ((NY.eq.I).OR.(J.eq.1)) THEN
            PTL%v = 0.0D00
          ELSE
            PTL%v = X(NX+K+(-1))%v
          ENDIF
          IF (I.eq.(NY+(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
          ELSE
            IF (NY.eq.I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
            ENDIF
          ENDIF
          IF ((NX.eq.J).OR.(NY.eq.I)) THEN
            PTR%v = 0.0D00
          ELSE
            PTR%v = X(NX+K+1)%v
          ENDIF
          DPDY%v = ((PT%v-PB%v)/(HY*2.0D00))
          DPDX%v = ((PR%v-PL%v)/(HX*2.0D00))
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          FVEC(INT(K))%v = (((PBLAP%v+PTLAP%v-PLAP%v*2.0D00)/HY2)+((PLLA
     +P%v+PRLAP%v-PLAP%v*2.0D00)/HX2)-R*(((DPDY%v*(PRLAP%v-PLLAP%v))/(HX
     +*2.0D00))-((DPDX%v*(PTLAP%v-PBLAP%v))/(HY*2.0D00))))
        END DO
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_23 = 0_w2f__i8
      DO I = 1,NY,1
        OpenAD_Symbol_24 = 0_w2f__i8
        DO J = 1,NX,1
          K = (J+NX*(I+(-1)))
          IF ((I.eq.1).OR.(J.eq.1)) THEN
            PBL%v = 0.0D00
            OpenAD_Symbol_25 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_25
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PBL%v = X(K-NX+(-1))%v
            OpenAD_Symbol_106 = (K-NX+(-1))
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_106
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_26 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_26
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (I.eq.1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
            integer_tape(integer_tape_pointer) = K
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_29 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_29
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (I.eq.2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
              OpenAD_Symbol_103 = (K-NX)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_103
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_27 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_27
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
              OpenAD_Symbol_104 = (K-NX)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_104
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_105 = (K-NX*2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_105
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_28 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_28
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_30 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_30
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NX.eq.J).OR.(I.eq.1)) THEN
            PBR%v = 0.0D00
            OpenAD_Symbol_31 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_31
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PBR%v = X(K-NX+1)%v
            OpenAD_Symbol_102 = (K-NX+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_102
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_32 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_32
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (J.eq.1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
            integer_tape(integer_tape_pointer) = K
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_35 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_35
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (J.eq.2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
              OpenAD_Symbol_99 = (K+(-1))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_99
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_33 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_33
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
              OpenAD_Symbol_100 = (K+(-1))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_100
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_101 = (K+(-2))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_101
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_34 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_34
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_36 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_36
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          P%v = X(K)%v
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          IF (J.eq.(NX+(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
            OpenAD_Symbol_91 = (K+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_91
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_39 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_39
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (NX.eq.J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
              integer_tape(integer_tape_pointer) = K
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_37 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_37
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
              OpenAD_Symbol_97 = (K+1)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_97
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_98 = (K+2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_98
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_38 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_38
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_40 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_40
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NY.eq.I).OR.(J.eq.1)) THEN
            PTL%v = 0.0D00
            OpenAD_Symbol_41 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_41
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PTL%v = X(NX+K+(-1))%v
            OpenAD_Symbol_96 = (NX+K+(-1))
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_96
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_42 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_42
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (I.eq.(NY+(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
            OpenAD_Symbol_92 = (NX+K)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_92
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_45 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_45
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (NY.eq.I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
              integer_tape(integer_tape_pointer) = K
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_43 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_43
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
              OpenAD_Symbol_94 = (NX+K)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_94
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_95 = (K+NX*2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_95
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_44 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_44
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_46 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_46
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NX.eq.J).OR.(NY.eq.I)) THEN
            PTR%v = 0.0D00
            OpenAD_Symbol_47 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_47
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PTR%v = X(NX+K+1)%v
            OpenAD_Symbol_93 = (NX+K+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_93
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_48 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_48
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          OpenAD_tmp_1 = (PT%v-PB%v)
          OpenAD_tmp_2 = (HY*2.0D00)
          DPDY%v = (OpenAD_tmp_1/OpenAD_tmp_2)
          OpenAD_lin_2 = (INT(1_w2f__i8)/OpenAD_tmp_2)
          OpenAD_tmp_3 = (PR%v-PL%v)
          OpenAD_tmp_4 = (HX*2.0D00)
          DPDX%v = (OpenAD_tmp_3/OpenAD_tmp_4)
          OpenAD_lin_4 = (INT(1_w2f__i8)/OpenAD_tmp_4)
          double_tape(double_tape_pointer) = OpenAD_lin_2
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_4
          double_tape_pointer = double_tape_pointer+1
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          OpenAD_tmp_5 = (PBLAP%v+PTLAP%v-PLAP%v*2.0D00)
          OpenAD_tmp_6 = (PLLAP%v+PRLAP%v-PLAP%v*2.0D00)
          OpenAD_tmp_10 = (PRLAP%v-PLLAP%v)
          OpenAD_tmp_8 = (DPDY%v*OpenAD_tmp_10)
          OpenAD_tmp_9 = (HX*2.0D00)
          OpenAD_tmp_13 = (PTLAP%v-PBLAP%v)
          OpenAD_tmp_11 = (DPDX%v*OpenAD_tmp_13)
          OpenAD_tmp_12 = (HY*2.0D00)
          OpenAD_tmp_7 = ((OpenAD_tmp_8/OpenAD_tmp_9)-(OpenAD_tmp_11/Ope
     +nAD_tmp_12))
          FVEC(INT(K))%v = ((OpenAD_tmp_5/HY2)+(OpenAD_tmp_6/HX2)-R*Open
     +AD_tmp_7)
          OpenAD_lin_6 = (INT(1_w2f__i8)/HY2)
          OpenAD_lin_9 = (INT(1_w2f__i8)/HX2)
          OpenAD_lin_16 = OpenAD_tmp_10
          OpenAD_lin_17 = DPDY%v
          OpenAD_lin_14 = (INT(1_w2f__i8)/OpenAD_tmp_9)
          OpenAD_lin_20 = OpenAD_tmp_13
          OpenAD_lin_21 = DPDX%v
          OpenAD_lin_18 = (INT(1_w2f__i8)/OpenAD_tmp_12)
          OpenAD_lin_13 = R
          OpenAD_acc_0 = (OpenAD_lin_13*INT((-1_w2f__i8)))
          OpenAD_acc_1 = (INT((-1_w2f__i8))*OpenAD_acc_0)
          OpenAD_acc_2 = (OpenAD_lin_20*OpenAD_lin_18*OpenAD_acc_1)
          OpenAD_acc_3 = (OpenAD_lin_21*OpenAD_lin_18*OpenAD_acc_1)
          OpenAD_acc_4 = (OpenAD_lin_16*OpenAD_lin_14*OpenAD_acc_0)
          OpenAD_acc_5 = (OpenAD_lin_17*OpenAD_lin_14*OpenAD_acc_0)
          double_tape(double_tape_pointer) = OpenAD_acc_2
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_3
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_4
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_5
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_6
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_9
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_24 = (INT(OpenAD_Symbol_24)+INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_24
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_23 = (INT(OpenAD_Symbol_23)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_23
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_7 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_8 = 1
      do while (INT(OpenAD_Symbol_8).LE.INT(OpenAD_Symbol_7))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_9 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_10 = 1
        do while (INT(OpenAD_Symbol_10).LE.INT(OpenAD_Symbol_9))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_114 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_115 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_116 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_117 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_118 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_119 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_120 = double_tape(double_tape_pointer)
          OpenAD_prop_6%d = OpenAD_prop_6%d+FVEC(INT(OpenAD_Symbol_114))
     +%d*(OpenAD_Symbol_115)
          OpenAD_prop_5%d = OpenAD_prop_5%d+FVEC(INT(OpenAD_Symbol_114))
     +%d*(OpenAD_Symbol_116)
          OpenAD_prop_3%d = OpenAD_prop_3%d+FVEC(INT(OpenAD_Symbol_114))
     +%d*(OpenAD_Symbol_117)
          DPDY%d = DPDY%d+FVEC(INT(OpenAD_Symbol_114))%d*(OpenAD_Symbol_
     +118)
          OpenAD_prop_4%d = OpenAD_prop_4%d+FVEC(INT(OpenAD_Symbol_114))
     +%d*(OpenAD_Symbol_119)
          DPDX%d = DPDX%d+FVEC(INT(OpenAD_Symbol_114))%d*(OpenAD_Symbol_
     +120)
          FVEC(INT(OpenAD_Symbol_114))%d = 0.0d0
          PLAP%d = PLAP%d+OpenAD_prop_6%d*(-2.0D00)
          PRLAP%d = PRLAP%d+OpenAD_prop_6%d
          PLLAP%d = PLLAP%d+OpenAD_prop_6%d
          OpenAD_prop_6%d = 0.0d0
          PLAP%d = PLAP%d+OpenAD_prop_5%d*(-2.0D00)
          PTLAP%d = PTLAP%d+OpenAD_prop_5%d
          PBLAP%d = PBLAP%d+OpenAD_prop_5%d
          OpenAD_prop_5%d = 0.0d0
          PBLAP%d = PBLAP%d-OpenAD_prop_4%d
          PTLAP%d = PTLAP%d+OpenAD_prop_4%d
          OpenAD_prop_4%d = 0.0d0
          PLLAP%d = PLLAP%d-OpenAD_prop_3%d
          PRLAP%d = PRLAP%d+OpenAD_prop_3%d
          OpenAD_prop_3%d = 0.0d0
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_121 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_122 = double_tape(double_tape_pointer)
          OpenAD_prop_2%d = OpenAD_prop_2%d+DPDX%d*(OpenAD_Symbol_121)
          DPDX%d = 0.0d0
          OpenAD_prop_1%d = OpenAD_prop_1%d+DPDY%d*(OpenAD_Symbol_122)
          DPDY%d = 0.0d0
          PL%d = PL%d-OpenAD_prop_2%d
          PR%d = PR%d+OpenAD_prop_2%d
          OpenAD_prop_2%d = 0.0d0
          PB%d = PB%d-OpenAD_prop_1%d
          PT%d = PT%d+OpenAD_prop_1%d
          OpenAD_prop_1%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_11 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_11.ne.0) THEN
            PTR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_123 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_123))%d = X(INT(OpenAD_Symbol_123))%d+PT
     +R%d
            PTR%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_12 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_12.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_113 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_113))%d = X(INT(OpenAD_Symbol_113))%d+PT
     +%d
            PT%d = 0.0d0
            PTT%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_13 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_13.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_124 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_124))%d = X(INT(OpenAD_Symbol_124))%d+
     +PTT%d
              PTT%d = 0.0d0
              PT%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_125 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_125))%d = X(INT(OpenAD_Symbol_125))%d+
     +PTT%d
              PTT%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_126 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_126))%d = X(INT(OpenAD_Symbol_126))%d+
     +PT%d
              PT%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_14 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_14.ne.0) THEN
            PTL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_127 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_127))%d = X(INT(OpenAD_Symbol_127))%d+PT
     +L%d
            PTL%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_15 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_15.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_112 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_112))%d = X(INT(OpenAD_Symbol_112))%d+PR
     +%d
            PR%d = 0.0d0
            PRR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_16 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_16.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_128 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_128))%d = X(INT(OpenAD_Symbol_128))%d+
     +PRR%d
              PRR%d = 0.0d0
              PR%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_129 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_129))%d = X(INT(OpenAD_Symbol_129))%d+
     +PRR%d
              PRR%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_130 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_130))%d = X(INT(OpenAD_Symbol_130))%d+
     +PR%d
              PR%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_111 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_111))%d = X(INT(OpenAD_Symbol_111))%d+P%d
          P%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_17 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_17.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_110 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_110))%d = X(INT(OpenAD_Symbol_110))%d+PL
     +L%d
            PLL%d = 0.0d0
            PL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_18 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_18.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_131 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_131))%d = X(INT(OpenAD_Symbol_131))%d+
     +PL%d
              PL%d = 0.0d0
              PLL%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_132 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_132))%d = X(INT(OpenAD_Symbol_132))%d+
     +PLL%d
              PLL%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_133 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_133))%d = X(INT(OpenAD_Symbol_133))%d+
     +PL%d
              PL%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_19 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_19.ne.0) THEN
            PBR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_134 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_134))%d = X(INT(OpenAD_Symbol_134))%d+PB
     +R%d
            PBR%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_20 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_20.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_109 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_109))%d = X(INT(OpenAD_Symbol_109))%d+PB
     +B%d
            PBB%d = 0.0d0
            PB%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_21 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_21.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_135 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_135))%d = X(INT(OpenAD_Symbol_135))%d+
     +PB%d
              PB%d = 0.0d0
              PBB%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_136 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_136))%d = X(INT(OpenAD_Symbol_136))%d+
     +PBB%d
              PBB%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_137 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_137))%d = X(INT(OpenAD_Symbol_137))%d+
     +PB%d
              PB%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_22 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_22.ne.0) THEN
            PBL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_138 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_138))%d = X(INT(OpenAD_Symbol_138))%d+PB
     +L%d
            PBL%d = 0.0d0
          ENDIF
          OpenAD_Symbol_10 = INT(OpenAD_Symbol_10)+1
        END DO
        OpenAD_Symbol_8 = INT(OpenAD_Symbol_8)+1
      END DO
          end if
        end subroutine foo
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
      subroutine bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,H
     +X2,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          use OAD_tape
          use OAD_rev
C         ! original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster
      use w2f__types
      use OAD_active
      implicit none
C
C     **** Global Variables & Derived Type Definitions ****
C
      real(w2f__8) :: OpenAD_lin_23
      real(w2f__8) :: OpenAD_lin_26
      real(w2f__8) :: OpenAD_lin_29
      real(w2f__8) :: OpenAD_lin_32
      real(w2f__8) :: OpenAD_lin_35
      real(w2f__8) :: OpenAD_lin_38
      real(w2f__8) :: OpenAD_lin_41
      real(w2f__8) :: OpenAD_lin_44
      real(w2f__8) :: OpenAD_lin_47
      real(w2f__8) :: OpenAD_lin_50
      type(active) :: OpenAD_prop_10
      type(active) :: OpenAD_prop_11
      type(active) :: OpenAD_prop_12
      type(active) :: OpenAD_prop_13
      type(active) :: OpenAD_prop_14
      type(active) :: OpenAD_prop_15
      type(active) :: OpenAD_prop_16
      type(active) :: OpenAD_prop_7
      type(active) :: OpenAD_prop_8
      type(active) :: OpenAD_prop_9
      real(w2f__8) :: OpenAD_tmp_14
      real(w2f__8) :: OpenAD_tmp_15
      real(w2f__8) :: OpenAD_tmp_16
      real(w2f__8) :: OpenAD_tmp_17
      real(w2f__8) :: OpenAD_tmp_18
      real(w2f__8) :: OpenAD_tmp_19
      real(w2f__8) :: OpenAD_tmp_20
      real(w2f__8) :: OpenAD_tmp_21
      real(w2f__8) :: OpenAD_tmp_22
      real(w2f__8) :: OpenAD_tmp_23
C
C     **** Parameters and Result ****
C
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PB
      type(active) :: PBR
      type(active) :: PLL
      type(active) :: PL
      type(active) :: P
      type(active) :: PR
      type(active) :: PRR
      type(active) :: PTL
      type(active) :: PT
      type(active) :: PTR
      type(active) :: PTT
      real(w2f__8) :: HY2
      real(w2f__8) :: HX2
      type(active) :: PLAP
      type(active) :: PBLAP
      type(active) :: PLLAP
      type(active) :: PRLAP
      type(active) :: PTLAP
C
C     **** Local Variables and Functions ****
C
      real(w2f__8) :: FOUR
      parameter (FOUR=4.0D00)
      real(w2f__8) :: ONE
      parameter (ONE=1.0D00)
      real(w2f__8) :: THREE
      parameter (THREE=3.0D00)
      real(w2f__8) :: TWO
      parameter (TWO=2.0D00)
      real(w2f__8) :: ZERO
      parameter (ZERO=0.0D00)
      real(w2f__8) :: OpenAD_Symbol_139
      real(w2f__8) :: OpenAD_Symbol_140
      real(w2f__8) :: OpenAD_Symbol_141
      real(w2f__8) :: OpenAD_Symbol_142
      real(w2f__8) :: OpenAD_Symbol_143
      real(w2f__8) :: OpenAD_Symbol_144
      real(w2f__8) :: OpenAD_Symbol_145
      real(w2f__8) :: OpenAD_Symbol_146
      real(w2f__8) :: OpenAD_Symbol_147
      real(w2f__8) :: OpenAD_Symbol_148
C
C     **** Statements ****
C
           integer :: iaddr
          external iaddr
C$OPENAD XXX Template ad_template.f
          if (our_rev_mode%plain) then
C original function
      PBLAP%v = (((PBB%v+P%v-PB%v*2.0D00)/HY2)+((PBL%v+PBR%v-PB%v*2.0D00
     +)/HX2))
      PLLAP%v = (((PBL%v+PTL%v-PL%v*2.0D00)/HY2)+((PLL%v+P%v-PL%v*2.0D00
     +)/HX2))
      PLAP%v = (((PB%v+PT%v-P%v*2.0D00)/HY2)+((PL%v+PR%v-P%v*2.0D00)/HX2
     +))
      PRLAP%v = (((PBR%v+PTR%v-PR%v*2.0D00)/HY2)+((P%v+PRR%v-PR%v*2.0D00
     +)/HX2))
      PTLAP%v = (((P%v+PTT%v-PT%v*2.0D00)/HY2)+((PTL%v+PTR%v-PT%v*2.0D00
     +)/HX2))
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_tmp_14 = (PBB%v+P%v-PB%v*2.0D00)
      OpenAD_tmp_15 = (PBL%v+PBR%v-PB%v*2.0D00)
      PBLAP%v = ((OpenAD_tmp_14/HY2)+(OpenAD_tmp_15/HX2))
      OpenAD_lin_23 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_26 = (INT(1_w2f__i8)/HX2)
      OpenAD_tmp_16 = (PBL%v+PTL%v-PL%v*2.0D00)
      OpenAD_tmp_17 = (PLL%v+P%v-PL%v*2.0D00)
      PLLAP%v = ((OpenAD_tmp_16/HY2)+(OpenAD_tmp_17/HX2))
      OpenAD_lin_29 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_32 = (INT(1_w2f__i8)/HX2)
      OpenAD_tmp_18 = (PB%v+PT%v-P%v*2.0D00)
      OpenAD_tmp_19 = (PL%v+PR%v-P%v*2.0D00)
      PLAP%v = ((OpenAD_tmp_18/HY2)+(OpenAD_tmp_19/HX2))
      OpenAD_lin_35 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_38 = (INT(1_w2f__i8)/HX2)
      OpenAD_tmp_20 = (PBR%v+PTR%v-PR%v*2.0D00)
      OpenAD_tmp_21 = (P%v+PRR%v-PR%v*2.0D00)
      PRLAP%v = ((OpenAD_tmp_20/HY2)+(OpenAD_tmp_21/HX2))
      OpenAD_lin_41 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_44 = (INT(1_w2f__i8)/HX2)
      OpenAD_tmp_22 = (P%v+PTT%v-PT%v*2.0D00)
      OpenAD_tmp_23 = (PTL%v+PTR%v-PT%v*2.0D00)
      PTLAP%v = ((OpenAD_tmp_22/HY2)+(OpenAD_tmp_23/HX2))
      OpenAD_lin_47 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_50 = (INT(1_w2f__i8)/HX2)
      double_tape(double_tape_pointer) = OpenAD_lin_23
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_26
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_29
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_32
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_35
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_38
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_41
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_44
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_47
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_50
      double_tape_pointer = double_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_139 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_140 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_141 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_142 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_143 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_144 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_145 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_146 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_147 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_148 = double_tape(double_tape_pointer)
      OpenAD_prop_16%d = OpenAD_prop_16%d+PTLAP%d*(OpenAD_Symbol_139)
      OpenAD_prop_15%d = OpenAD_prop_15%d+PTLAP%d*(OpenAD_Symbol_140)
      PTLAP%d = 0.0d0
      OpenAD_prop_14%d = OpenAD_prop_14%d+PRLAP%d*(OpenAD_Symbol_141)
      OpenAD_prop_13%d = OpenAD_prop_13%d+PRLAP%d*(OpenAD_Symbol_142)
      PRLAP%d = 0.0d0
      OpenAD_prop_12%d = OpenAD_prop_12%d+PLAP%d*(OpenAD_Symbol_143)
      OpenAD_prop_11%d = OpenAD_prop_11%d+PLAP%d*(OpenAD_Symbol_144)
      PLAP%d = 0.0d0
      OpenAD_prop_10%d = OpenAD_prop_10%d+PLLAP%d*(OpenAD_Symbol_145)
      OpenAD_prop_9%d = OpenAD_prop_9%d+PLLAP%d*(OpenAD_Symbol_146)
      PLLAP%d = 0.0d0
      OpenAD_prop_8%d = OpenAD_prop_8%d+PBLAP%d*(OpenAD_Symbol_147)
      OpenAD_prop_7%d = OpenAD_prop_7%d+PBLAP%d*(OpenAD_Symbol_148)
      PBLAP%d = 0.0d0
      PT%d = PT%d+OpenAD_prop_16%d*(-2.0D00)
      PTR%d = PTR%d+OpenAD_prop_16%d
      PTL%d = PTL%d+OpenAD_prop_16%d
      OpenAD_prop_16%d = 0.0d0
      PT%d = PT%d+OpenAD_prop_15%d*(-2.0D00)
      PTT%d = PTT%d+OpenAD_prop_15%d
      P%d = P%d+OpenAD_prop_15%d
      OpenAD_prop_15%d = 0.0d0
      PR%d = PR%d+OpenAD_prop_14%d*(-2.0D00)
      PRR%d = PRR%d+OpenAD_prop_14%d
      P%d = P%d+OpenAD_prop_14%d
      OpenAD_prop_14%d = 0.0d0
      PR%d = PR%d+OpenAD_prop_13%d*(-2.0D00)
      PTR%d = PTR%d+OpenAD_prop_13%d
      PBR%d = PBR%d+OpenAD_prop_13%d
      OpenAD_prop_13%d = 0.0d0
      P%d = P%d+OpenAD_prop_12%d*(-2.0D00)
      PR%d = PR%d+OpenAD_prop_12%d
      PL%d = PL%d+OpenAD_prop_12%d
      OpenAD_prop_12%d = 0.0d0
      P%d = P%d+OpenAD_prop_11%d*(-2.0D00)
      PT%d = PT%d+OpenAD_prop_11%d
      PB%d = PB%d+OpenAD_prop_11%d
      OpenAD_prop_11%d = 0.0d0
      PL%d = PL%d+OpenAD_prop_10%d*(-2.0D00)
      P%d = P%d+OpenAD_prop_10%d
      PLL%d = PLL%d+OpenAD_prop_10%d
      OpenAD_prop_10%d = 0.0d0
      PL%d = PL%d+OpenAD_prop_9%d*(-2.0D00)
      PTL%d = PTL%d+OpenAD_prop_9%d
      PBL%d = PBL%d+OpenAD_prop_9%d
      OpenAD_prop_9%d = 0.0d0
      PB%d = PB%d+OpenAD_prop_8%d*(-2.0D00)
      PBR%d = PBR%d+OpenAD_prop_8%d
      PBL%d = PBL%d+OpenAD_prop_8%d
      OpenAD_prop_8%d = 0.0d0
      PB%d = PB%d+OpenAD_prop_7%d*(-2.0D00)
      P%d = P%d+OpenAD_prop_7%d
      PBB%d = PBB%d+OpenAD_prop_7%d
      OpenAD_prop_7%d = 0.0d0
          end if
        end subroutine bar
