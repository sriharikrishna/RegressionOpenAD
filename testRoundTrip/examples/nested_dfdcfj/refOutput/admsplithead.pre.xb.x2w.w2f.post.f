C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
C
C$OPENAD XXX File_start [head.f]
      SUBROUTINE head(NX, NY, X, FVEC, R)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use oad_intrinsics
      use oad_intrinsics
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_0
      INTEGER(w2f__i8) OpenAD_Symbol_1
      INTEGER(w2f__i8) OpenAD_Symbol_2
      INTEGER(w2f__i8) OpenAD_Symbol_3
      INTEGER(w2f__i8) OpenAD_Symbol_4
      INTEGER(w2f__i8) OpenAD_Symbol_5
C
C     **** Parameters and Result ****
C
      INTEGER(w2f__i4) NX
      INTEGER(w2f__i4) NY
      type(active) :: X(1:INT((NX*NY)))
      type(active) :: FVEC(1:INT((NX*NY)))
      REAL(w2f__8) R
C
C     **** Local Variables and Functions ****
C
      EXTERNAL foo
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      REAL(w2f__8) HX
      REAL(w2f__8) HX2
      REAL(w2f__8) HY
      REAL(w2f__8) HY2
      INTEGER(w2f__i4) K
      INTEGER(w2f__i4) N
      REAL(w2f__8) NXP1
      REAL(w2f__8) NYP1
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
      INTEGER(w2f__i8) OpenAD_Symbol_106
      REAL(w2f__8) OpenAD_Symbol_107
      REAL(w2f__8) OpenAD_dly_0
      REAL(w2f__8) OpenAD_lin_0
      REAL(w2f__8) OpenAD_lin_1
      type(active) :: OpenAD_prp_0


          integer iaddr
          external iaddr
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(FVEC)
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      N = (NX * NY)
      NXP1 = (NX + 1)
      NYP1 = (NY + 1)
      HX = (1.0D00 / NXP1)
      HY = (1.0D00 / NYP1)
      HY2 = (HY * HY)
      HX2 = (HX * HX)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
      DO K = 1,N,1
        FVEC(INT(K))%v = (FVEC(K)%v*HX2*HY2)
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      N = (NX*NY)
      NXP1 = (NX+1)
      NYP1 = (NY+1)
      HX = (1.0D00/NXP1)
      HY = (1.0D00/NYP1)
      HY2 = (HY*HY)
      HX2 = (HX*HX)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
      integer_tape(integer_tape_pointer) = NX
      integer_tape_pointer = integer_tape_pointer+1
      integer_tape(integer_tape_pointer) = NY
      integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_2 = 0_w2f__i8
      DO K = 1,N,1
        OpenAD_lin_0 = (HX2*HY2)
        OpenAD_dly_0 = (FVEC(K)%v*OpenAD_lin_0)
        OpenAD_lin_1 = OpenAD_lin_0
        FVEC(INT(K))%v = OpenAD_dly_0
        double_tape(double_tape_pointer) = OpenAD_lin_1
        double_tape_pointer = double_tape_pointer+1
        integer_tape(integer_tape_pointer) = K
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_2 = (INT(OpenAD_Symbol_2)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_2
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_0 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_1 = 1
      do while (INT(OpenAD_Symbol_1).LE.INT(OpenAD_Symbol_0))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_106 = integer_tape(integer_tape_pointer)
        double_tape_pointer = double_tape_pointer-1
        OpenAD_Symbol_107 = double_tape(double_tape_pointer)
        OpenAD_prp_0%d = OpenAD_prp_0%d+FVEC(INT(OpenAD_Symbol_106))%d*(
     +OpenAD_Symbol_107)
        FVEC(INT(OpenAD_Symbol_106))%d = 0.0d0
        FVEC(INT(OpenAD_Symbol_106))%d = FVEC(INT(OpenAD_Symbol_106))%d+
     +OpenAD_prp_0%d
        OpenAD_prp_0%d = 0.0d0
        OpenAD_Symbol_1 = INT(OpenAD_Symbol_1)+1
      END DO
      integer_tape_pointer = integer_tape_pointer-1
      NY = integer_tape(integer_tape_pointer)
      integer_tape_pointer = integer_tape_pointer-1
      NX = integer_tape(integer_tape_pointer)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
          end if
        end subroutine head
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE foo(NX, NY, X, FVEC, R, N, HX, HY, HY2, HX2)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use oad_intrinsics
      use oad_intrinsics
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      INTEGER(w2f__i8) OpenAD_Symbol_10
      INTEGER(w2f__i8) OpenAD_Symbol_11
      INTEGER(w2f__i8) OpenAD_Symbol_12
      INTEGER(w2f__i8) OpenAD_Symbol_13
      INTEGER(w2f__i8) OpenAD_Symbol_14
      INTEGER(w2f__i8) OpenAD_Symbol_15
      INTEGER(w2f__i8) OpenAD_Symbol_16
      INTEGER(w2f__i8) OpenAD_Symbol_17
      INTEGER(w2f__i8) OpenAD_Symbol_18
      INTEGER(w2f__i8) OpenAD_Symbol_19
      INTEGER(w2f__i8) OpenAD_Symbol_20
      INTEGER(w2f__i8) OpenAD_Symbol_21
      INTEGER(w2f__i8) OpenAD_Symbol_22
      INTEGER(w2f__i8) OpenAD_Symbol_23
      INTEGER(w2f__i8) OpenAD_Symbol_24
      INTEGER(w2f__i8) OpenAD_Symbol_25
      INTEGER(w2f__i8) OpenAD_Symbol_26
      INTEGER(w2f__i8) OpenAD_Symbol_27
      INTEGER(w2f__i8) OpenAD_Symbol_28
      INTEGER(w2f__i8) OpenAD_Symbol_29
      INTEGER(w2f__i8) OpenAD_Symbol_30
      INTEGER(w2f__i8) OpenAD_Symbol_31
      INTEGER(w2f__i8) OpenAD_Symbol_32
      INTEGER(w2f__i8) OpenAD_Symbol_33
      INTEGER(w2f__i8) OpenAD_Symbol_34
      INTEGER(w2f__i8) OpenAD_Symbol_35
      INTEGER(w2f__i8) OpenAD_Symbol_36
      INTEGER(w2f__i8) OpenAD_Symbol_37
      INTEGER(w2f__i8) OpenAD_Symbol_38
      INTEGER(w2f__i8) OpenAD_Symbol_39
      INTEGER(w2f__i8) OpenAD_Symbol_40
      INTEGER(w2f__i8) OpenAD_Symbol_41
      INTEGER(w2f__i8) OpenAD_Symbol_42
      INTEGER(w2f__i8) OpenAD_Symbol_43
      INTEGER(w2f__i8) OpenAD_Symbol_44
      INTEGER(w2f__i8) OpenAD_Symbol_45
      INTEGER(w2f__i8) OpenAD_Symbol_46
      INTEGER(w2f__i8) OpenAD_Symbol_47
      INTEGER(w2f__i8) OpenAD_Symbol_48
      INTEGER(w2f__i8) OpenAD_Symbol_49
      INTEGER(w2f__i8) OpenAD_Symbol_50
      INTEGER(w2f__i8) OpenAD_Symbol_51
      INTEGER(w2f__i8) OpenAD_Symbol_52
      INTEGER(w2f__i8) OpenAD_Symbol_53
      INTEGER(w2f__i8) OpenAD_Symbol_54
      INTEGER(w2f__i8) OpenAD_Symbol_55
      INTEGER(w2f__i8) OpenAD_Symbol_56
      INTEGER(w2f__i8) OpenAD_Symbol_57
      INTEGER(w2f__i8) OpenAD_Symbol_58
      INTEGER(w2f__i8) OpenAD_Symbol_59
      INTEGER(w2f__i8) OpenAD_Symbol_6
      INTEGER(w2f__i8) OpenAD_Symbol_60
      INTEGER(w2f__i8) OpenAD_Symbol_61
      INTEGER(w2f__i8) OpenAD_Symbol_62
      INTEGER(w2f__i8) OpenAD_Symbol_63
      INTEGER(w2f__i8) OpenAD_Symbol_64
      INTEGER(w2f__i8) OpenAD_Symbol_65
      INTEGER(w2f__i8) OpenAD_Symbol_66
      INTEGER(w2f__i8) OpenAD_Symbol_67
      INTEGER(w2f__i8) OpenAD_Symbol_68
      INTEGER(w2f__i8) OpenAD_Symbol_69
      INTEGER(w2f__i8) OpenAD_Symbol_7
      INTEGER(w2f__i8) OpenAD_Symbol_70
      INTEGER(w2f__i8) OpenAD_Symbol_71
      INTEGER(w2f__i8) OpenAD_Symbol_72
      INTEGER(w2f__i8) OpenAD_Symbol_73
      INTEGER(w2f__i8) OpenAD_Symbol_74
      INTEGER(w2f__i8) OpenAD_Symbol_75
      INTEGER(w2f__i8) OpenAD_Symbol_76
      INTEGER(w2f__i8) OpenAD_Symbol_77
      INTEGER(w2f__i8) OpenAD_Symbol_78
      INTEGER(w2f__i8) OpenAD_Symbol_79
      INTEGER(w2f__i8) OpenAD_Symbol_8
      INTEGER(w2f__i8) OpenAD_Symbol_80
      INTEGER(w2f__i8) OpenAD_Symbol_81
      INTEGER(w2f__i8) OpenAD_Symbol_82
      INTEGER(w2f__i8) OpenAD_Symbol_83
      INTEGER(w2f__i8) OpenAD_Symbol_84
      INTEGER(w2f__i8) OpenAD_Symbol_85
      INTEGER(w2f__i8) OpenAD_Symbol_86
      INTEGER(w2f__i8) OpenAD_Symbol_87
      INTEGER(w2f__i8) OpenAD_Symbol_88
      INTEGER(w2f__i8) OpenAD_Symbol_89
      INTEGER(w2f__i8) OpenAD_Symbol_9
C
C     **** Parameters and Result ****
C
      INTEGER(w2f__i4) NX
      INTEGER(w2f__i4) NY
      type(active) :: X(1:INT((NX*NY)))
      type(active) :: FVEC(1:INT((NX*NY)))
      REAL(w2f__8) R
      INTEGER(w2f__i4) N
      REAL(w2f__8) HX
      REAL(w2f__8) HY
      REAL(w2f__8) HY2
      REAL(w2f__8) HX2
C
C     **** Local Variables and Functions ****
C
      EXTERNAL bar
      type(active) :: DPDX
      type(active) :: DPDY
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      INTEGER(w2f__i4) I
      INTEGER(w2f__i4) J
      INTEGER(w2f__i4) K
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      type(active) :: P
      type(active) :: PB
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PBLAP
      type(active) :: PBR
      type(active) :: PL
      type(active) :: PLAP
      type(active) :: PLL
      type(active) :: PLLAP
      type(active) :: PR
      type(active) :: PRLAP
      type(active) :: PRR
      type(active) :: PT
      type(active) :: PTL
      type(active) :: PTLAP
      type(active) :: PTR
      type(active) :: PTT
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
      INTEGER(w2f__i8) OpenAD_Symbol_100
      INTEGER(w2f__i8) OpenAD_Symbol_101
      INTEGER(w2f__i8) OpenAD_Symbol_102
      INTEGER(w2f__i8) OpenAD_Symbol_103
      INTEGER(w2f__i8) OpenAD_Symbol_104
      INTEGER(w2f__i8) OpenAD_Symbol_105
      INTEGER(w2f__i8) OpenAD_Symbol_108
      INTEGER(w2f__i8) OpenAD_Symbol_109
      INTEGER(w2f__i8) OpenAD_Symbol_110
      INTEGER(w2f__i8) OpenAD_Symbol_111
      INTEGER(w2f__i8) OpenAD_Symbol_112
      INTEGER(w2f__i8) OpenAD_Symbol_113
      REAL(w2f__8) OpenAD_Symbol_114
      REAL(w2f__8) OpenAD_Symbol_115
      REAL(w2f__8) OpenAD_Symbol_116
      REAL(w2f__8) OpenAD_Symbol_117
      REAL(w2f__8) OpenAD_Symbol_118
      REAL(w2f__8) OpenAD_Symbol_119
      REAL(w2f__8) OpenAD_Symbol_120
      REAL(w2f__8) OpenAD_Symbol_121
      INTEGER(w2f__i8) OpenAD_Symbol_122
      INTEGER(w2f__i8) OpenAD_Symbol_123
      INTEGER(w2f__i8) OpenAD_Symbol_124
      INTEGER(w2f__i8) OpenAD_Symbol_125
      INTEGER(w2f__i8) OpenAD_Symbol_126
      INTEGER(w2f__i8) OpenAD_Symbol_127
      INTEGER(w2f__i8) OpenAD_Symbol_128
      INTEGER(w2f__i8) OpenAD_Symbol_129
      INTEGER(w2f__i8) OpenAD_Symbol_130
      INTEGER(w2f__i8) OpenAD_Symbol_131
      INTEGER(w2f__i8) OpenAD_Symbol_132
      INTEGER(w2f__i8) OpenAD_Symbol_133
      INTEGER(w2f__i8) OpenAD_Symbol_134
      INTEGER(w2f__i8) OpenAD_Symbol_135
      INTEGER(w2f__i8) OpenAD_Symbol_136
      INTEGER(w2f__i8) OpenAD_Symbol_137
      INTEGER(w2f__i8) OpenAD_Symbol_90
      INTEGER(w2f__i8) OpenAD_Symbol_91
      INTEGER(w2f__i8) OpenAD_Symbol_92
      INTEGER(w2f__i8) OpenAD_Symbol_93
      INTEGER(w2f__i8) OpenAD_Symbol_94
      INTEGER(w2f__i8) OpenAD_Symbol_95
      INTEGER(w2f__i8) OpenAD_Symbol_96
      INTEGER(w2f__i8) OpenAD_Symbol_97
      INTEGER(w2f__i8) OpenAD_Symbol_98
      INTEGER(w2f__i8) OpenAD_Symbol_99
      REAL(w2f__8) OpenAD_acc_0
      REAL(w2f__8) OpenAD_acc_1
      REAL(w2f__8) OpenAD_acc_2
      REAL(w2f__8) OpenAD_acc_3
      REAL(w2f__8) OpenAD_acc_4
      REAL(w2f__8) OpenAD_acc_5
      REAL(w2f__8) OpenAD_lin_11
      REAL(w2f__8) OpenAD_lin_12
      REAL(w2f__8) OpenAD_lin_15
      REAL(w2f__8) OpenAD_lin_16
      REAL(w2f__8) OpenAD_lin_19
      REAL(w2f__8) OpenAD_lin_21
      REAL(w2f__8) OpenAD_lin_22
      REAL(w2f__8) OpenAD_lin_23
      REAL(w2f__8) OpenAD_lin_24
      REAL(w2f__8) OpenAD_lin_26
      REAL(w2f__8) OpenAD_lin_27
      REAL(w2f__8) OpenAD_lin_28
      REAL(w2f__8) OpenAD_lin_29
      REAL(w2f__8) OpenAD_lin_3
      REAL(w2f__8) OpenAD_lin_30
      REAL(w2f__8) OpenAD_lin_31
      REAL(w2f__8) OpenAD_lin_33
      REAL(w2f__8) OpenAD_lin_34
      REAL(w2f__8) OpenAD_lin_35
      REAL(w2f__8) OpenAD_lin_4
      REAL(w2f__8) OpenAD_lin_5
      REAL(w2f__8) OpenAD_lin_7
      REAL(w2f__8) OpenAD_lin_8
      REAL(w2f__8) OpenAD_lin_9
      type(active) :: OpenAD_prp_1
      type(active) :: OpenAD_prp_2
      type(active) :: OpenAD_prp_3
      type(active) :: OpenAD_prp_4
      type(active) :: OpenAD_prp_5
      type(active) :: OpenAD_prp_6


          integer iaddr
          external iaddr
C
C     **** Statements ****
C

         if (our_rev_mode%plain) then
C original function
C$OPENAD XXX Template ad_template.f
      DO I = 1, NY, 1
        DO J = 1, NX, 1
          K = (J + NX *(I +(-1)))
          IF((I .eq. 1) .OR.(J .eq. 1)) THEN
            PBL%v = 0.0D00
          ELSE
            PBL%v = X(K-NX+(-1))%v
          ENDIF
          IF (I.eq.1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
          ELSE
            IF (I.eq.2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
            ENDIF
          ENDIF
          IF ((NX.eq.J).OR.(I.eq.1)) THEN
            PBR%v = 0.0D00
          ELSE
            PBR%v = X(K-NX+1)%v
          ENDIF
          IF (J.eq.1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
          ELSE
            IF (J.eq.2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
            ENDIF
          ENDIF
          P%v = X(K)%v
          IF (J.eq.(NX+(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
          ELSE
            IF (NX.eq.J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
            ENDIF
          ENDIF
          IF ((NY.eq.I).OR.(J.eq.1)) THEN
            PTL%v = 0.0D00
          ELSE
            PTL%v = X(NX+K+(-1))%v
          ENDIF
          IF (I.eq.(NY+(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
          ELSE
            IF (NY.eq.I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
            ENDIF
          ENDIF
          IF ((NX.eq.J).OR.(NY.eq.I)) THEN
            PTR%v = 0.0D00
          ELSE
            PTR%v = X(NX+K+1)%v
          ENDIF
          DPDY%v = ((PT%v-PB%v)/(HY*2.0D00))
          DPDX%v = ((PR%v-PL%v)/(HX*2.0D00))
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          FVEC(INT(K))%v = (((PBLAP%v+PTLAP%v-PLAP%v*2.0D00)/HY2)+((PLLA
     +P%v+PRLAP%v-PLAP%v*2.0D00)/HX2)-R*(((DPDY%v*(PRLAP%v-PLLAP%v))/(HX
     +*2.0D00))-((DPDX%v*(PTLAP%v-PBLAP%v))/(HY*2.0D00))))
        END DO
      END DO
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_22 = 0_w2f__i8
      DO I = 1,NY,1
        OpenAD_Symbol_23 = 0_w2f__i8
        DO J = 1,NX,1
          K = (J+NX*(I+(-1)))
          IF ((I.eq.1).OR.(J.eq.1)) THEN
            PBL%v = 0.0D00
            OpenAD_Symbol_24 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_24
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PBL%v = X(K-NX+(-1))%v
            OpenAD_Symbol_105 = (K-NX+(-1))
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_105
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_25 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_25
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (I.eq.1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
            integer_tape(integer_tape_pointer) = K
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_28 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_28
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (I.eq.2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
              OpenAD_Symbol_102 = (K-NX)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_102
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_26 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_26
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
              OpenAD_Symbol_103 = (K-NX)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_103
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_104 = (K-NX*2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_104
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_27 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_27
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_29 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_29
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NX.eq.J).OR.(I.eq.1)) THEN
            PBR%v = 0.0D00
            OpenAD_Symbol_30 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_30
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PBR%v = X(K-NX+1)%v
            OpenAD_Symbol_101 = (K-NX+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_101
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_31 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_31
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (J.eq.1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
            integer_tape(integer_tape_pointer) = K
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_34 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_34
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (J.eq.2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
              OpenAD_Symbol_98 = (K+(-1))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_98
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_32 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_32
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
              OpenAD_Symbol_99 = (K+(-1))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_99
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_100 = (K+(-2))
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_100
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_33 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_33
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_35 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_35
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          P%v = X(K)%v
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          IF (J.eq.(NX+(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
            OpenAD_Symbol_90 = (K+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_90
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_38 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_38
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (NX.eq.J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
              integer_tape(integer_tape_pointer) = K
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_36 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_36
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
              OpenAD_Symbol_96 = (K+1)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_96
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_97 = (K+2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_97
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_37 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_37
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_39 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_39
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NY.eq.I).OR.(J.eq.1)) THEN
            PTL%v = 0.0D00
            OpenAD_Symbol_40 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_40
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PTL%v = X(NX+K+(-1))%v
            OpenAD_Symbol_95 = (NX+K+(-1))
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_95
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_41 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_41
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF (I.eq.(NY+(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
            OpenAD_Symbol_91 = (NX+K)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_91
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_44 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_44
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF (NY.eq.I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
              integer_tape(integer_tape_pointer) = K
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_42 = 1_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_42
              integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
              OpenAD_Symbol_93 = (NX+K)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_93
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_94 = (K+NX*2)
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_94
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_43 = 0_w2f__i8
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_43
              integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_45 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_45
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF ((NX.eq.J).OR.(NY.eq.I)) THEN
            PTR%v = 0.0D00
            OpenAD_Symbol_46 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_46
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PTR%v = X(NX+K+1)%v
            OpenAD_Symbol_92 = (NX+K+1)
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_92
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_47 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_47
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          OpenAD_lin_3 = (PT%v-PB%v)
          OpenAD_lin_4 = (HY*2.0D00)
          DPDY%v = (OpenAD_lin_3/OpenAD_lin_4)
          OpenAD_lin_5 = (INT(1_w2f__i8)/OpenAD_lin_4)
          OpenAD_lin_7 = (PR%v-PL%v)
          OpenAD_lin_8 = (HX*2.0D00)
          DPDX%v = (OpenAD_lin_7/OpenAD_lin_8)
          OpenAD_lin_9 = (INT(1_w2f__i8)/OpenAD_lin_8)
          double_tape(double_tape_pointer) = OpenAD_lin_5
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_9
          double_tape_pointer = double_tape_pointer+1
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          OpenAD_lin_11 = (PBLAP%v+PTLAP%v-PLAP%v*2.0D00)
          OpenAD_lin_15 = (PLLAP%v+PRLAP%v-PLAP%v*2.0D00)
          OpenAD_lin_26 = (PRLAP%v-PLLAP%v)
          OpenAD_lin_22 = (DPDY%v*OpenAD_lin_26)
          OpenAD_lin_23 = (HX*2.0D00)
          OpenAD_lin_33 = (PTLAP%v-PBLAP%v)
          OpenAD_lin_29 = (DPDX%v*OpenAD_lin_33)
          OpenAD_lin_30 = (HY*2.0D00)
          OpenAD_lin_19 = ((OpenAD_lin_22/OpenAD_lin_23)-(OpenAD_lin_29/
     +OpenAD_lin_30))
          FVEC(INT(K))%v = ((OpenAD_lin_11/HY2)+(OpenAD_lin_15/HX2)-R*Op
     +enAD_lin_19)
          OpenAD_lin_12 = (INT(1_w2f__i8)/HY2)
          OpenAD_lin_16 = (INT(1_w2f__i8)/HX2)
          OpenAD_lin_27 = OpenAD_lin_26
          OpenAD_lin_28 = DPDY%v
          OpenAD_lin_24 = (INT(1_w2f__i8)/OpenAD_lin_23)
          OpenAD_lin_34 = OpenAD_lin_33
          OpenAD_lin_35 = DPDX%v
          OpenAD_lin_31 = (INT(1_w2f__i8)/OpenAD_lin_30)
          OpenAD_lin_21 = R
          OpenAD_acc_0 = (OpenAD_lin_21*INT((-1_w2f__i8)))
          OpenAD_acc_1 = (INT((-1_w2f__i8))*OpenAD_acc_0)
          OpenAD_acc_2 = (OpenAD_lin_34*OpenAD_lin_31*OpenAD_acc_1)
          OpenAD_acc_3 = (OpenAD_lin_35*OpenAD_lin_31*OpenAD_acc_1)
          OpenAD_acc_4 = (OpenAD_lin_27*OpenAD_lin_24*OpenAD_acc_0)
          OpenAD_acc_5 = (OpenAD_lin_28*OpenAD_lin_24*OpenAD_acc_0)
          double_tape(double_tape_pointer) = OpenAD_acc_2
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_3
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_4
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_5
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_12
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_16
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_23 = (INT(OpenAD_Symbol_23)+INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_23
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_22 = (INT(OpenAD_Symbol_22)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_22
      integer_tape_pointer = integer_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_6 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_7 = 1
      do while (INT(OpenAD_Symbol_7).LE.INT(OpenAD_Symbol_6))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_8 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_9 = 1
        do while (INT(OpenAD_Symbol_9).LE.INT(OpenAD_Symbol_8))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_113 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_114 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_115 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_116 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_117 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_118 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_119 = double_tape(double_tape_pointer)
          OpenAD_prp_6%d = OpenAD_prp_6%d+FVEC(INT(OpenAD_Symbol_113))%d
     +*(OpenAD_Symbol_114)
          OpenAD_prp_5%d = OpenAD_prp_5%d+FVEC(INT(OpenAD_Symbol_113))%d
     +*(OpenAD_Symbol_115)
          OpenAD_prp_3%d = OpenAD_prp_3%d+FVEC(INT(OpenAD_Symbol_113))%d
     +*(OpenAD_Symbol_116)
          DPDY%d = DPDY%d+FVEC(INT(OpenAD_Symbol_113))%d*(OpenAD_Symbol_
     +117)
          OpenAD_prp_4%d = OpenAD_prp_4%d+FVEC(INT(OpenAD_Symbol_113))%d
     +*(OpenAD_Symbol_118)
          DPDX%d = DPDX%d+FVEC(INT(OpenAD_Symbol_113))%d*(OpenAD_Symbol_
     +119)
          FVEC(INT(OpenAD_Symbol_113))%d = 0.0d0
          PLAP%d = PLAP%d+OpenAD_prp_6%d*(-2.0D00)
          PRLAP%d = PRLAP%d+OpenAD_prp_6%d
          PLLAP%d = PLLAP%d+OpenAD_prp_6%d
          OpenAD_prp_6%d = 0.0d0
          PLAP%d = PLAP%d+OpenAD_prp_5%d*(-2.0D00)
          PTLAP%d = PTLAP%d+OpenAD_prp_5%d
          PBLAP%d = PBLAP%d+OpenAD_prp_5%d
          OpenAD_prp_5%d = 0.0d0
          PBLAP%d = PBLAP%d-OpenAD_prp_4%d
          PTLAP%d = PTLAP%d+OpenAD_prp_4%d
          OpenAD_prp_4%d = 0.0d0
          PLLAP%d = PLLAP%d-OpenAD_prp_3%d
          PRLAP%d = PRLAP%d+OpenAD_prp_3%d
          OpenAD_prp_3%d = 0.0d0
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_120 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_121 = double_tape(double_tape_pointer)
          OpenAD_prp_2%d = OpenAD_prp_2%d+DPDX%d*(OpenAD_Symbol_120)
          DPDX%d = 0.0d0
          OpenAD_prp_1%d = OpenAD_prp_1%d+DPDY%d*(OpenAD_Symbol_121)
          DPDY%d = 0.0d0
          PL%d = PL%d-OpenAD_prp_2%d
          PR%d = PR%d+OpenAD_prp_2%d
          OpenAD_prp_2%d = 0.0d0
          PB%d = PB%d-OpenAD_prp_1%d
          PT%d = PT%d+OpenAD_prp_1%d
          OpenAD_prp_1%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_10 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_10.ne.0) THEN
            PTR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_122 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_122))%d = X(INT(OpenAD_Symbol_122))%d+PT
     +R%d
            PTR%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_11 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_11.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_112 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_112))%d = X(INT(OpenAD_Symbol_112))%d+PT
     +%d
            PT%d = 0.0d0
            PTT%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_12 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_12.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_123 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_123))%d = X(INT(OpenAD_Symbol_123))%d+
     +PTT%d
              PTT%d = 0.0d0
              PT%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_124 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_124))%d = X(INT(OpenAD_Symbol_124))%d+
     +PTT%d
              PTT%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_125 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_125))%d = X(INT(OpenAD_Symbol_125))%d+
     +PT%d
              PT%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_13 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_13.ne.0) THEN
            PTL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_126 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_126))%d = X(INT(OpenAD_Symbol_126))%d+PT
     +L%d
            PTL%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_14 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_14.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_111 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_111))%d = X(INT(OpenAD_Symbol_111))%d+PR
     +%d
            PR%d = 0.0d0
            PRR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_15 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_15.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_127 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_127))%d = X(INT(OpenAD_Symbol_127))%d+
     +PRR%d
              PRR%d = 0.0d0
              PR%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_128 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_128))%d = X(INT(OpenAD_Symbol_128))%d+
     +PRR%d
              PRR%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_129 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_129))%d = X(INT(OpenAD_Symbol_129))%d+
     +PR%d
              PR%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_110 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_110))%d = X(INT(OpenAD_Symbol_110))%d+P%d
          P%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_16 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_16.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_109 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_109))%d = X(INT(OpenAD_Symbol_109))%d+PL
     +L%d
            PLL%d = 0.0d0
            PL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_17 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_17.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_130 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_130))%d = X(INT(OpenAD_Symbol_130))%d+
     +PL%d
              PL%d = 0.0d0
              PLL%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_131 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_131))%d = X(INT(OpenAD_Symbol_131))%d+
     +PLL%d
              PLL%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_132 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_132))%d = X(INT(OpenAD_Symbol_132))%d+
     +PL%d
              PL%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_18 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_18.ne.0) THEN
            PBR%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_133 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_133))%d = X(INT(OpenAD_Symbol_133))%d+PB
     +R%d
            PBR%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_19 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_19.ne.0) THEN
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_108 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_108))%d = X(INT(OpenAD_Symbol_108))%d+PB
     +B%d
            PBB%d = 0.0d0
            PB%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_20 = integer_tape(integer_tape_pointer)
            IF (OpenAD_Symbol_20.ne.0) THEN
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_134 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_134))%d = X(INT(OpenAD_Symbol_134))%d+
     +PB%d
              PB%d = 0.0d0
              PBB%d = 0.0d0
            ELSE
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_135 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_135))%d = X(INT(OpenAD_Symbol_135))%d+
     +PBB%d
              PBB%d = 0.0d0
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_136 = integer_tape(integer_tape_pointer)
              X(INT(OpenAD_Symbol_136))%d = X(INT(OpenAD_Symbol_136))%d+
     +PB%d
              PB%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_21 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_21.ne.0) THEN
            PBL%d = 0.0d0
          ELSE
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_137 = integer_tape(integer_tape_pointer)
            X(INT(OpenAD_Symbol_137))%d = X(INT(OpenAD_Symbol_137))%d+PB
     +L%d
            PBL%d = 0.0d0
          ENDIF
          OpenAD_Symbol_9 = INT(OpenAD_Symbol_9)+1
        END DO
        OpenAD_Symbol_7 = INT(OpenAD_Symbol_7)+1
      END DO
          end if
        end subroutine foo
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################

      SUBROUTINE bar(PBB, PBL, PB, PBR, PLL, PL, P, PR, PRR, PTL, PT, PT
     +R, PTT, HY2, HX2, PLAP, PBLAP, PLLAP, PRLAP, PTLAP)
          use OAD_tape
          use OAD_rev

C original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster

      use w2f__types
      use OAD_active
      use oad_intrinsics
      use oad_intrinsics
      use oad_intrinsics
      IMPLICIT NONE
C
C     **** Parameters and Result ****
C
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PB
      type(active) :: PBR
      type(active) :: PLL
      type(active) :: PL
      type(active) :: P
      type(active) :: PR
      type(active) :: PRR
      type(active) :: PTL
      type(active) :: PT
      type(active) :: PTR
      type(active) :: PTT
      REAL(w2f__8) HY2
      REAL(w2f__8) HX2
      type(active) :: PLAP
      type(active) :: PBLAP
      type(active) :: PLLAP
      type(active) :: PRLAP
      type(active) :: PTLAP
C
C     **** Local Variables and Functions ****
C
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
      REAL(w2f__8) OpenAD_Symbol_138
      REAL(w2f__8) OpenAD_Symbol_139
      REAL(w2f__8) OpenAD_Symbol_140
      REAL(w2f__8) OpenAD_Symbol_141
      REAL(w2f__8) OpenAD_Symbol_142
      REAL(w2f__8) OpenAD_Symbol_143
      REAL(w2f__8) OpenAD_Symbol_144
      REAL(w2f__8) OpenAD_Symbol_145
      REAL(w2f__8) OpenAD_Symbol_146
      REAL(w2f__8) OpenAD_Symbol_147
      REAL(w2f__8) OpenAD_lin_37
      REAL(w2f__8) OpenAD_lin_38
      REAL(w2f__8) OpenAD_lin_41
      REAL(w2f__8) OpenAD_lin_42
      REAL(w2f__8) OpenAD_lin_45
      REAL(w2f__8) OpenAD_lin_46
      REAL(w2f__8) OpenAD_lin_49
      REAL(w2f__8) OpenAD_lin_50
      REAL(w2f__8) OpenAD_lin_53
      REAL(w2f__8) OpenAD_lin_54
      REAL(w2f__8) OpenAD_lin_57
      REAL(w2f__8) OpenAD_lin_58
      REAL(w2f__8) OpenAD_lin_61
      REAL(w2f__8) OpenAD_lin_62
      REAL(w2f__8) OpenAD_lin_65
      REAL(w2f__8) OpenAD_lin_66
      REAL(w2f__8) OpenAD_lin_69
      REAL(w2f__8) OpenAD_lin_70
      REAL(w2f__8) OpenAD_lin_73
      REAL(w2f__8) OpenAD_lin_74
      type(active) :: OpenAD_prp_10
      type(active) :: OpenAD_prp_11
      type(active) :: OpenAD_prp_12
      type(active) :: OpenAD_prp_13
      type(active) :: OpenAD_prp_14
      type(active) :: OpenAD_prp_15
      type(active) :: OpenAD_prp_16
      type(active) :: OpenAD_prp_7
      type(active) :: OpenAD_prp_8
      type(active) :: OpenAD_prp_9
C
C     **** Statements ****
C


          integer iaddr
          external iaddr
C$OPENAD XXX Template ad_template.f

         if (our_rev_mode%plain) then
C original function
      PBLAP%v = (((PBB%v+P%v-PB%v*2.0D00)/HY2)+((PBL%v+PBR%v-PB%v*2.0D00
     +)/HX2))
      PLLAP%v = (((PBL%v+PTL%v-PL%v*2.0D00)/HY2)+((PLL%v+P%v-PL%v*2.0D00
     +)/HX2))
      PLAP%v = (((PB%v+PT%v-P%v*2.0D00)/HY2)+((PL%v+PR%v-P%v*2.0D00)/HX2
     +))
      PRLAP%v = (((PBR%v+PTR%v-PR%v*2.0D00)/HY2)+((P%v+PRR%v-PR%v*2.0D00
     +)/HX2))
      PTLAP%v = (((P%v+PTT%v-PT%v*2.0D00)/HY2)+((PTL%v+PTR%v-PT%v*2.0D00
     +)/HX2))
          end if
          if (our_rev_mode%tape) then
C taping
C$OPENAD XXX Template ad_template.f
      OpenAD_lin_37 = (PBB%v+P%v-PB%v*2.0D00)
      OpenAD_lin_41 = (PBL%v+PBR%v-PB%v*2.0D00)
      PBLAP%v = ((OpenAD_lin_37/HY2)+(OpenAD_lin_41/HX2))
      OpenAD_lin_38 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_42 = (INT(1_w2f__i8)/HX2)
      OpenAD_lin_45 = (PBL%v+PTL%v-PL%v*2.0D00)
      OpenAD_lin_49 = (PLL%v+P%v-PL%v*2.0D00)
      PLLAP%v = ((OpenAD_lin_45/HY2)+(OpenAD_lin_49/HX2))
      OpenAD_lin_46 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_50 = (INT(1_w2f__i8)/HX2)
      OpenAD_lin_53 = (PB%v+PT%v-P%v*2.0D00)
      OpenAD_lin_57 = (PL%v+PR%v-P%v*2.0D00)
      PLAP%v = ((OpenAD_lin_53/HY2)+(OpenAD_lin_57/HX2))
      OpenAD_lin_54 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_58 = (INT(1_w2f__i8)/HX2)
      OpenAD_lin_61 = (PBR%v+PTR%v-PR%v*2.0D00)
      OpenAD_lin_65 = (P%v+PRR%v-PR%v*2.0D00)
      PRLAP%v = ((OpenAD_lin_61/HY2)+(OpenAD_lin_65/HX2))
      OpenAD_lin_62 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_66 = (INT(1_w2f__i8)/HX2)
      OpenAD_lin_69 = (P%v+PTT%v-PT%v*2.0D00)
      OpenAD_lin_73 = (PTL%v+PTR%v-PT%v*2.0D00)
      PTLAP%v = ((OpenAD_lin_69/HY2)+(OpenAD_lin_73/HX2))
      OpenAD_lin_70 = (INT(1_w2f__i8)/HY2)
      OpenAD_lin_74 = (INT(1_w2f__i8)/HX2)
      double_tape(double_tape_pointer) = OpenAD_lin_38
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_42
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_46
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_50
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_54
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_58
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_62
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_66
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_70
      double_tape_pointer = double_tape_pointer+1
      double_tape(double_tape_pointer) = OpenAD_lin_74
      double_tape_pointer = double_tape_pointer+1
          end if
          if (our_rev_mode%adjoint) then
C adjoint
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_138 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_139 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_140 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_141 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_142 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_143 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_144 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_145 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_146 = double_tape(double_tape_pointer)
      double_tape_pointer = double_tape_pointer-1
      OpenAD_Symbol_147 = double_tape(double_tape_pointer)
      OpenAD_prp_16%d = OpenAD_prp_16%d+PTLAP%d*(OpenAD_Symbol_138)
      OpenAD_prp_15%d = OpenAD_prp_15%d+PTLAP%d*(OpenAD_Symbol_139)
      PTLAP%d = 0.0d0
      OpenAD_prp_14%d = OpenAD_prp_14%d+PRLAP%d*(OpenAD_Symbol_140)
      OpenAD_prp_13%d = OpenAD_prp_13%d+PRLAP%d*(OpenAD_Symbol_141)
      PRLAP%d = 0.0d0
      OpenAD_prp_12%d = OpenAD_prp_12%d+PLAP%d*(OpenAD_Symbol_142)
      OpenAD_prp_11%d = OpenAD_prp_11%d+PLAP%d*(OpenAD_Symbol_143)
      PLAP%d = 0.0d0
      OpenAD_prp_10%d = OpenAD_prp_10%d+PLLAP%d*(OpenAD_Symbol_144)
      OpenAD_prp_9%d = OpenAD_prp_9%d+PLLAP%d*(OpenAD_Symbol_145)
      PLLAP%d = 0.0d0
      OpenAD_prp_8%d = OpenAD_prp_8%d+PBLAP%d*(OpenAD_Symbol_146)
      OpenAD_prp_7%d = OpenAD_prp_7%d+PBLAP%d*(OpenAD_Symbol_147)
      PBLAP%d = 0.0d0
      PT%d = PT%d+OpenAD_prp_16%d*(-2.0D00)
      PTR%d = PTR%d+OpenAD_prp_16%d
      PTL%d = PTL%d+OpenAD_prp_16%d
      OpenAD_prp_16%d = 0.0d0
      PT%d = PT%d+OpenAD_prp_15%d*(-2.0D00)
      PTT%d = PTT%d+OpenAD_prp_15%d
      P%d = P%d+OpenAD_prp_15%d
      OpenAD_prp_15%d = 0.0d0
      PR%d = PR%d+OpenAD_prp_14%d*(-2.0D00)
      PRR%d = PRR%d+OpenAD_prp_14%d
      P%d = P%d+OpenAD_prp_14%d
      OpenAD_prp_14%d = 0.0d0
      PR%d = PR%d+OpenAD_prp_13%d*(-2.0D00)
      PTR%d = PTR%d+OpenAD_prp_13%d
      PBR%d = PBR%d+OpenAD_prp_13%d
      OpenAD_prp_13%d = 0.0d0
      P%d = P%d+OpenAD_prp_12%d*(-2.0D00)
      PR%d = PR%d+OpenAD_prp_12%d
      PL%d = PL%d+OpenAD_prp_12%d
      OpenAD_prp_12%d = 0.0d0
      P%d = P%d+OpenAD_prp_11%d*(-2.0D00)
      PT%d = PT%d+OpenAD_prp_11%d
      PB%d = PB%d+OpenAD_prp_11%d
      OpenAD_prp_11%d = 0.0d0
      PL%d = PL%d+OpenAD_prp_10%d*(-2.0D00)
      P%d = P%d+OpenAD_prp_10%d
      PLL%d = PLL%d+OpenAD_prp_10%d
      OpenAD_prp_10%d = 0.0d0
      PL%d = PL%d+OpenAD_prp_9%d*(-2.0D00)
      PTL%d = PTL%d+OpenAD_prp_9%d
      PBL%d = PBL%d+OpenAD_prp_9%d
      OpenAD_prp_9%d = 0.0d0
      PB%d = PB%d+OpenAD_prp_8%d*(-2.0D00)
      PBR%d = PBR%d+OpenAD_prp_8%d
      PBL%d = PBL%d+OpenAD_prp_8%d
      OpenAD_prp_8%d = 0.0d0
      PB%d = PB%d+OpenAD_prp_7%d*(-2.0D00)
      P%d = P%d+OpenAD_prp_7%d
      PBB%d = PBB%d+OpenAD_prp_7%d
      OpenAD_prp_7%d = 0.0d0
          end if
        end subroutine bar
