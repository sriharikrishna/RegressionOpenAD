
C ========== begin copyright notice ==============
C This file is part of 
C ---------------
C xaifBooster
C ---------------
C Distributed under the BSD license as follows:
C Copyright (c) 2005, The University of Chicago
C All rights reserved.
C
C Redistribution and use in source and binary forms, 
C with or without modification, are permitted provided that the following conditions are met:
C
C    - Redistributions of source code must retain the above copyright notice, 
C      this list of conditions and the following disclaimer.
C    - Redistributions in binary form must reproduce the above copyright notice, 
C      this list of conditions and the following disclaimer in the documentation 
C      and/or other materials provided with the distribution.
C    - Neither the name of The University of Chicago nor the names of its contributors 
C      may be used to endorse or promote products derived from this software without 
C      specific prior written permission.
C
C THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
C EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
C OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
C SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
C INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
C PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
C INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
C LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
C OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C 
C General Information:
C xaifBooster is intended for the transformation of 
C numerical programs represented as xml files according 
C to the XAIF schema. It is part of the OpenAD framework. 
C The main application is automatic 
C differentiation, i.e. the generation of code for 
C the computation of derivatives. 
C The following people are the principal authors of the 
C current version: 
C 	Uwe Naumann
C	Jean Utke
C Additional contributors are: 
C	Andrew Lyons
C	Peter Fine
C
C For more details about xaifBooster and its use in OpenAD please visit:
C   http://www.mcs.anl.gov/openad
C
C This work is partially supported by:
C 	NSF-ITR grant OCE-0205590
C ========== end copyright notice ==============
       subroutine head(NX,NY,X,FVEC,R)
          use OAD_tape
          use OAD_rev

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      REAL(w2f__8) OpenAD_Symbol_0
      REAL(w2f__8) OpenAD_Symbol_1
      INTEGER(w2f__i8) OpenAD_Symbol_102
      INTEGER(w2f__i8) OpenAD_Symbol_103
      INTEGER(w2f__i8) OpenAD_Symbol_104
      INTEGER(w2f__i8) OpenAD_Symbol_105
      INTEGER(w2f__i8) OpenAD_Symbol_106
      INTEGER(w2f__i8) OpenAD_Symbol_107
      REAL(w2f__8) OpenAD_Symbol_3
      type(active) :: OpenAD_Symbol_78
C
C     **** Parameters and Result ****
C
      INTEGER(w2f__i4) NX
      INTEGER(w2f__i4) NY
      type(active) :: X(1 : INT((NX * NY)))
      type(active) :: FVEC(1 : INT((NX * NY)))
      REAL(w2f__8) R
C
C     **** Local Variables and Functions ****
C
      EXTERNAL foo
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      REAL(w2f__8) HX
      REAL(w2f__8) HX2
      REAL(w2f__8) HY
      REAL(w2f__8) HY2
      INTEGER(w2f__i4) K
      INTEGER(w2f__i4) N
      REAL(w2f__8) NXP1
      REAL(w2f__8) NYP1
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
      INTEGER(w2f__i8) OpenAD_Symbol_208
      REAL(w2f__8) OpenAD_Symbol_209
      INTEGER(w2f__i8) OpenAD_Symbol_210
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(FVEC)
C
C     **** Statements ****
C

          integer iaddr
          external iaddr

         if (our_rev_mode%plain) then
! original function
C$OPENAD XXX Template ad_template.f
      N = NX * NY
      NXP1 = (NX + 1)
      NYP1 = (NY + 1)
      HX = (1.0D00 / NXP1)
      HY = (1.0D00 / NYP1)
      HY2 = (HY * HY)
      HX2 = (HX * HX)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
      DO K = 1, N, 1
        FVEC(INT(K))%v = (FVEC(K)%v*HX2*HY2)
      END DO
          end if
          if (our_rev_mode%tape) then
! taping
C$OPENAD XXX Template ad_template.f
      N = NX * NY
      NXP1 = (NX + 1)
      NYP1 = (NY + 1)
      HX = (1.0D00 / NXP1)
      HY = (1.0D00 / NYP1)
      HY2 = (HY * HY)
      HX2 = (HX * HX)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
          integer_tape(integer_tape_pointer) = NX
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = NY
          integer_tape_pointer = integer_tape_pointer+1
      OpenAD_Symbol_104 = 0_w2f__i8
      DO K = 1, N, 1
        OpenAD_Symbol_0 = (HX2 * HY2)
        OpenAD_Symbol_3 = (FVEC(K)%v*OpenAD_Symbol_0)
        OpenAD_Symbol_1 = OpenAD_Symbol_0
        FVEC(INT(K))%v = OpenAD_Symbol_3
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_1
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_104 = (INT(OpenAD_Symbol_104) + INT(1_w2f__i8))
      END DO
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_104
          integer_tape_pointer = integer_tape_pointer+1
          end if 
          if (our_rev_mode%adjoint) then
! adjoint
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_102 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_103 = 1
      DO WHILE(INT(OpenAD_Symbol_103) .LE. INT(OpenAD_Symbol_102))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_208 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_209 = double_tape(double_tape_pointer)
          OpenAD_Symbol_78%d = OpenAD_Symbol_78%d+FVEC(INT(OpenAD_Symbol
     +_208))%d*OpenAD_Symbol_209
          FVEC(INT(OpenAD_Symbol_208))%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_210 = integer_tape(integer_tape_pointer)
          FVEC(INT(OpenAD_Symbol_210))%d = FVEC(INT(OpenAD_Symbol_210))%
     +d+OpenAD_Symbol_78%d
          OpenAD_Symbol_78%d = 0.0d0
        OpenAD_Symbol_103 = INT(OpenAD_Symbol_103) + 1
      END DO
          integer_tape_pointer = integer_tape_pointer-1
          NY = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          NX = integer_tape(integer_tape_pointer)
      CALL foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
          end if 
        end subroutine head
C ========== begin copyright notice ==============
C This file is part of 
C ---------------
C xaifBooster
C ---------------
C Distributed under the BSD license as follows:
C Copyright (c) 2005, The University of Chicago
C All rights reserved.
C
C Redistribution and use in source and binary forms, 
C with or without modification, are permitted provided that the following conditions are met:
C
C    - Redistributions of source code must retain the above copyright notice, 
C      this list of conditions and the following disclaimer.
C    - Redistributions in binary form must reproduce the above copyright notice, 
C      this list of conditions and the following disclaimer in the documentation 
C      and/or other materials provided with the distribution.
C    - Neither the name of The University of Chicago nor the names of its contributors 
C      may be used to endorse or promote products derived from this software without 
C      specific prior written permission.
C
C THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
C EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
C OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
C SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
C INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
C PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
C INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
C LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
C OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C 
C General Information:
C xaifBooster is intended for the transformation of 
C numerical programs represented as xml files according 
C to the XAIF schema. It is part of the OpenAD framework. 
C The main application is automatic 
C differentiation, i.e. the generation of code for 
C the computation of derivatives. 
C The following people are the principal authors of the 
C current version: 
C 	Uwe Naumann
C	Jean Utke
C Additional contributors are: 
C	Andrew Lyons
C	Peter Fine
C
C For more details about xaifBooster and its use in OpenAD please visit:
C   http://www.mcs.anl.gov/openad
C
C This work is partially supported by:
C 	NSF-ITR grant OCE-0205590
C ========== end copyright notice ==============
       subroutine foo(NX,NY,X,FVEC,R,N,HX,HY,HY2,HX2)
          use OAD_tape
          use OAD_rev

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      REAL(w2f__8) OpenAD_Symbol_10
      INTEGER(w2f__i8) OpenAD_Symbol_108
      INTEGER(w2f__i8) OpenAD_Symbol_109
      INTEGER(w2f__i8) OpenAD_Symbol_110
      INTEGER(w2f__i8) OpenAD_Symbol_111
      INTEGER(w2f__i8) OpenAD_Symbol_112
      INTEGER(w2f__i8) OpenAD_Symbol_113
      INTEGER(w2f__i8) OpenAD_Symbol_114
      INTEGER(w2f__i8) OpenAD_Symbol_115
      INTEGER(w2f__i8) OpenAD_Symbol_116
      INTEGER(w2f__i8) OpenAD_Symbol_117
      INTEGER(w2f__i8) OpenAD_Symbol_118
      INTEGER(w2f__i8) OpenAD_Symbol_119
      REAL(w2f__8) OpenAD_Symbol_12
      INTEGER(w2f__i8) OpenAD_Symbol_120
      INTEGER(w2f__i8) OpenAD_Symbol_121
      INTEGER(w2f__i8) OpenAD_Symbol_122
      INTEGER(w2f__i8) OpenAD_Symbol_123
      INTEGER(w2f__i8) OpenAD_Symbol_124
      INTEGER(w2f__i8) OpenAD_Symbol_125
      INTEGER(w2f__i8) OpenAD_Symbol_126
      INTEGER(w2f__i8) OpenAD_Symbol_127
      INTEGER(w2f__i8) OpenAD_Symbol_128
      INTEGER(w2f__i8) OpenAD_Symbol_129
      REAL(w2f__8) OpenAD_Symbol_13
      INTEGER(w2f__i8) OpenAD_Symbol_130
      INTEGER(w2f__i8) OpenAD_Symbol_131
      INTEGER(w2f__i8) OpenAD_Symbol_132
      INTEGER(w2f__i8) OpenAD_Symbol_133
      INTEGER(w2f__i8) OpenAD_Symbol_134
      INTEGER(w2f__i8) OpenAD_Symbol_135
      INTEGER(w2f__i8) OpenAD_Symbol_136
      INTEGER(w2f__i8) OpenAD_Symbol_137
      INTEGER(w2f__i8) OpenAD_Symbol_138
      INTEGER(w2f__i8) OpenAD_Symbol_139
      INTEGER(w2f__i8) OpenAD_Symbol_140
      INTEGER(w2f__i8) OpenAD_Symbol_141
      INTEGER(w2f__i8) OpenAD_Symbol_142
      INTEGER(w2f__i8) OpenAD_Symbol_143
      INTEGER(w2f__i8) OpenAD_Symbol_144
      INTEGER(w2f__i8) OpenAD_Symbol_145
      INTEGER(w2f__i8) OpenAD_Symbol_146
      INTEGER(w2f__i8) OpenAD_Symbol_147
      INTEGER(w2f__i8) OpenAD_Symbol_148
      INTEGER(w2f__i8) OpenAD_Symbol_149
      INTEGER(w2f__i8) OpenAD_Symbol_150
      INTEGER(w2f__i8) OpenAD_Symbol_151
      INTEGER(w2f__i8) OpenAD_Symbol_152
      INTEGER(w2f__i8) OpenAD_Symbol_153
      INTEGER(w2f__i8) OpenAD_Symbol_154
      INTEGER(w2f__i8) OpenAD_Symbol_155
      INTEGER(w2f__i8) OpenAD_Symbol_156
      INTEGER(w2f__i8) OpenAD_Symbol_157
      INTEGER(w2f__i8) OpenAD_Symbol_158
      INTEGER(w2f__i8) OpenAD_Symbol_159
      REAL(w2f__8) OpenAD_Symbol_16
      INTEGER(w2f__i8) OpenAD_Symbol_160
      INTEGER(w2f__i8) OpenAD_Symbol_161
      INTEGER(w2f__i8) OpenAD_Symbol_162
      INTEGER(w2f__i8) OpenAD_Symbol_163
      INTEGER(w2f__i8) OpenAD_Symbol_164
      INTEGER(w2f__i8) OpenAD_Symbol_165
      INTEGER(w2f__i8) OpenAD_Symbol_166
      INTEGER(w2f__i8) OpenAD_Symbol_167
      INTEGER(w2f__i8) OpenAD_Symbol_168
      INTEGER(w2f__i8) OpenAD_Symbol_169
      REAL(w2f__8) OpenAD_Symbol_17
      INTEGER(w2f__i8) OpenAD_Symbol_170
      INTEGER(w2f__i8) OpenAD_Symbol_171
      INTEGER(w2f__i8) OpenAD_Symbol_172
      INTEGER(w2f__i8) OpenAD_Symbol_173
      INTEGER(w2f__i8) OpenAD_Symbol_174
      INTEGER(w2f__i8) OpenAD_Symbol_175
      INTEGER(w2f__i8) OpenAD_Symbol_176
      INTEGER(w2f__i8) OpenAD_Symbol_177
      INTEGER(w2f__i8) OpenAD_Symbol_178
      INTEGER(w2f__i8) OpenAD_Symbol_179
      INTEGER(w2f__i8) OpenAD_Symbol_180
      INTEGER(w2f__i8) OpenAD_Symbol_181
      INTEGER(w2f__i8) OpenAD_Symbol_182
      INTEGER(w2f__i8) OpenAD_Symbol_183
      INTEGER(w2f__i8) OpenAD_Symbol_184
      INTEGER(w2f__i8) OpenAD_Symbol_185
      INTEGER(w2f__i8) OpenAD_Symbol_186
      INTEGER(w2f__i8) OpenAD_Symbol_187
      INTEGER(w2f__i8) OpenAD_Symbol_188
      INTEGER(w2f__i8) OpenAD_Symbol_189
      INTEGER(w2f__i8) OpenAD_Symbol_190
      INTEGER(w2f__i8) OpenAD_Symbol_191
      REAL(w2f__8) OpenAD_Symbol_20
      REAL(w2f__8) OpenAD_Symbol_22
      REAL(w2f__8) OpenAD_Symbol_23
      REAL(w2f__8) OpenAD_Symbol_24
      REAL(w2f__8) OpenAD_Symbol_25
      REAL(w2f__8) OpenAD_Symbol_27
      REAL(w2f__8) OpenAD_Symbol_28
      REAL(w2f__8) OpenAD_Symbol_29
      REAL(w2f__8) OpenAD_Symbol_30
      REAL(w2f__8) OpenAD_Symbol_31
      REAL(w2f__8) OpenAD_Symbol_32
      REAL(w2f__8) OpenAD_Symbol_34
      REAL(w2f__8) OpenAD_Symbol_35
      REAL(w2f__8) OpenAD_Symbol_36
      REAL(w2f__8) OpenAD_Symbol_4
      REAL(w2f__8) OpenAD_Symbol_5
      REAL(w2f__8) OpenAD_Symbol_6
      REAL(w2f__8) OpenAD_Symbol_79
      REAL(w2f__8) OpenAD_Symbol_8
      REAL(w2f__8) OpenAD_Symbol_80
      REAL(w2f__8) OpenAD_Symbol_81
      REAL(w2f__8) OpenAD_Symbol_82
      REAL(w2f__8) OpenAD_Symbol_83
      REAL(w2f__8) OpenAD_Symbol_84
      REAL(w2f__8) OpenAD_Symbol_85
      REAL(w2f__8) OpenAD_Symbol_86
      REAL(w2f__8) OpenAD_Symbol_87
      REAL(w2f__8) OpenAD_Symbol_88
      REAL(w2f__8) OpenAD_Symbol_89
      REAL(w2f__8) OpenAD_Symbol_9
      REAL(w2f__8) OpenAD_Symbol_90
      REAL(w2f__8) OpenAD_Symbol_91
C
C     **** Parameters and Result ****
C
      INTEGER(w2f__i4) NX
      INTEGER(w2f__i4) NY
      type(active) :: X(1 : INT((NX * NY)))
      type(active) :: FVEC(1 : INT((NX * NY)))
      REAL(w2f__8) R
      INTEGER(w2f__i4) N
      REAL(w2f__8) HX
      REAL(w2f__8) HY
      REAL(w2f__8) HY2
      REAL(w2f__8) HX2
C
C     **** Local Variables and Functions ****
C
      EXTERNAL bar
      type(active) :: DPDX
      type(active) :: DPDY
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      INTEGER(w2f__i4) I
      INTEGER(w2f__i4) J
      INTEGER(w2f__i4) K
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      type(active) :: P
      type(active) :: PB
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PBLAP
      type(active) :: PBR
      type(active) :: PL
      type(active) :: PLAP
      type(active) :: PLL
      type(active) :: PLLAP
      type(active) :: PR
      type(active) :: PRLAP
      type(active) :: PRR
      type(active) :: PT
      type(active) :: PTL
      type(active) :: PTLAP
      type(active) :: PTR
      type(active) :: PTT
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
      INTEGER(w2f__i8) OpenAD_Symbol_192
      INTEGER(w2f__i8) OpenAD_Symbol_193
      INTEGER(w2f__i8) OpenAD_Symbol_194
      INTEGER(w2f__i8) OpenAD_Symbol_195
      INTEGER(w2f__i8) OpenAD_Symbol_196
      INTEGER(w2f__i8) OpenAD_Symbol_197
      INTEGER(w2f__i8) OpenAD_Symbol_198
      INTEGER(w2f__i8) OpenAD_Symbol_199
      INTEGER(w2f__i8) OpenAD_Symbol_200
      INTEGER(w2f__i8) OpenAD_Symbol_201
      INTEGER(w2f__i8) OpenAD_Symbol_202
      INTEGER(w2f__i8) OpenAD_Symbol_203
      INTEGER(w2f__i8) OpenAD_Symbol_204
      INTEGER(w2f__i8) OpenAD_Symbol_205
      INTEGER(w2f__i8) OpenAD_Symbol_206
      INTEGER(w2f__i8) OpenAD_Symbol_207
      INTEGER(w2f__i8) OpenAD_Symbol_211
      INTEGER(w2f__i8) OpenAD_Symbol_212
      INTEGER(w2f__i8) OpenAD_Symbol_213
      INTEGER(w2f__i8) OpenAD_Symbol_214
      INTEGER(w2f__i8) OpenAD_Symbol_215
      INTEGER(w2f__i8) OpenAD_Symbol_216
      REAL(w2f__8) OpenAD_Symbol_217
      INTEGER(w2f__i8) OpenAD_Symbol_218
      REAL(w2f__8) OpenAD_Symbol_219
      INTEGER(w2f__i8) OpenAD_Symbol_220
      REAL(w2f__8) OpenAD_Symbol_221
      INTEGER(w2f__i8) OpenAD_Symbol_222
      REAL(w2f__8) OpenAD_Symbol_223
      INTEGER(w2f__i8) OpenAD_Symbol_224
      REAL(w2f__8) OpenAD_Symbol_225
      INTEGER(w2f__i8) OpenAD_Symbol_226
      REAL(w2f__8) OpenAD_Symbol_227
      INTEGER(w2f__i8) OpenAD_Symbol_228
      REAL(w2f__8) OpenAD_Symbol_229
      INTEGER(w2f__i8) OpenAD_Symbol_230
      REAL(w2f__8) OpenAD_Symbol_231
      INTEGER(w2f__i8) OpenAD_Symbol_232
      REAL(w2f__8) OpenAD_Symbol_233
      INTEGER(w2f__i8) OpenAD_Symbol_234
      REAL(w2f__8) OpenAD_Symbol_235
      INTEGER(w2f__i8) OpenAD_Symbol_236
      REAL(w2f__8) OpenAD_Symbol_237
      INTEGER(w2f__i8) OpenAD_Symbol_238
      REAL(w2f__8) OpenAD_Symbol_239
      REAL(w2f__8) OpenAD_Symbol_240
      REAL(w2f__8) OpenAD_Symbol_241
      REAL(w2f__8) OpenAD_Symbol_242
      REAL(w2f__8) OpenAD_Symbol_243
      INTEGER(w2f__i8) OpenAD_Symbol_244
      INTEGER(w2f__i8) OpenAD_Symbol_245
      INTEGER(w2f__i8) OpenAD_Symbol_246
      INTEGER(w2f__i8) OpenAD_Symbol_247
      INTEGER(w2f__i8) OpenAD_Symbol_248
      INTEGER(w2f__i8) OpenAD_Symbol_249
      INTEGER(w2f__i8) OpenAD_Symbol_250
      INTEGER(w2f__i8) OpenAD_Symbol_251
      INTEGER(w2f__i8) OpenAD_Symbol_252
      INTEGER(w2f__i8) OpenAD_Symbol_253
      INTEGER(w2f__i8) OpenAD_Symbol_254
      INTEGER(w2f__i8) OpenAD_Symbol_255
      INTEGER(w2f__i8) OpenAD_Symbol_256
      INTEGER(w2f__i8) OpenAD_Symbol_257
      INTEGER(w2f__i8) OpenAD_Symbol_258
      INTEGER(w2f__i8) OpenAD_Symbol_259
C
C     **** Statements ****
C

          integer iaddr
          external iaddr

         if (our_rev_mode%plain) then
! original function
C$OPENAD XXX Template ad_template.f
      DO I = 1, NY, 1
        DO J = 1, NX, 1
          K = J + NX *(I +(-1))
          IF((I .eq. 1) .OR.(J .eq. 1)) THEN
            PBL%v = 0.0D00
          ELSE
            PBL%v = X(K-NX+(-1))%v
          ENDIF
          IF(I .eq. 1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
          ELSE
            IF(I .eq. 2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
            ENDIF
          ENDIF
          IF((NX .eq. J) .OR.(I .eq. 1)) THEN
            PBR%v = 0.0D00
          ELSE
            PBR%v = X(K-NX+1)%v
          ENDIF
          IF(J .eq. 1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
          ELSE
            IF(J .eq. 2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
            ENDIF
          ENDIF
          P%v = X(K)%v
          IF(J .eq.(NX +(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
          ELSE
            IF(NX .eq. J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
            ENDIF
          ENDIF
          IF((NY .eq. I) .OR.(J .eq. 1)) THEN
            PTL%v = 0.0D00
          ELSE
            PTL%v = X(NX+K+(-1))%v
          ENDIF
          IF(I .eq.(NY +(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
          ELSE
            IF(NY .eq. I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
            ENDIF
          ENDIF
          IF((NX .eq. J) .OR.(NY .eq. I)) THEN
            PTR%v = 0.0D00
          ELSE
            PTR%v = X(NX+K+1)%v
          ENDIF
          DPDY%v = ((PT%v-PB%v)/(HY*2.0D00))
          DPDX%v = ((PR%v-PL%v)/(HX*2.0D00))
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          FVEC(INT(K))%v = (((PBLAP%v+PTLAP%v-PLAP%v*2.0D00)/HY2)+((PLLA
     +P%v+PRLAP%v-PLAP%v*2.0D00)/HX2)-R*(((DPDY%v*(PRLAP%v-PLLAP%v))/(HX
     +*2.0D00))-((DPDX%v*(PTLAP%v-PBLAP%v))/(HY*2.0D00))))
        END DO
      END DO
          end if
          if (our_rev_mode%tape) then
! taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_124 = 0_w2f__i8
      DO I = 1, NY, 1
        OpenAD_Symbol_125 = 0_w2f__i8
        DO J = 1, NX, 1
          K = J + NX *(I +(-1))
          IF((I .eq. 1) .OR.(J .eq. 1)) THEN
            PBL%v = 0.0D00
            OpenAD_Symbol_126 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_126
          integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PBL%v = X(K-NX+(-1))%v
            OpenAD_Symbol_207 = (K - NX +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_207
          integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_127 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_127
          integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF(I .eq. 1) THEN
            PB%v = 0.0D00
            PBB%v = X(K)%v
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_130 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_130
          integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF(I .eq. 2) THEN
              PB%v = X(K-NX)%v
              PBB%v = 0.0D00
              OpenAD_Symbol_204 = (K - NX)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_204
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_128 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_128
          integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PB%v = X(K-NX)%v
              PBB%v = X(K-NX*2)%v
              OpenAD_Symbol_205 = (K - NX)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_205
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_206 = (K - NX * 2)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_206
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_129 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_129
          integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_131 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_131
          integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF((NX .eq. J) .OR.(I .eq. 1)) THEN
            PBR%v = 0.0D00
            OpenAD_Symbol_132 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_132
          integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PBR%v = X(K-NX+1)%v
            OpenAD_Symbol_203 = (K - NX + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_203
          integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_133 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_133
          integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF(J .eq. 1) THEN
            PL%v = 0.0D00
            PLL%v = X(K)%v
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_136 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_136
          integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF(J .eq. 2) THEN
              PL%v = X(K+(-1))%v
              PLL%v = 0.0D00
              OpenAD_Symbol_200 = (K +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_200
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_134 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_134
          integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PL%v = X(K+(-1))%v
              PLL%v = X(K+(-2))%v
              OpenAD_Symbol_201 = (K +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_201
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_202 = (K +(-2))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_202
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_135 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_135
          integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_137 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_137
          integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          P%v = X(K)%v
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          IF(J .eq.(NX +(-1))) THEN
            PR%v = X(K+1)%v
            PRR%v = 0.0D00
            OpenAD_Symbol_192 = (K + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_192
          integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_140 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_140
          integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF(NX .eq. J) THEN
              PR%v = 0.0D00
              PRR%v = X(K)%v
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_138 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_138
          integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PR%v = X(K+1)%v
              PRR%v = X(K+2)%v
              OpenAD_Symbol_198 = (K + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_198
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_199 = (K + 2)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_199
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_139 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_139
          integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_141 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_141
          integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF((NY .eq. I) .OR.(J .eq. 1)) THEN
            PTL%v = 0.0D00
            OpenAD_Symbol_142 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_142
          integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PTL%v = X(NX+K+(-1))%v
            OpenAD_Symbol_197 = (NX + K +(-1))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_197
          integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_143 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_143
          integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF(I .eq.(NY +(-1))) THEN
            PT%v = X(NX+K)%v
            PTT%v = 0.0D00
            OpenAD_Symbol_193 = (NX + K)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_193
          integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_146 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_146
          integer_tape_pointer = integer_tape_pointer+1
          ELSE
            IF(NY .eq. I) THEN
              PT%v = 0.0D00
              PTT%v = (X(K)%v+HY*2.0D00)
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_144 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_144
          integer_tape_pointer = integer_tape_pointer+1
            ELSE
              PT%v = X(NX+K)%v
              PTT%v = X(K+NX*2)%v
              OpenAD_Symbol_195 = (NX + K)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_195
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_196 = (K + NX * 2)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_196
          integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_145 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_145
          integer_tape_pointer = integer_tape_pointer+1
            ENDIF
            OpenAD_Symbol_147 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_147
          integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          IF((NX .eq. J) .OR.(NY .eq. I)) THEN
            PTR%v = 0.0D00
            OpenAD_Symbol_148 = 1_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_148
          integer_tape_pointer = integer_tape_pointer+1
          ELSE
            PTR%v = X(NX+K+1)%v
            OpenAD_Symbol_194 = (NX + K + 1)
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_194
          integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_149 = 0_w2f__i8
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_149
          integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          OpenAD_Symbol_4 = (PT%v-PB%v)
          OpenAD_Symbol_5 = (HY * 2.0D00)
          DPDY%v = (OpenAD_Symbol_4/OpenAD_Symbol_5)
          OpenAD_Symbol_6 = (INT(1_w2f__i8) / OpenAD_Symbol_5)
          OpenAD_Symbol_8 = (PR%v-PL%v)
          OpenAD_Symbol_9 = (HX * 2.0D00)
          DPDX%v = (OpenAD_Symbol_8/OpenAD_Symbol_9)
          OpenAD_Symbol_10 = (INT(1_w2f__i8) / OpenAD_Symbol_9)
          OpenAD_Symbol_79 = (INT((-1_w2f__i8)) * OpenAD_Symbol_6)
          OpenAD_Symbol_80 = (INT((-1_w2f__i8)) * OpenAD_Symbol_10)
          double_tape(double_tape_pointer) = OpenAD_Symbol_6
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_79
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_10
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_80
          double_tape_pointer = double_tape_pointer+1
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          OpenAD_Symbol_12 = (PBLAP%v+PTLAP%v-PLAP%v*2.0D00)
          OpenAD_Symbol_16 = (PLLAP%v+PRLAP%v-PLAP%v*2.0D00)
          OpenAD_Symbol_27 = (PRLAP%v-PLLAP%v)
          OpenAD_Symbol_23 = (DPDY%v*OpenAD_Symbol_27)
          OpenAD_Symbol_24 = (HX * 2.0D00)
          OpenAD_Symbol_34 = (PTLAP%v-PBLAP%v)
          OpenAD_Symbol_30 = (DPDX%v*OpenAD_Symbol_34)
          OpenAD_Symbol_31 = (HY * 2.0D00)
          OpenAD_Symbol_20 = ((OpenAD_Symbol_23 / OpenAD_Symbol_24) -( O
     +penAD_Symbol_30 / OpenAD_Symbol_31))
          FVEC(INT(K))%v = ((OpenAD_Symbol_12/HY2)+(OpenAD_Symbol_16/HX2
     +)-R*OpenAD_Symbol_20)
          OpenAD_Symbol_13 = (INT(1_w2f__i8) / HY2)
          OpenAD_Symbol_17 = (INT(1_w2f__i8) / HX2)
          OpenAD_Symbol_28 = OpenAD_Symbol_27
          OpenAD_Symbol_29 = DPDY%v
          OpenAD_Symbol_25 = (INT(1_w2f__i8) / OpenAD_Symbol_24)
          OpenAD_Symbol_35 = OpenAD_Symbol_34
          OpenAD_Symbol_36 = DPDX%v
          OpenAD_Symbol_32 = (INT(1_w2f__i8) / OpenAD_Symbol_31)
          OpenAD_Symbol_22 = R
          OpenAD_Symbol_81 = (OpenAD_Symbol_22 * INT((-1_w2f__i8)))
          OpenAD_Symbol_82 = (OpenAD_Symbol_32 * INT((-1_w2f__i8)) *  Op
     +enAD_Symbol_81)
          OpenAD_Symbol_83 = (OpenAD_Symbol_25 * OpenAD_Symbol_81)
          OpenAD_Symbol_84 = (OpenAD_Symbol_35 * OpenAD_Symbol_82)
          OpenAD_Symbol_85 = (OpenAD_Symbol_36 * OpenAD_Symbol_82)
          OpenAD_Symbol_86 = (OpenAD_Symbol_28 * OpenAD_Symbol_83)
          OpenAD_Symbol_87 = (OpenAD_Symbol_29 * OpenAD_Symbol_83)
          OpenAD_Symbol_88 = (INT((-1_w2f__i8)) * OpenAD_Symbol_85)
          OpenAD_Symbol_89 = (INT((-1_w2f__i8)) * OpenAD_Symbol_87)
          OpenAD_Symbol_90 = (2.0D00 * INT((-1_w2f__i8)) *  OpenAD_Symbo
     +l_17)
          OpenAD_Symbol_91 = (2.0D00 * INT((-1_w2f__i8)) *  OpenAD_Symbo
     +l_13)
          double_tape(double_tape_pointer) = OpenAD_Symbol_17
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_13
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_84
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_86
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_17
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_13
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_85
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_88
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_87
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_89
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_90
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_91
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_125 = (INT(OpenAD_Symbol_125) + INT(1_w2f__i8))
        END DO
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_125
          integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_124 = (INT(OpenAD_Symbol_124) + INT(1_w2f__i8))
      END DO
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_124
          integer_tape_pointer = integer_tape_pointer+1
          end if 
          if (our_rev_mode%adjoint) then
! adjoint
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_108 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_109 = 1
      DO WHILE(INT(OpenAD_Symbol_109) .LE. INT(OpenAD_Symbol_108))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_110 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_111 = 1
        DO WHILE(INT(OpenAD_Symbol_111) .LE. INT(OpenAD_Symbol_110))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_216 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_217 = double_tape(double_tape_pointer)
          PLAP%d = PLAP%d+FVEC(INT(OpenAD_Symbol_216))%d*OpenAD_Symbol_2
     +17
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_218 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_219 = double_tape(double_tape_pointer)
          PLAP%d = PLAP%d+FVEC(INT(OpenAD_Symbol_218))%d*OpenAD_Symbol_2
     +19
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_220 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_221 = double_tape(double_tape_pointer)
          PLLAP%d = PLLAP%d+FVEC(INT(OpenAD_Symbol_220))%d*OpenAD_Symbol
     +_221
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_222 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_223 = double_tape(double_tape_pointer)
          PRLAP%d = PRLAP%d+FVEC(INT(OpenAD_Symbol_222))%d*OpenAD_Symbol
     +_223
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_224 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_225 = double_tape(double_tape_pointer)
          PBLAP%d = PBLAP%d+FVEC(INT(OpenAD_Symbol_224))%d*OpenAD_Symbol
     +_225
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_226 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_227 = double_tape(double_tape_pointer)
          PTLAP%d = PTLAP%d+FVEC(INT(OpenAD_Symbol_226))%d*OpenAD_Symbol
     +_227
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_228 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_229 = double_tape(double_tape_pointer)
          PTLAP%d = PTLAP%d+FVEC(INT(OpenAD_Symbol_228))%d*OpenAD_Symbol
     +_229
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_230 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_231 = double_tape(double_tape_pointer)
          PRLAP%d = PRLAP%d+FVEC(INT(OpenAD_Symbol_230))%d*OpenAD_Symbol
     +_231
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_232 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_233 = double_tape(double_tape_pointer)
          DPDY%d = DPDY%d+FVEC(INT(OpenAD_Symbol_232))%d*OpenAD_Symbol_2
     +33
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_234 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_235 = double_tape(double_tape_pointer)
          DPDX%d = DPDX%d+FVEC(INT(OpenAD_Symbol_234))%d*OpenAD_Symbol_2
     +35
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_236 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_237 = double_tape(double_tape_pointer)
          PBLAP%d = PBLAP%d+FVEC(INT(OpenAD_Symbol_236))%d*OpenAD_Symbol
     +_237
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_238 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_239 = double_tape(double_tape_pointer)
          PLLAP%d = PLLAP%d+FVEC(INT(OpenAD_Symbol_238))%d*OpenAD_Symbol
     +_239
          FVEC(INT(OpenAD_Symbol_238))%d = 0.0d0
          CALL bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,HX2
     +,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_240 = double_tape(double_tape_pointer)
          PL%d = PL%d+DPDX%d*OpenAD_Symbol_240
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_241 = double_tape(double_tape_pointer)
          PR%d = PR%d+DPDX%d*OpenAD_Symbol_241
          DPDX%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_242 = double_tape(double_tape_pointer)
          PB%d = PB%d+DPDY%d*OpenAD_Symbol_242
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_243 = double_tape(double_tape_pointer)
          PT%d = PT%d+DPDY%d*OpenAD_Symbol_243
          DPDY%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_112 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_112 .ne. 0) THEN
          PTR%d = 0.0d0
          ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_244 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_244))%d = X(INT(OpenAD_Symbol_244))%d+PTR%
     +d
          PTR%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_113 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_113 .ne. 0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_215 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_215))%d = X(INT(OpenAD_Symbol_215))%d+PT%d
          PT%d = 0.0d0
          PTT%d = 0.0d0
          ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_114 = integer_tape(integer_tape_pointer)
            IF(OpenAD_Symbol_114 .ne. 0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_245 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_245))%d = X(INT(OpenAD_Symbol_245))%d+PTT%
     +d
          PTT%d = 0.0d0
          PT%d = 0.0d0
            ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_246 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_246))%d = X(INT(OpenAD_Symbol_246))%d+PTT%
     +d
          PTT%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_247 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_247))%d = X(INT(OpenAD_Symbol_247))%d+PT%d
          PT%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_115 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_115 .ne. 0) THEN
          PTL%d = 0.0d0
          ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_248 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_248))%d = X(INT(OpenAD_Symbol_248))%d+PTL%
     +d
          PTL%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_116 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_116 .ne. 0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_214 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_214))%d = X(INT(OpenAD_Symbol_214))%d+PR%d
          PR%d = 0.0d0
          PRR%d = 0.0d0
          ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_117 = integer_tape(integer_tape_pointer)
            IF(OpenAD_Symbol_117 .ne. 0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_249 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_249))%d = X(INT(OpenAD_Symbol_249))%d+PRR%
     +d
          PRR%d = 0.0d0
          PR%d = 0.0d0
            ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_250 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_250))%d = X(INT(OpenAD_Symbol_250))%d+PRR%
     +d
          PRR%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_251 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_251))%d = X(INT(OpenAD_Symbol_251))%d+PR%d
          PR%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_213 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_213))%d = X(INT(OpenAD_Symbol_213))%d+P%d
          P%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_118 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_118 .ne. 0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_212 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_212))%d = X(INT(OpenAD_Symbol_212))%d+PLL%
     +d
          PLL%d = 0.0d0
          PL%d = 0.0d0
          ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_119 = integer_tape(integer_tape_pointer)
            IF(OpenAD_Symbol_119 .ne. 0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_252 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_252))%d = X(INT(OpenAD_Symbol_252))%d+PL%d
          PL%d = 0.0d0
          PLL%d = 0.0d0
            ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_253 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_253))%d = X(INT(OpenAD_Symbol_253))%d+PLL%
     +d
          PLL%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_254 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_254))%d = X(INT(OpenAD_Symbol_254))%d+PL%d
          PL%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_120 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_120 .ne. 0) THEN
          PBR%d = 0.0d0
          ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_255 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_255))%d = X(INT(OpenAD_Symbol_255))%d+PBR%
     +d
          PBR%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_121 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_121 .ne. 0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_211 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_211))%d = X(INT(OpenAD_Symbol_211))%d+PBB%
     +d
          PBB%d = 0.0d0
          PB%d = 0.0d0
          ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_122 = integer_tape(integer_tape_pointer)
            IF(OpenAD_Symbol_122 .ne. 0) THEN
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_256 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_256))%d = X(INT(OpenAD_Symbol_256))%d+PB%d
          PB%d = 0.0d0
          PBB%d = 0.0d0
            ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_257 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_257))%d = X(INT(OpenAD_Symbol_257))%d+PBB%
     +d
          PBB%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_258 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_258))%d = X(INT(OpenAD_Symbol_258))%d+PB%d
          PB%d = 0.0d0
            ENDIF
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_123 = integer_tape(integer_tape_pointer)
          IF(OpenAD_Symbol_123 .ne. 0) THEN
          PBL%d = 0.0d0
          ELSE
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_259 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_259))%d = X(INT(OpenAD_Symbol_259))%d+PBL%
     +d
          PBL%d = 0.0d0
          ENDIF
          OpenAD_Symbol_111 = INT(OpenAD_Symbol_111) + 1
        END DO
        OpenAD_Symbol_109 = INT(OpenAD_Symbol_109) + 1
      END DO
          end if 
        end subroutine foo
C ========== begin copyright notice ==============
C This file is part of 
C ---------------
C xaifBooster
C ---------------
C Distributed under the BSD license as follows:
C Copyright (c) 2005, The University of Chicago
C All rights reserved.
C
C Redistribution and use in source and binary forms, 
C with or without modification, are permitted provided that the following conditions are met:
C
C    - Redistributions of source code must retain the above copyright notice, 
C      this list of conditions and the following disclaimer.
C    - Redistributions in binary form must reproduce the above copyright notice, 
C      this list of conditions and the following disclaimer in the documentation 
C      and/or other materials provided with the distribution.
C    - Neither the name of The University of Chicago nor the names of its contributors 
C      may be used to endorse or promote products derived from this software without 
C      specific prior written permission.
C
C THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
C EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
C OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
C SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
C INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
C PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
C INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
C LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
C OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
C 
C General Information:
C xaifBooster is intended for the transformation of 
C numerical programs represented as xml files according 
C to the XAIF schema. It is part of the OpenAD framework. 
C The main application is automatic 
C differentiation, i.e. the generation of code for 
C the computation of derivatives. 
C The following people are the principal authors of the 
C current version: 
C 	Uwe Naumann
C	Jean Utke
C Additional contributors are: 
C	Andrew Lyons
C	Peter Fine
C
C For more details about xaifBooster and its use in OpenAD please visit:
C   http://www.mcs.anl.gov/openad
C
C This work is partially supported by:
C 	NSF-ITR grant OCE-0205590
C ========== end copyright notice ==============
       subroutine bar(PBB,PBL,PB,PBR,PLL,PL,P,PR,PRR,PTL,PT,PTR,PTT,HY2,
     +HX2,PLAP,PBLAP,PLLAP,PRLAP,PTLAP)
          use OAD_tape
          use OAD_rev

          ! original arguments get inserted before version
          ! and declared here together with all local variables
          ! generated by xaifBooster

      use w2f__types
      use OAD_active
      IMPLICIT NONE
C
C     **** Global Variables & Derived Type Definitions ****
C
      REAL(w2f__8) OpenAD_Symbol_100
      REAL(w2f__8) OpenAD_Symbol_101
      REAL(w2f__8) OpenAD_Symbol_38
      REAL(w2f__8) OpenAD_Symbol_39
      REAL(w2f__8) OpenAD_Symbol_42
      REAL(w2f__8) OpenAD_Symbol_43
      REAL(w2f__8) OpenAD_Symbol_46
      REAL(w2f__8) OpenAD_Symbol_47
      REAL(w2f__8) OpenAD_Symbol_50
      REAL(w2f__8) OpenAD_Symbol_51
      REAL(w2f__8) OpenAD_Symbol_54
      REAL(w2f__8) OpenAD_Symbol_55
      REAL(w2f__8) OpenAD_Symbol_58
      REAL(w2f__8) OpenAD_Symbol_59
      REAL(w2f__8) OpenAD_Symbol_62
      REAL(w2f__8) OpenAD_Symbol_63
      REAL(w2f__8) OpenAD_Symbol_66
      REAL(w2f__8) OpenAD_Symbol_67
      REAL(w2f__8) OpenAD_Symbol_70
      REAL(w2f__8) OpenAD_Symbol_71
      REAL(w2f__8) OpenAD_Symbol_74
      REAL(w2f__8) OpenAD_Symbol_75
      REAL(w2f__8) OpenAD_Symbol_92
      REAL(w2f__8) OpenAD_Symbol_93
      REAL(w2f__8) OpenAD_Symbol_94
      REAL(w2f__8) OpenAD_Symbol_95
      REAL(w2f__8) OpenAD_Symbol_96
      REAL(w2f__8) OpenAD_Symbol_97
      REAL(w2f__8) OpenAD_Symbol_98
      REAL(w2f__8) OpenAD_Symbol_99
C
C     **** Parameters and Result ****
C
      type(active) :: PBB
      type(active) :: PBL
      type(active) :: PB
      type(active) :: PBR
      type(active) :: PLL
      type(active) :: PL
      type(active) :: P
      type(active) :: PR
      type(active) :: PRR
      type(active) :: PTL
      type(active) :: PT
      type(active) :: PTR
      type(active) :: PTT
      REAL(w2f__8) HY2
      REAL(w2f__8) HX2
      type(active) :: PLAP
      type(active) :: PBLAP
      type(active) :: PLLAP
      type(active) :: PRLAP
      type(active) :: PTLAP
C
C     **** Local Variables and Functions ****
C
      REAL(w2f__8) FOUR
      PARAMETER ( FOUR = 4.0D00)
      REAL(w2f__8) ONE
      PARAMETER ( ONE = 1.0D00)
      REAL(w2f__8) THREE
      PARAMETER ( THREE = 3.0D00)
      REAL(w2f__8) TWO
      PARAMETER ( TWO = 2.0D00)
      REAL(w2f__8) ZERO
      PARAMETER ( ZERO = 0.0D00)
      REAL(w2f__8) OpenAD_Symbol_260
      REAL(w2f__8) OpenAD_Symbol_261
      REAL(w2f__8) OpenAD_Symbol_262
      REAL(w2f__8) OpenAD_Symbol_263
      REAL(w2f__8) OpenAD_Symbol_264
      REAL(w2f__8) OpenAD_Symbol_265
      REAL(w2f__8) OpenAD_Symbol_266
      REAL(w2f__8) OpenAD_Symbol_267
      REAL(w2f__8) OpenAD_Symbol_268
      REAL(w2f__8) OpenAD_Symbol_269
      REAL(w2f__8) OpenAD_Symbol_270
      REAL(w2f__8) OpenAD_Symbol_271
      REAL(w2f__8) OpenAD_Symbol_272
      REAL(w2f__8) OpenAD_Symbol_273
      REAL(w2f__8) OpenAD_Symbol_274
      REAL(w2f__8) OpenAD_Symbol_275
      REAL(w2f__8) OpenAD_Symbol_276
      REAL(w2f__8) OpenAD_Symbol_277
      REAL(w2f__8) OpenAD_Symbol_278
      REAL(w2f__8) OpenAD_Symbol_279
      REAL(w2f__8) OpenAD_Symbol_280
      REAL(w2f__8) OpenAD_Symbol_281
      REAL(w2f__8) OpenAD_Symbol_282
      REAL(w2f__8) OpenAD_Symbol_283
      REAL(w2f__8) OpenAD_Symbol_284
      REAL(w2f__8) OpenAD_Symbol_285
      REAL(w2f__8) OpenAD_Symbol_286
      REAL(w2f__8) OpenAD_Symbol_287
      REAL(w2f__8) OpenAD_Symbol_288
      REAL(w2f__8) OpenAD_Symbol_289
C
C     **** Statements ****
C

          integer iaddr
          external iaddr

         if (our_rev_mode%plain) then
! original function
C$OPENAD XXX Template ad_template.f
      PBLAP%v = (((PBB%v+P%v-PB%v*2.0D00)/HY2)+((PBL%v+PBR%v-PB%v*2.0D00
     +)/HX2))
      PLLAP%v = (((PBL%v+PTL%v-PL%v*2.0D00)/HY2)+((PLL%v+P%v-PL%v*2.0D00
     +)/HX2))
      PLAP%v = (((PB%v+PT%v-P%v*2.0D00)/HY2)+((PL%v+PR%v-P%v*2.0D00)/HX2
     +))
      PRLAP%v = (((PBR%v+PTR%v-PR%v*2.0D00)/HY2)+((P%v+PRR%v-PR%v*2.0D00
     +)/HX2))
      PTLAP%v = (((P%v+PTT%v-PT%v*2.0D00)/HY2)+((PTL%v+PTR%v-PT%v*2.0D00
     +)/HX2))
          end if
          if (our_rev_mode%tape) then
! taping
C$OPENAD XXX Template ad_template.f
      OpenAD_Symbol_38 = (PBB%v+P%v-PB%v*2.0D00)
      OpenAD_Symbol_42 = (PBL%v+PBR%v-PB%v*2.0D00)
      PBLAP%v = ((OpenAD_Symbol_38/HY2)+(OpenAD_Symbol_42/HX2))
      OpenAD_Symbol_39 = (INT(1_w2f__i8) / HY2)
      OpenAD_Symbol_43 = (INT(1_w2f__i8) / HX2)
      OpenAD_Symbol_46 = (PBL%v+PTL%v-PL%v*2.0D00)
      OpenAD_Symbol_50 = (PLL%v+P%v-PL%v*2.0D00)
      PLLAP%v = ((OpenAD_Symbol_46/HY2)+(OpenAD_Symbol_50/HX2))
      OpenAD_Symbol_47 = (INT(1_w2f__i8) / HY2)
      OpenAD_Symbol_51 = (INT(1_w2f__i8) / HX2)
      OpenAD_Symbol_54 = (PB%v+PT%v-P%v*2.0D00)
      OpenAD_Symbol_58 = (PL%v+PR%v-P%v*2.0D00)
      PLAP%v = ((OpenAD_Symbol_54/HY2)+(OpenAD_Symbol_58/HX2))
      OpenAD_Symbol_55 = (INT(1_w2f__i8) / HY2)
      OpenAD_Symbol_59 = (INT(1_w2f__i8) / HX2)
      OpenAD_Symbol_62 = (PBR%v+PTR%v-PR%v*2.0D00)
      OpenAD_Symbol_66 = (P%v+PRR%v-PR%v*2.0D00)
      PRLAP%v = ((OpenAD_Symbol_62/HY2)+(OpenAD_Symbol_66/HX2))
      OpenAD_Symbol_63 = (INT(1_w2f__i8) / HY2)
      OpenAD_Symbol_67 = (INT(1_w2f__i8) / HX2)
      OpenAD_Symbol_70 = (P%v+PTT%v-PT%v*2.0D00)
      OpenAD_Symbol_74 = (PTL%v+PTR%v-PT%v*2.0D00)
      PTLAP%v = ((OpenAD_Symbol_70/HY2)+(OpenAD_Symbol_74/HX2))
      OpenAD_Symbol_71 = (INT(1_w2f__i8) / HY2)
      OpenAD_Symbol_75 = (INT(1_w2f__i8) / HX2)
      OpenAD_Symbol_92 = (2.0D00 * INT((-1_w2f__i8)) * OpenAD_Symbol_75 
     +)
      OpenAD_Symbol_93 = (2.0D00 * INT((-1_w2f__i8)) * OpenAD_Symbol_71 
     +)
      OpenAD_Symbol_94 = (2.0D00 * INT((-1_w2f__i8)) * OpenAD_Symbol_67 
     +)
      OpenAD_Symbol_95 = (2.0D00 * INT((-1_w2f__i8)) * OpenAD_Symbol_63 
     +)
      OpenAD_Symbol_96 = (2.0D00 * INT((-1_w2f__i8)) * OpenAD_Symbol_59 
     +)
      OpenAD_Symbol_97 = (2.0D00 * INT((-1_w2f__i8)) * OpenAD_Symbol_55 
     +)
      OpenAD_Symbol_98 = (2.0D00 * INT((-1_w2f__i8)) * OpenAD_Symbol_51 
     +)
      OpenAD_Symbol_99 = (2.0D00 * INT((-1_w2f__i8)) * OpenAD_Symbol_47 
     +)
      OpenAD_Symbol_100 = (2.0D00 * INT((-1_w2f__i8)) *  OpenAD_Symbol_4
     +3)
      OpenAD_Symbol_101 = (2.0D00 * INT((-1_w2f__i8)) *  OpenAD_Symbol_3
     +9)
          double_tape(double_tape_pointer) = OpenAD_Symbol_43
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_39
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_43
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_39
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_100
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_101
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_51
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_47
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_51
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_47
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_98
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_99
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_59
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_55
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_59
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_55
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_96
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_97
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_67
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_63
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_67
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_63
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_94
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_95
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_75
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_71
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_75
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_71
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_92
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_Symbol_93
          double_tape_pointer = double_tape_pointer+1
          end if 
          if (our_rev_mode%adjoint) then
! adjoint
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_260 = double_tape(double_tape_pointer)
          PT%d = PT%d+PTLAP%d*OpenAD_Symbol_260
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_261 = double_tape(double_tape_pointer)
          PT%d = PT%d+PTLAP%d*OpenAD_Symbol_261
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_262 = double_tape(double_tape_pointer)
          PTT%d = PTT%d+PTLAP%d*OpenAD_Symbol_262
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_263 = double_tape(double_tape_pointer)
          PTR%d = PTR%d+PTLAP%d*OpenAD_Symbol_263
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_264 = double_tape(double_tape_pointer)
          P%d = P%d+PTLAP%d*OpenAD_Symbol_264
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_265 = double_tape(double_tape_pointer)
          PTL%d = PTL%d+PTLAP%d*OpenAD_Symbol_265
          PTLAP%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_266 = double_tape(double_tape_pointer)
          PR%d = PR%d+PRLAP%d*OpenAD_Symbol_266
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_267 = double_tape(double_tape_pointer)
          PR%d = PR%d+PRLAP%d*OpenAD_Symbol_267
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_268 = double_tape(double_tape_pointer)
          PTR%d = PTR%d+PRLAP%d*OpenAD_Symbol_268
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_269 = double_tape(double_tape_pointer)
          PRR%d = PRR%d+PRLAP%d*OpenAD_Symbol_269
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_270 = double_tape(double_tape_pointer)
          PBR%d = PBR%d+PRLAP%d*OpenAD_Symbol_270
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_271 = double_tape(double_tape_pointer)
          P%d = P%d+PRLAP%d*OpenAD_Symbol_271
          PRLAP%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_272 = double_tape(double_tape_pointer)
          P%d = P%d+PLAP%d*OpenAD_Symbol_272
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_273 = double_tape(double_tape_pointer)
          P%d = P%d+PLAP%d*OpenAD_Symbol_273
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_274 = double_tape(double_tape_pointer)
          PT%d = PT%d+PLAP%d*OpenAD_Symbol_274
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_275 = double_tape(double_tape_pointer)
          PR%d = PR%d+PLAP%d*OpenAD_Symbol_275
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_276 = double_tape(double_tape_pointer)
          PB%d = PB%d+PLAP%d*OpenAD_Symbol_276
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_277 = double_tape(double_tape_pointer)
          PL%d = PL%d+PLAP%d*OpenAD_Symbol_277
          PLAP%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_278 = double_tape(double_tape_pointer)
          PL%d = PL%d+PLLAP%d*OpenAD_Symbol_278
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_279 = double_tape(double_tape_pointer)
          PL%d = PL%d+PLLAP%d*OpenAD_Symbol_279
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_280 = double_tape(double_tape_pointer)
          PTL%d = PTL%d+PLLAP%d*OpenAD_Symbol_280
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_281 = double_tape(double_tape_pointer)
          P%d = P%d+PLLAP%d*OpenAD_Symbol_281
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_282 = double_tape(double_tape_pointer)
          PBL%d = PBL%d+PLLAP%d*OpenAD_Symbol_282
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_283 = double_tape(double_tape_pointer)
          PLL%d = PLL%d+PLLAP%d*OpenAD_Symbol_283
          PLLAP%d = 0.0d0
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_284 = double_tape(double_tape_pointer)
          PB%d = PB%d+PBLAP%d*OpenAD_Symbol_284
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_285 = double_tape(double_tape_pointer)
          PB%d = PB%d+PBLAP%d*OpenAD_Symbol_285
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_286 = double_tape(double_tape_pointer)
          P%d = P%d+PBLAP%d*OpenAD_Symbol_286
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_287 = double_tape(double_tape_pointer)
          PBR%d = PBR%d+PBLAP%d*OpenAD_Symbol_287
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_288 = double_tape(double_tape_pointer)
          PBB%d = PBB%d+PBLAP%d*OpenAD_Symbol_288
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_289 = double_tape(double_tape_pointer)
          PBL%d = PBL%d+PBLAP%d*OpenAD_Symbol_289
          PBLAP%d = 0.0d0
          end if 
        end subroutine bar
