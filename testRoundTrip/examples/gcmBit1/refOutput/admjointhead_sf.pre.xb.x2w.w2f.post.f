      module all_globals_mod
      use w2f__types
      use OAD_active
      implicit none
      SAVE
C
C     **** Statements ****
C
      END MODULE
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
      subroutine find_bulkmod(LOCPRES,TFLD,SFLD,BULKMOD)
          use OAD_tape
          use OAD_rev
          use OAD_cp
C         ! original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster
      use w2f__types
      use OAD_active
      implicit none
C
C     **** Global Variables & Derived Type Definitions ****
C
      integer(w2f__i8) :: OpenAD_Symbol_0
      integer(w2f__i8) :: OpenAD_Symbol_1
      integer(w2f__i8) :: OpenAD_Symbol_10
      integer(w2f__i8) :: OpenAD_Symbol_11
      integer(w2f__i8) :: OpenAD_Symbol_12
      integer(w2f__i8) :: OpenAD_Symbol_13
      integer(w2f__i8) :: OpenAD_Symbol_14
      integer(w2f__i8) :: OpenAD_Symbol_15
      integer(w2f__i8) :: OpenAD_Symbol_16
      integer(w2f__i8) :: OpenAD_Symbol_17
      integer(w2f__i8) :: OpenAD_Symbol_2
      integer(w2f__i8) :: OpenAD_Symbol_3
      integer(w2f__i8) :: OpenAD_Symbol_4
      integer(w2f__i8) :: OpenAD_Symbol_5
      integer(w2f__i8) :: OpenAD_Symbol_6
      integer(w2f__i8) :: OpenAD_Symbol_7
      integer(w2f__i8) :: OpenAD_Symbol_8
      integer(w2f__i8) :: OpenAD_Symbol_9
      real(w2f__8) :: OpenAD_acc_0
      real(w2f__8) :: OpenAD_acc_1
      real(w2f__8) :: OpenAD_acc_10
      real(w2f__8) :: OpenAD_acc_11
      real(w2f__8) :: OpenAD_acc_12
      real(w2f__8) :: OpenAD_acc_13
      real(w2f__8) :: OpenAD_acc_14
      real(w2f__8) :: OpenAD_acc_15
      real(w2f__8) :: OpenAD_acc_16
      real(w2f__8) :: OpenAD_acc_17
      real(w2f__8) :: OpenAD_acc_18
      real(w2f__8) :: OpenAD_acc_19
      real(w2f__8) :: OpenAD_acc_2
      real(w2f__8) :: OpenAD_acc_20
      real(w2f__8) :: OpenAD_acc_21
      real(w2f__8) :: OpenAD_acc_22
      real(w2f__8) :: OpenAD_acc_3
      real(w2f__8) :: OpenAD_acc_4
      real(w2f__8) :: OpenAD_acc_5
      real(w2f__8) :: OpenAD_acc_6
      real(w2f__8) :: OpenAD_acc_7
      real(w2f__8) :: OpenAD_acc_8
      real(w2f__8) :: OpenAD_acc_9
      real(w2f__8) :: OpenAD_lin_0
      real(w2f__8) :: OpenAD_lin_1
      real(w2f__8) :: OpenAD_lin_11
      real(w2f__8) :: OpenAD_lin_12
      real(w2f__8) :: OpenAD_lin_15
      real(w2f__8) :: OpenAD_lin_17
      real(w2f__8) :: OpenAD_lin_19
      real(w2f__8) :: OpenAD_lin_2
      real(w2f__8) :: OpenAD_lin_21
      real(w2f__8) :: OpenAD_lin_22
      real(w2f__8) :: OpenAD_lin_23
      real(w2f__8) :: OpenAD_lin_26
      real(w2f__8) :: OpenAD_lin_28
      real(w2f__8) :: OpenAD_lin_3
      real(w2f__8) :: OpenAD_lin_30
      real(w2f__8) :: OpenAD_lin_31
      real(w2f__8) :: OpenAD_lin_32
      real(w2f__8) :: OpenAD_lin_35
      real(w2f__8) :: OpenAD_lin_37
      real(w2f__8) :: OpenAD_lin_38
      real(w2f__8) :: OpenAD_lin_39
      real(w2f__8) :: OpenAD_lin_4
      real(w2f__8) :: OpenAD_lin_42
      real(w2f__8) :: OpenAD_lin_44
      real(w2f__8) :: OpenAD_lin_46
      real(w2f__8) :: OpenAD_lin_47
      real(w2f__8) :: OpenAD_lin_48
      real(w2f__8) :: OpenAD_lin_49
      real(w2f__8) :: OpenAD_lin_5
      real(w2f__8) :: OpenAD_lin_50
      real(w2f__8) :: OpenAD_lin_53
      real(w2f__8) :: OpenAD_lin_55
      real(w2f__8) :: OpenAD_lin_57
      real(w2f__8) :: OpenAD_lin_58
      real(w2f__8) :: OpenAD_lin_59
      real(w2f__8) :: OpenAD_lin_6
      real(w2f__8) :: OpenAD_lin_60
      real(w2f__8) :: OpenAD_lin_61
      real(w2f__8) :: OpenAD_lin_64
      real(w2f__8) :: OpenAD_lin_66
      real(w2f__8) :: OpenAD_lin_67
      real(w2f__8) :: OpenAD_lin_68
      real(w2f__8) :: OpenAD_lin_69
      real(w2f__8) :: OpenAD_lin_7
      real(w2f__8) :: OpenAD_lin_70
      real(w2f__8) :: OpenAD_lin_73
      real(w2f__8) :: OpenAD_lin_75
      real(w2f__8) :: OpenAD_lin_8
      real(w2f__8) :: OpenAD_lin_9
      real(w2f__8) :: OpenAD_tmp_0
      real(w2f__8) :: OpenAD_tmp_1
      real(w2f__8) :: OpenAD_tmp_2
      real(w2f__8) :: OpenAD_tmp_3
      real(w2f__8) :: OpenAD_tmp_4
      real(w2f__8) :: OpenAD_tmp_5
      real(w2f__8) :: OpenAD_tmp_6
      real(w2f__8) :: OpenAD_tmp_7
      real(w2f__8) :: OpenAD_tmp_8
      real(w2f__8) :: OpenAD_tmp_9
C
C     **** Parameters and Result ****
C
      type(active) :: LOCPRES(1:2,1:2)
      type(active) :: TFLD(1:2,1:2,1:2,1:2,1:2)
      type(active) :: SFLD(1:2,1:2,1:2,1:2,1:2)
      type(active) :: BULKMOD(1:2,1:2)
C
C     **** Local Variables and Functions ****
C
      integer(w2f__i4) :: BI
      integer(w2f__i4) :: BJ
      type(active) :: BMFRESH
      type(active) :: BMPRES
      type(active) :: BMSALT
      real(w2f__8) :: EOSJMDCKFW(1:5)
      real(w2f__8) :: EOSJMDCKP(1:14)
      real(w2f__8) :: EOSJMDCKSW(1:7)
      integer(w2f__i4) :: I
      integer(w2f__i4) :: J
      integer(w2f__i4) :: K
      type(active) :: P
      type(active) :: P2
      type(active) :: S
      type(active) :: S3O2
      real(w2f__8) :: SITOBAR
      type(active) :: T
      type(active) :: T2
      type(active) :: T3
      type(active) :: T4
      integer(w2f__i8) :: OpenAD_Symbol_61
      integer(w2f__i8) :: OpenAD_Symbol_62
      integer(w2f__i8) :: OpenAD_Symbol_63
      integer(w2f__i8) :: OpenAD_Symbol_64
      integer(w2f__i8) :: OpenAD_Symbol_65
      real(w2f__8) :: OpenAD_Symbol_66
      real(w2f__8) :: OpenAD_Symbol_67
      real(w2f__8) :: OpenAD_Symbol_68
      real(w2f__8) :: OpenAD_Symbol_69
      real(w2f__8) :: OpenAD_Symbol_70
      integer(w2f__i8) :: OpenAD_Symbol_71
      integer(w2f__i8) :: OpenAD_Symbol_72
      real(w2f__8) :: OpenAD_Symbol_73
      real(w2f__8) :: OpenAD_Symbol_74
      real(w2f__8) :: OpenAD_Symbol_75
      real(w2f__8) :: OpenAD_Symbol_76
      real(w2f__8) :: OpenAD_Symbol_77
      real(w2f__8) :: OpenAD_Symbol_78
      real(w2f__8) :: OpenAD_Symbol_79
      real(w2f__8) :: OpenAD_Symbol_80
      real(w2f__8) :: OpenAD_Symbol_81
      real(w2f__8) :: OpenAD_Symbol_82
      real(w2f__8) :: OpenAD_Symbol_83
      real(w2f__8) :: OpenAD_Symbol_84
      real(w2f__8) :: OpenAD_Symbol_85
      real(w2f__8) :: OpenAD_Symbol_86
      real(w2f__8) :: OpenAD_Symbol_87
      real(w2f__8) :: OpenAD_Symbol_88
      real(w2f__8) :: OpenAD_Symbol_89
      real(w2f__8) :: OpenAD_Symbol_90
      real(w2f__8) :: OpenAD_Symbol_91
      real(w2f__8) :: OpenAD_Symbol_92
      real(w2f__8) :: OpenAD_Symbol_93
      real(w2f__8) :: OpenAD_Symbol_94
      real(w2f__8) :: OpenAD_Symbol_95
      real(w2f__8) :: OpenAD_Symbol_96
C         ! checkpointing stacks and offsets
          integer :: cp_loop_variable_1,cp_loop_variable_2,cp_loop_varia
     +ble_3,cp_loop_variable_4,cp_loop_variable_5
C         ! floats 'F'
          double precision,dimension(:),allocatable,save :: theArgFStack
          integer,save :: theArgFStackoffset=0,theArgFStackSize=0
C         ! integers 'I'
          integer,dimension(:),allocatable,save :: theArgIStack
          integer,save :: theArgIStackoffset=0,theArgIStackSize=0
C         ! booleans 'B'
          logical,dimension(:),allocatable,save :: theArgBStack
          integer,save :: theArgBStackoffset=0,theArgBStackSize=0
C         ! strings 'S'
          character*(80),dimension(:),allocatable,save :: theArgSStack
          integer,save :: theArgSStackoffset=0,theArgSStackSize=0
           type(modeType) :: our_orig_mode
C external C function used in inlined code
          integer :: iaddr
          external iaddr
C
C     **** Statements ****
C
           if (our_rev_mode%arg_store) then
C store arguments
      do cp_loop_variable_1 = lbound(LOCPRES,1),ubound(LOCPRES,1)
      call cp_store_real_vector(LOCPRES(cp_loop_variable_1,:),size(LOCPR
     +ES(cp_loop_variable_1,:)),theArgFStack,theArgFStackoffset,theArgFS
     +tackSize)
      end do
      do cp_loop_variable_1 = lbound(TFLD,1),ubound(TFLD,1)
      do cp_loop_variable_2 = lbound(TFLD,2),ubound(TFLD,2)
      do cp_loop_variable_3 = lbound(TFLD,3),ubound(TFLD,3)
      do cp_loop_variable_4 = lbound(TFLD,4),ubound(TFLD,4)
      call cp_store_real_vector(TFLD(cp_loop_variable_1,cp_loop_variable
     +_2,cp_loop_variable_3,cp_loop_variable_4,:),size(TFLD(cp_loop_vari
     +able_1,cp_loop_variable_2,cp_loop_variable_3,cp_loop_variable_4,:)
     +),theArgFStack,theArgFStackoffset,theArgFStackSize)
      end do
      end do
      end do
      end do
      do cp_loop_variable_1 = lbound(SFLD,1),ubound(SFLD,1)
      do cp_loop_variable_2 = lbound(SFLD,2),ubound(SFLD,2)
      do cp_loop_variable_3 = lbound(SFLD,3),ubound(SFLD,3)
      do cp_loop_variable_4 = lbound(SFLD,4),ubound(SFLD,4)
      call cp_store_real_vector(SFLD(cp_loop_variable_1,cp_loop_variable
     +_2,cp_loop_variable_3,cp_loop_variable_4,:),size(SFLD(cp_loop_vari
     +able_1,cp_loop_variable_2,cp_loop_variable_3,cp_loop_variable_4,:)
     +),theArgFStack,theArgFStackoffset,theArgFStackSize)
      end do
      end do
      end do
      end do
          end if
          if (our_rev_mode%arg_restore) then
C restore arguments
      do cp_loop_variable_1 = ubound(SFLD,1),lbound(SFLD,1),-1
      do cp_loop_variable_2 = ubound(SFLD,2),lbound(SFLD,2),-1
      do cp_loop_variable_3 = ubound(SFLD,3),lbound(SFLD,3),-1
      do cp_loop_variable_4 = ubound(SFLD,4),lbound(SFLD,4),-1
      do cp_loop_variable_5 = ubound(SFLD,5),lbound(SFLD,5),-1
      SFLD(cp_loop_variable_1,cp_loop_variable_2,cp_loop_variable_3,cp_l
     +oop_variable_4,cp_loop_variable_5)%v = theArgFStack(theArgFStackof
     +fset)
      theArgFStackoffset = theArgFStackoffset-1
      end do
      end do
      end do
      end do
      end do
      do cp_loop_variable_1 = ubound(TFLD,1),lbound(TFLD,1),-1
      do cp_loop_variable_2 = ubound(TFLD,2),lbound(TFLD,2),-1
      do cp_loop_variable_3 = ubound(TFLD,3),lbound(TFLD,3),-1
      do cp_loop_variable_4 = ubound(TFLD,4),lbound(TFLD,4),-1
      do cp_loop_variable_5 = ubound(TFLD,5),lbound(TFLD,5),-1
      TFLD(cp_loop_variable_1,cp_loop_variable_2,cp_loop_variable_3,cp_l
     +oop_variable_4,cp_loop_variable_5)%v = theArgFStack(theArgFStackof
     +fset)
      theArgFStackoffset = theArgFStackoffset-1
      end do
      end do
      end do
      end do
      end do
      do cp_loop_variable_1 = ubound(LOCPRES,1),lbound(LOCPRES,1),-1
      do cp_loop_variable_2 = ubound(LOCPRES,2),lbound(LOCPRES,2),-1
      LOCPRES(cp_loop_variable_1,cp_loop_variable_2)%v = theArgFStack(th
     +eArgFStackoffset)
      theArgFStackoffset = theArgFStackoffset-1
      end do
      end do
          end if
          if (our_rev_mode%plain) then
            our_orig_mode = our_rev_mode
            our_rev_mode%arg_store = .false.
C original function
C$OPENAD XXX Template ad_template.f
      EOSJMDCKFW(1) = 1.9659330078E+04
      EOSJMDCKFW(2) = 1.4443040466E+02
      EOSJMDCKFW(3) = (-1.7061029673)
      EOSJMDCKFW(4) = 9.64870397E-03
      EOSJMDCKFW(5) = (-4.1902530938E-05)
      EOSJMDCKSW(1) = 5.2848548889E+01
      EOSJMDCKSW(2) = (-3.1010890007E-01)
      EOSJMDCKSW(3) = 6.2832632102E-03
      EOSJMDCKSW(4) = (-5.0841881603E-05)
      EOSJMDCKSW(5) = 3.8866400719E-01
      EOSJMDCKSW(6) = 9.085830301E-03
      EOSJMDCKSW(7) = (-4.6199240023E-04)
      EOSJMDCKP(1) = 3.1865189075
      EOSJMDCKP(2) = 2.2122759372E-02
      EOSJMDCKP(3) = (-2.9846420512E-04)
      EOSJMDCKP(4) = 1.9564149625E-06
      EOSJMDCKP(5) = 6.7043881863E-03
      EOSJMDCKP(6) = (-1.8473180535E-04)
      EOSJMDCKP(7) = 2.0593310524E-07
      EOSJMDCKP(8) = 1.480265928E-04
      EOSJMDCKP(9) = 2.1028979972E-04
      EOSJMDCKP(10) = (-1.2020160284E-05)
      EOSJMDCKP(11) = 1.3946799982E-07
      EOSJMDCKP(12) = (-2.0402369501E-06)
      EOSJMDCKP(13) = 6.128772867E-08
      EOSJMDCKP(14) = 6.2073229889E-10
      K = 1
      BI = 1
      BJ = 1
      SITOBAR = 1.0D00
      DO J = 1,2,1
        DO I = 1,2,1
          T%v = TFLD(I,J,K,BI,BJ)%v
          T2%v = (T%v*T%v)
          T3%v = (T%v*T2%v)
          T4%v = (T%v*T3%v)
          S%v = SFLD(I,J,K,BI,BJ)%v
          IF (S%v.GT.0.0D00) THEN
            S3O2%v = (S%v*SQRT(S%v))
          ELSE
            S%v = 0.0D00
            S3O2%v = 0.0D00
          ENDIF
          P%v = (LOCPRES(I,J)%v*SITOBAR)
          P2%v = (P%v*P%v)
          BMFRESH%v = (EOSJMDCKFW(1)+EOSJMDCKFW(2)*T%v+EOSJMDCKFW(3)*T2%
     +v+EOSJMDCKFW(4)*T3%v+EOSJMDCKFW(5)*T4%v)
          BMSALT%v = (S%v*(EOSJMDCKSW(1)+EOSJMDCKSW(2)*T%v+EOSJMDCKSW(3)
     +*T2%v+EOSJMDCKSW(4)*T3%v)+S3O2%v*(EOSJMDCKSW(5)+EOSJMDCKSW(6)*T%v+
     +EOSJMDCKSW(7)*T2%v))
          BMPRES%v = (P%v*(EOSJMDCKP(1)+EOSJMDCKP(2)*T%v+EOSJMDCKP(3)*T2
     +%v+EOSJMDCKP(4)*T3%v)+P%v*S%v*(EOSJMDCKP(5)+EOSJMDCKP(6)*T%v+EOSJM
     +DCKP(7)*T2%v)+EOSJMDCKP(8)*P%v*S3O2%v+P2%v*(EOSJMDCKP(9)+EOSJMDCKP
     +(10)*T%v+EOSJMDCKP(11)*T2%v)+P2%v*S%v*(EOSJMDCKP(12)+EOSJMDCKP(13)
     +*T%v+EOSJMDCKP(14)*T2%v))
          BULKMOD(INT(I),INT(J))%v = (BMPRES%v+BMFRESH%v+BMSALT%v)
        END DO
      END DO
C original function end
            our_rev_mode = our_orig_mode
          end if
          if (our_rev_mode%tape) then
C            print*, " tape       ", our_rev_mode
            our_rev_mode%arg_store = .true.
            our_rev_mode%arg_restore = .false.
            our_rev_mode%plain = .true.
            our_rev_mode%tape = .false.
            our_rev_mode%adjoint = .false.
C taping
C$OPENAD XXX Template ad_template.f
      EOSJMDCKFW(1) = 1.9659330078E+04
      EOSJMDCKFW(2) = 1.4443040466E+02
      EOSJMDCKFW(3) = (-1.7061029673)
      EOSJMDCKFW(4) = 9.64870397E-03
      EOSJMDCKFW(5) = (-4.1902530938E-05)
      EOSJMDCKSW(1) = 5.2848548889E+01
      EOSJMDCKSW(2) = (-3.1010890007E-01)
      EOSJMDCKSW(3) = 6.2832632102E-03
      EOSJMDCKSW(4) = (-5.0841881603E-05)
      EOSJMDCKSW(5) = 3.8866400719E-01
      EOSJMDCKSW(6) = 9.085830301E-03
      EOSJMDCKSW(7) = (-4.6199240023E-04)
      EOSJMDCKP(1) = 3.1865189075
      EOSJMDCKP(2) = 2.2122759372E-02
      EOSJMDCKP(3) = (-2.9846420512E-04)
      EOSJMDCKP(4) = 1.9564149625E-06
      EOSJMDCKP(5) = 6.7043881863E-03
      EOSJMDCKP(6) = (-1.8473180535E-04)
      EOSJMDCKP(7) = 2.0593310524E-07
      EOSJMDCKP(8) = 1.480265928E-04
      EOSJMDCKP(9) = 2.1028979972E-04
      EOSJMDCKP(10) = (-1.2020160284E-05)
      EOSJMDCKP(11) = 1.3946799982E-07
      EOSJMDCKP(12) = (-2.0402369501E-06)
      EOSJMDCKP(13) = 6.128772867E-08
      EOSJMDCKP(14) = 6.2073229889E-10
      K = 1
      BI = 1
      BJ = 1
      SITOBAR = 1.0D00
      OpenAD_Symbol_5 = 0_w2f__i8
      DO J = 1,2,1
        OpenAD_Symbol_6 = 0_w2f__i8
        DO I = 1,2,1
          T%v = TFLD(I,J,K,BI,BJ)%v
          T2%v = (T%v*T%v)
          OpenAD_lin_0 = T%v
          OpenAD_lin_1 = T%v
          T3%v = (T%v*T2%v)
          OpenAD_lin_2 = T2%v
          OpenAD_lin_3 = T%v
          T4%v = (T%v*T3%v)
          OpenAD_lin_4 = T3%v
          OpenAD_lin_5 = T%v
          S%v = SFLD(I,J,K,BI,BJ)%v
          OpenAD_acc_0 = (OpenAD_lin_0+OpenAD_lin_1)
          OpenAD_acc_1 = (OpenAD_lin_2+OpenAD_acc_0*OpenAD_lin_3)
          OpenAD_acc_2 = (OpenAD_lin_4+OpenAD_acc_1*OpenAD_lin_5)
          double_tape(double_tape_pointer) = OpenAD_acc_0
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_1
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_2
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = I
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = J
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = K
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = BI
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = BJ
          integer_tape_pointer = integer_tape_pointer+1
          IF (S%v.GT.0.0D00) THEN
            OpenAD_tmp_0 = SQRT(S%v)
            S3O2%v = (S%v*OpenAD_tmp_0)
            OpenAD_lin_6 = OpenAD_tmp_0
            OpenAD_lin_8 = (5.0D-01/OpenAD_tmp_0)
            OpenAD_lin_7 = S%v
            OpenAD_acc_3 = (OpenAD_lin_8*OpenAD_lin_7)
            double_tape(double_tape_pointer) = OpenAD_lin_6
            double_tape_pointer = double_tape_pointer+1
            double_tape(double_tape_pointer) = OpenAD_acc_3
            double_tape_pointer = double_tape_pointer+1
            OpenAD_Symbol_7 = 1_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_7
            integer_tape_pointer = integer_tape_pointer+1
          ELSE
            S%v = 0.0D00
            S3O2%v = 0.0D00
            OpenAD_Symbol_8 = 0_w2f__i8
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_8
            integer_tape_pointer = integer_tape_pointer+1
          ENDIF
          P%v = (LOCPRES(I,J)%v*SITOBAR)
          OpenAD_lin_9 = SITOBAR
          P2%v = (P%v*P%v)
          OpenAD_lin_11 = P%v
          OpenAD_lin_12 = P%v
          BMFRESH%v = (EOSJMDCKFW(1)+EOSJMDCKFW(2)*T%v+EOSJMDCKFW(3)*T2%
     +v+EOSJMDCKFW(4)*T3%v+EOSJMDCKFW(5)*T4%v)
          OpenAD_lin_15 = EOSJMDCKFW(2)
          OpenAD_lin_17 = EOSJMDCKFW(3)
          OpenAD_lin_19 = EOSJMDCKFW(4)
          OpenAD_lin_21 = EOSJMDCKFW(5)
          OpenAD_tmp_1 = (EOSJMDCKSW(1)+EOSJMDCKSW(2)*T%v+EOSJMDCKSW(3)*
     +T2%v+EOSJMDCKSW(4)*T3%v)
          OpenAD_tmp_2 = (EOSJMDCKSW(5)+EOSJMDCKSW(6)*T%v+EOSJMDCKSW(7)*
     +T2%v)
          BMSALT%v = (S%v*OpenAD_tmp_1+S3O2%v*OpenAD_tmp_2)
          OpenAD_lin_22 = OpenAD_tmp_1
          OpenAD_lin_26 = EOSJMDCKSW(2)
          OpenAD_lin_28 = EOSJMDCKSW(3)
          OpenAD_lin_30 = EOSJMDCKSW(4)
          OpenAD_lin_23 = S%v
          OpenAD_lin_31 = OpenAD_tmp_2
          OpenAD_lin_35 = EOSJMDCKSW(6)
          OpenAD_lin_37 = EOSJMDCKSW(7)
          OpenAD_lin_32 = S3O2%v
          OpenAD_tmp_3 = (EOSJMDCKP(1)+EOSJMDCKP(2)*T%v+EOSJMDCKP(3)*T2%
     +v+EOSJMDCKP(4)*T3%v)
          OpenAD_tmp_4 = (P%v*S%v)
          OpenAD_tmp_5 = (EOSJMDCKP(5)+EOSJMDCKP(6)*T%v+EOSJMDCKP(7)*T2%
     +v)
          OpenAD_tmp_6 = (P%v*S3O2%v)
          OpenAD_tmp_7 = (EOSJMDCKP(9)+EOSJMDCKP(10)*T%v+EOSJMDCKP(11)*T
     +2%v)
          OpenAD_tmp_8 = (P2%v*S%v)
          OpenAD_tmp_9 = (EOSJMDCKP(12)+EOSJMDCKP(13)*T%v+EOSJMDCKP(14)*
     +T2%v)
          BMPRES%v = (P%v*OpenAD_tmp_3+OpenAD_tmp_4*OpenAD_tmp_5+EOSJMDC
     +KP(8)*OpenAD_tmp_6+P2%v*OpenAD_tmp_7+OpenAD_tmp_8*OpenAD_tmp_9)
          OpenAD_lin_38 = OpenAD_tmp_3
          OpenAD_lin_42 = EOSJMDCKP(2)
          OpenAD_lin_44 = EOSJMDCKP(3)
          OpenAD_lin_46 = EOSJMDCKP(4)
          OpenAD_lin_39 = P%v
          OpenAD_lin_49 = S%v
          OpenAD_lin_50 = P%v
          OpenAD_lin_47 = OpenAD_tmp_5
          OpenAD_lin_53 = EOSJMDCKP(6)
          OpenAD_lin_55 = EOSJMDCKP(7)
          OpenAD_lin_48 = OpenAD_tmp_4
          OpenAD_lin_58 = S3O2%v
          OpenAD_lin_59 = P%v
          OpenAD_lin_57 = EOSJMDCKP(8)
          OpenAD_lin_60 = OpenAD_tmp_7
          OpenAD_lin_64 = EOSJMDCKP(10)
          OpenAD_lin_66 = EOSJMDCKP(11)
          OpenAD_lin_61 = P2%v
          OpenAD_lin_69 = S%v
          OpenAD_lin_70 = P2%v
          OpenAD_lin_67 = OpenAD_tmp_9
          OpenAD_lin_73 = EOSJMDCKP(13)
          OpenAD_lin_75 = EOSJMDCKP(14)
          OpenAD_lin_68 = OpenAD_tmp_8
          BULKMOD(INT(I),INT(J))%v = (BMPRES%v+BMFRESH%v+BMSALT%v)
          OpenAD_acc_4 = (OpenAD_lin_70*OpenAD_lin_67)
          OpenAD_acc_5 = (OpenAD_lin_50*OpenAD_lin_47)
          OpenAD_acc_6 = (OpenAD_lin_46*OpenAD_lin_39)
          OpenAD_acc_7 = (OpenAD_lin_30*OpenAD_lin_23)
          OpenAD_acc_8 = (OpenAD_lin_75*OpenAD_lin_68)
          OpenAD_acc_9 = (OpenAD_lin_66*OpenAD_lin_61)
          OpenAD_acc_10 = (OpenAD_lin_55*OpenAD_lin_48)
          OpenAD_acc_11 = (OpenAD_lin_44*OpenAD_lin_39)
          OpenAD_acc_12 = (OpenAD_lin_37*OpenAD_lin_32)
          OpenAD_acc_13 = (OpenAD_lin_28*OpenAD_lin_23)
          OpenAD_acc_14 = (OpenAD_lin_73*OpenAD_lin_68)
          OpenAD_acc_15 = (OpenAD_lin_64*OpenAD_lin_61)
          OpenAD_acc_16 = (OpenAD_lin_59*OpenAD_lin_57)
          OpenAD_acc_17 = (OpenAD_lin_53*OpenAD_lin_48)
          OpenAD_acc_18 = (OpenAD_lin_42*OpenAD_lin_39)
          OpenAD_acc_19 = (OpenAD_lin_35*OpenAD_lin_32)
          OpenAD_acc_20 = (OpenAD_lin_26*OpenAD_lin_23)
          OpenAD_acc_21 = (OpenAD_lin_11+OpenAD_lin_12)
          OpenAD_acc_22 = (OpenAD_lin_9*OpenAD_lin_38+OpenAD_lin_9*OpenA
     +D_acc_21*OpenAD_lin_69*OpenAD_lin_67+OpenAD_lin_9*OpenAD_acc_21*Op
     +enAD_lin_60+OpenAD_lin_9*OpenAD_lin_49*OpenAD_lin_47+OpenAD_lin_9*
     +OpenAD_lin_58*OpenAD_lin_57)
          double_tape(double_tape_pointer) = OpenAD_acc_22
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_22
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_4
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_5
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_6
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_31
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_7
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_8
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_9
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_10
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_11
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_12
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_13
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_14
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_15
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_16
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_17
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_18
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_19
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_acc_20
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_17
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_19
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_21
          double_tape_pointer = double_tape_pointer+1
          double_tape(double_tape_pointer) = OpenAD_lin_15
          double_tape_pointer = double_tape_pointer+1
          integer_tape(integer_tape_pointer) = I
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = J
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_6 = (INT(OpenAD_Symbol_6)+INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_6
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_5 = (INT(OpenAD_Symbol_5)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_5
      integer_tape_pointer = integer_tape_pointer+1
C taping end
            our_rev_mode%arg_store = .false.
            our_rev_mode%arg_restore = .false.
            our_rev_mode%plain = .false.
            our_rev_mode%tape = .false.
            our_rev_mode%adjoint = .true.
          end if
          if (our_rev_mode%adjoint) then
C            print*, " adjoint    ", our_rev_mode
            our_rev_mode%arg_store = .false.
            our_rev_mode%arg_restore = .true.
            our_rev_mode%plain = .false.
            our_rev_mode%tape = .true.
            our_rev_mode%adjoint = .false.
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_0 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_1 = 1
      do while (INT(OpenAD_Symbol_1).LE.INT(OpenAD_Symbol_0))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_2 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_3 = 1
        do while (INT(OpenAD_Symbol_3).LE.INT(OpenAD_Symbol_2))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_71 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_72 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_73 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_74 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_75 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_76 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_77 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_78 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_79 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_80 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_81 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_82 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_83 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_84 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_85 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_86 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_87 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_88 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_89 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_90 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_91 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_92 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_93 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_94 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_95 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_96 = double_tape(double_tape_pointer)
          T%d = T%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_73)
          T4%d = T4%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_74)
          T3%d = T3%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_75)
          T2%d = T2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_76)
          T%d = T%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_77)
          T%d = T%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_78)
          T%d = T%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_79)
          T%d = T%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_80)
          S3O2%d = S3O2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbo
     +l_71))%d*(OpenAD_Symbol_81)
          T%d = T%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_82)
          T%d = T%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_83)
          T2%d = T2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_84)
          T2%d = T2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_85)
          T2%d = T2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_86)
          T2%d = T2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_87)
          T2%d = T2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_88)
          T2%d = T2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_89)
          T3%d = T3%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_90)
          S3O2%d = S3O2%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbo
     +l_71))%d*(OpenAD_Symbol_91)
          T3%d = T3%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71
     +))%d*(OpenAD_Symbol_92)
          S%d = S%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_93)
          S%d = S%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_94)
          S%d = S%d+BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))
     +%d*(OpenAD_Symbol_95)
          LOCPRES(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))%d = LOCPR
     +ES(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))%d+BULKMOD(INT(Open
     +AD_Symbol_72),INT(OpenAD_Symbol_71))%d*(OpenAD_Symbol_96)
          BULKMOD(INT(OpenAD_Symbol_72),INT(OpenAD_Symbol_71))%d = 0.0d0
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_4 = integer_tape(integer_tape_pointer)
          IF (OpenAD_Symbol_4.ne.0) THEN
            double_tape_pointer = double_tape_pointer-1
            OpenAD_Symbol_69 = double_tape(double_tape_pointer)
            double_tape_pointer = double_tape_pointer-1
            OpenAD_Symbol_70 = double_tape(double_tape_pointer)
            S%d = S%d+S3O2%d*(OpenAD_Symbol_69)
            S%d = S%d+S3O2%d*(OpenAD_Symbol_70)
            S3O2%d = 0.0d0
          ELSE
            S3O2%d = 0.0d0
            S%d = 0.0d0
          ENDIF
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_61 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_62 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_63 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_64 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_65 = integer_tape(integer_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_66 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_67 = double_tape(double_tape_pointer)
          double_tape_pointer = double_tape_pointer-1
          OpenAD_Symbol_68 = double_tape(double_tape_pointer)
          SFLD(INT(OpenAD_Symbol_65),INT(OpenAD_Symbol_64),INT(OpenAD_Sy
     +mbol_63),INT(OpenAD_Symbol_62),INT(OpenAD_Symbol_61))%d = SFLD(INT
     +(OpenAD_Symbol_65),INT(OpenAD_Symbol_64),INT(OpenAD_Symbol_63),INT
     +(OpenAD_Symbol_62),INT(OpenAD_Symbol_61))%d+S%d
          S%d = 0.0d0
          T%d = T%d+T4%d*(OpenAD_Symbol_66)
          T4%d = 0.0d0
          T%d = T%d+T3%d*(OpenAD_Symbol_67)
          T3%d = 0.0d0
          T%d = T%d+T2%d*(OpenAD_Symbol_68)
          T2%d = 0.0d0
          TFLD(INT(OpenAD_Symbol_65),INT(OpenAD_Symbol_64),INT(OpenAD_Sy
     +mbol_63),INT(OpenAD_Symbol_62),INT(OpenAD_Symbol_61))%d = TFLD(INT
     +(OpenAD_Symbol_65),INT(OpenAD_Symbol_64),INT(OpenAD_Symbol_63),INT
     +(OpenAD_Symbol_62),INT(OpenAD_Symbol_61))%d+T%d
          T%d = 0.0d0
          OpenAD_Symbol_3 = INT(OpenAD_Symbol_3)+1
        END DO
        OpenAD_Symbol_1 = INT(OpenAD_Symbol_1)+1
      END DO
C adjoint end
            our_rev_mode%arg_store = .false.
            our_rev_mode%arg_restore = .true.
            our_rev_mode%plain = .false.
            our_rev_mode%tape = .true.
            our_rev_mode%adjoint = .false.
          end if
        end subroutine find_bulkmod
C#########################################################
C This file is part of OpenAD released under the LGPL.   #
C The full COPYRIGHT notice can be found in the top      #
C level directory of the OpenAD distribution             #
C#########################################################
      subroutine head(X,Y)
          use OAD_tape
          use OAD_rev
          use OAD_cp
C         ! original arguments get inserted before version
C         ! and declared here together with all local variables
C         ! generated by xaifBooster
      use w2f__types
      use OAD_active
      implicit none
C
C     **** Global Variables & Derived Type Definitions ****
C
      integer(w2f__i8) :: OpenAD_Symbol_18
      integer(w2f__i8) :: OpenAD_Symbol_19
      integer(w2f__i8) :: OpenAD_Symbol_20
      integer(w2f__i8) :: OpenAD_Symbol_21
      integer(w2f__i8) :: OpenAD_Symbol_22
      integer(w2f__i8) :: OpenAD_Symbol_23
      integer(w2f__i8) :: OpenAD_Symbol_24
      integer(w2f__i8) :: OpenAD_Symbol_25
      integer(w2f__i8) :: OpenAD_Symbol_26
      integer(w2f__i8) :: OpenAD_Symbol_27
      integer(w2f__i8) :: OpenAD_Symbol_28
      integer(w2f__i8) :: OpenAD_Symbol_29
      integer(w2f__i8) :: OpenAD_Symbol_30
      integer(w2f__i8) :: OpenAD_Symbol_31
      integer(w2f__i8) :: OpenAD_Symbol_32
      integer(w2f__i8) :: OpenAD_Symbol_33
      integer(w2f__i8) :: OpenAD_Symbol_34
      integer(w2f__i8) :: OpenAD_Symbol_35
      integer(w2f__i8) :: OpenAD_Symbol_36
      integer(w2f__i8) :: OpenAD_Symbol_37
      integer(w2f__i8) :: OpenAD_Symbol_38
      integer(w2f__i8) :: OpenAD_Symbol_39
      integer(w2f__i8) :: OpenAD_Symbol_40
      integer(w2f__i8) :: OpenAD_Symbol_41
      integer(w2f__i8) :: OpenAD_Symbol_42
      integer(w2f__i8) :: OpenAD_Symbol_43
      integer(w2f__i8) :: OpenAD_Symbol_44
      integer(w2f__i8) :: OpenAD_Symbol_45
      integer(w2f__i8) :: OpenAD_Symbol_46
      integer(w2f__i8) :: OpenAD_Symbol_47
      integer(w2f__i8) :: OpenAD_Symbol_48
      integer(w2f__i8) :: OpenAD_Symbol_49
      integer(w2f__i8) :: OpenAD_Symbol_50
      integer(w2f__i8) :: OpenAD_Symbol_51
      integer(w2f__i8) :: OpenAD_Symbol_52
      integer(w2f__i8) :: OpenAD_Symbol_53
      integer(w2f__i8) :: OpenAD_Symbol_54
      integer(w2f__i8) :: OpenAD_Symbol_55
      integer(w2f__i8) :: OpenAD_Symbol_56
      integer(w2f__i8) :: OpenAD_Symbol_57
      integer(w2f__i8) :: OpenAD_Symbol_58
      integer(w2f__i8) :: OpenAD_Symbol_59
C
C     **** Parameters and Result ****
C
      type(active) :: X(1:32)
      type(active) :: Y(1:4)
C
C     **** Local Variables and Functions ****
C
      type(active) :: BULKMOD(1:2,1:2)
      external find_bulkmod
      integer(w2f__i4) :: I
      integer(w2f__i4) :: J
      integer(w2f__i4) :: K
      integer(w2f__i4) :: L
      type(active) :: LOCPRES(1:2,1:2)
      integer(w2f__i4) :: M
      type(active) :: SFLD(1:2,1:2,1:2,1:2,1:2)
      type(active) :: TFLD(1:2,1:2,1:2,1:2,1:2)
      integer(w2f__i4) :: XCOUNT
      integer(w2f__i8) :: OpenAD_Symbol_100
      integer(w2f__i8) :: OpenAD_Symbol_101
      integer(w2f__i8) :: OpenAD_Symbol_102
      integer(w2f__i8) :: OpenAD_Symbol_103
      integer(w2f__i8) :: OpenAD_Symbol_104
      integer(w2f__i8) :: OpenAD_Symbol_105
      integer(w2f__i8) :: OpenAD_Symbol_106
      integer(w2f__i8) :: OpenAD_Symbol_107
      integer(w2f__i8) :: OpenAD_Symbol_108
      integer(w2f__i8) :: OpenAD_Symbol_60
      integer(w2f__i8) :: OpenAD_Symbol_97
      integer(w2f__i8) :: OpenAD_Symbol_98
      integer(w2f__i8) :: OpenAD_Symbol_99
C         ! checkpointing stacks and offsets
          integer :: cp_loop_variable_1,cp_loop_variable_2,cp_loop_varia
     +ble_3,cp_loop_variable_4,cp_loop_variable_5
C         ! floats 'F'
          double precision,dimension(:),allocatable,save :: theArgFStack
          integer,save :: theArgFStackoffset=0,theArgFStackSize=0
C         ! integers 'I'
          integer,dimension(:),allocatable,save :: theArgIStack
          integer,save :: theArgIStackoffset=0,theArgIStackSize=0
C         ! booleans 'B'
          logical,dimension(:),allocatable,save :: theArgBStack
          integer,save :: theArgBStackoffset=0,theArgBStackSize=0
C         ! strings 'S'
          character*(80),dimension(:),allocatable,save :: theArgSStack
          integer,save :: theArgSStackoffset=0,theArgSStackSize=0
           type(modeType) :: our_orig_mode
C external C function used in inlined code
          integer :: iaddr
          external iaddr
C
C     **** Top Level Pragmas ****
C
C$OPENAD INDEPENDENT(X)
C$OPENAD DEPENDENT(Y)
C
C     **** Statements ****
C
           if (our_rev_mode%arg_store) then
C store arguments
          end if
          if (our_rev_mode%arg_restore) then
C restore arguments
          end if
          if (our_rev_mode%plain) then
            our_orig_mode = our_rev_mode
            our_rev_mode%arg_store = .false.
C original function
C$OPENAD XXX Template ad_template.f
      XCOUNT = 1
      DO I = 1,2,1
        DO J = 1,2,1
          LOCPRES(INT(I),INT(J))%v = (X(XCOUNT)%v*2.0D00)
          DO K = 1,2,1
            DO L = 1,2,1
              DO M = 1,2,1
                TFLD(INT(I),INT(J),INT(K),INT(L),INT(M))%v = (X(XCOUNT)%
     +v*3.0D00)
                SFLD(INT(I),INT(J),INT(K),INT(L),INT(M))%v = (X(XCOUNT)%
     +v*4.0D00)
                XCOUNT = (XCOUNT+1)
              END DO
            END DO
          END DO
        END DO
      END DO
      CALL find_bulkmod(LOCPRES,TFLD,SFLD,BULKMOD)
      DO I = 1,2,1
        DO J = 1,2,1
          Y(INT(J+INT((I*2))+(-2)))%v = BULKMOD(I,J)%v
        END DO
      END DO
C original function end
            our_rev_mode = our_orig_mode
          end if
          if (our_rev_mode%tape) then
C            print*, " tape       ", our_rev_mode
            our_rev_mode%arg_store = .true.
            our_rev_mode%arg_restore = .false.
            our_rev_mode%plain = .true.
            our_rev_mode%tape = .false.
            our_rev_mode%adjoint = .false.
C taping
C$OPENAD XXX Template ad_template.f
      XCOUNT = 1
      OpenAD_Symbol_32 = 0_w2f__i8
      DO I = 1,2,1
        OpenAD_Symbol_33 = 0_w2f__i8
        DO J = 1,2,1
          LOCPRES(INT(I),INT(J))%v = (X(XCOUNT)%v*2.0D00)
          integer_tape(integer_tape_pointer) = XCOUNT
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = I
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = J
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_34 = 0_w2f__i8
          DO K = 1,2,1
            OpenAD_Symbol_35 = 0_w2f__i8
            DO L = 1,2,1
              OpenAD_Symbol_36 = 0_w2f__i8
              DO M = 1,2,1
                TFLD(INT(I),INT(J),INT(K),INT(L),INT(M))%v = (X(XCOUNT)%
     +v*3.0D00)
                SFLD(INT(I),INT(J),INT(K),INT(L),INT(M))%v = (X(XCOUNT)%
     +v*4.0D00)
                integer_tape(integer_tape_pointer) = XCOUNT
                integer_tape_pointer = integer_tape_pointer+1
                integer_tape(integer_tape_pointer) = I
                integer_tape_pointer = integer_tape_pointer+1
                integer_tape(integer_tape_pointer) = J
                integer_tape_pointer = integer_tape_pointer+1
                integer_tape(integer_tape_pointer) = K
                integer_tape_pointer = integer_tape_pointer+1
                integer_tape(integer_tape_pointer) = L
                integer_tape_pointer = integer_tape_pointer+1
                integer_tape(integer_tape_pointer) = M
                integer_tape_pointer = integer_tape_pointer+1
                XCOUNT = (XCOUNT+1)
                OpenAD_Symbol_36 = (INT(OpenAD_Symbol_36)+INT(1_w2f__i8)
     +)
              END DO
              integer_tape(integer_tape_pointer) = OpenAD_Symbol_36
              integer_tape_pointer = integer_tape_pointer+1
              OpenAD_Symbol_35 = (INT(OpenAD_Symbol_35)+INT(1_w2f__i8))
            END DO
            integer_tape(integer_tape_pointer) = OpenAD_Symbol_35
            integer_tape_pointer = integer_tape_pointer+1
            OpenAD_Symbol_34 = (INT(OpenAD_Symbol_34)+INT(1_w2f__i8))
          END DO
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_34
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_33 = (INT(OpenAD_Symbol_33)+INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_33
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_32 = (INT(OpenAD_Symbol_32)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_32
      integer_tape_pointer = integer_tape_pointer+1
      CALL find_bulkmod(LOCPRES,TFLD,SFLD,BULKMOD)
      OpenAD_Symbol_37 = 0_w2f__i8
      DO I = 1,2,1
        OpenAD_Symbol_38 = 0_w2f__i8
        DO J = 1,2,1
          Y(INT(J+INT((I*2))+(-2)))%v = BULKMOD(I,J)%v
          OpenAD_Symbol_60 = (J+I*2+(-2))
          integer_tape(integer_tape_pointer) = OpenAD_Symbol_60
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = I
          integer_tape_pointer = integer_tape_pointer+1
          integer_tape(integer_tape_pointer) = J
          integer_tape_pointer = integer_tape_pointer+1
          OpenAD_Symbol_38 = (INT(OpenAD_Symbol_38)+INT(1_w2f__i8))
        END DO
        integer_tape(integer_tape_pointer) = OpenAD_Symbol_38
        integer_tape_pointer = integer_tape_pointer+1
        OpenAD_Symbol_37 = (INT(OpenAD_Symbol_37)+INT(1_w2f__i8))
      END DO
      integer_tape(integer_tape_pointer) = OpenAD_Symbol_37
      integer_tape_pointer = integer_tape_pointer+1
C taping end
            our_rev_mode%arg_store = .false.
            our_rev_mode%arg_restore = .false.
            our_rev_mode%plain = .false.
            our_rev_mode%tape = .false.
            our_rev_mode%adjoint = .true.
          end if
          if (our_rev_mode%adjoint) then
C            print*, " adjoint    ", our_rev_mode
            our_rev_mode%arg_store = .false.
            our_rev_mode%arg_restore = .true.
            our_rev_mode%plain = .false.
            our_rev_mode%tape = .true.
            our_rev_mode%adjoint = .false.
C adjoint
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_18 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_19 = 1
      do while (INT(OpenAD_Symbol_19).LE.INT(OpenAD_Symbol_18))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_20 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_21 = 1
        do while (INT(OpenAD_Symbol_21).LE.INT(OpenAD_Symbol_20))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_106 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_107 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_108 = integer_tape(integer_tape_pointer)
          BULKMOD(INT(OpenAD_Symbol_107),INT(OpenAD_Symbol_106))%d = BUL
     +KMOD(INT(OpenAD_Symbol_107),INT(OpenAD_Symbol_106))%d+Y(INT(OpenAD
     +_Symbol_108))%d
          Y(INT(OpenAD_Symbol_108))%d = 0.0d0
          OpenAD_Symbol_21 = INT(OpenAD_Symbol_21)+1
        END DO
        OpenAD_Symbol_19 = INT(OpenAD_Symbol_19)+1
      END DO
      CALL find_bulkmod(LOCPRES,TFLD,SFLD,BULKMOD)
      integer_tape_pointer = integer_tape_pointer-1
      OpenAD_Symbol_22 = integer_tape(integer_tape_pointer)
      OpenAD_Symbol_23 = 1
      do while (INT(OpenAD_Symbol_23).LE.INT(OpenAD_Symbol_22))
        integer_tape_pointer = integer_tape_pointer-1
        OpenAD_Symbol_24 = integer_tape(integer_tape_pointer)
        OpenAD_Symbol_25 = 1
        do while (INT(OpenAD_Symbol_25).LE.INT(OpenAD_Symbol_24))
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_26 = integer_tape(integer_tape_pointer)
          OpenAD_Symbol_27 = 1
          do while (INT(OpenAD_Symbol_27).LE.INT(OpenAD_Symbol_26))
            integer_tape_pointer = integer_tape_pointer-1
            OpenAD_Symbol_28 = integer_tape(integer_tape_pointer)
            OpenAD_Symbol_29 = 1
            do while (INT(OpenAD_Symbol_29).LE.INT(OpenAD_Symbol_28))
              integer_tape_pointer = integer_tape_pointer-1
              OpenAD_Symbol_30 = integer_tape(integer_tape_pointer)
              OpenAD_Symbol_31 = 1
              do while (INT(OpenAD_Symbol_31).LE.INT(OpenAD_Symbol_30))
                integer_tape_pointer = integer_tape_pointer-1
                OpenAD_Symbol_100 = integer_tape(integer_tape_pointer)
                integer_tape_pointer = integer_tape_pointer-1
                OpenAD_Symbol_101 = integer_tape(integer_tape_pointer)
                integer_tape_pointer = integer_tape_pointer-1
                OpenAD_Symbol_102 = integer_tape(integer_tape_pointer)
                integer_tape_pointer = integer_tape_pointer-1
                OpenAD_Symbol_103 = integer_tape(integer_tape_pointer)
                integer_tape_pointer = integer_tape_pointer-1
                OpenAD_Symbol_104 = integer_tape(integer_tape_pointer)
                integer_tape_pointer = integer_tape_pointer-1
                OpenAD_Symbol_105 = integer_tape(integer_tape_pointer)
                X(INT(OpenAD_Symbol_105))%d = X(INT(OpenAD_Symbol_105))%
     +d+SFLD(INT(OpenAD_Symbol_104),INT(OpenAD_Symbol_103),INT(OpenAD_Sy
     +mbol_102),INT(OpenAD_Symbol_101),INT(OpenAD_Symbol_100))%d*(4.0D00
     +)
                SFLD(INT(OpenAD_Symbol_104),INT(OpenAD_Symbol_103),INT(O
     +penAD_Symbol_102),INT(OpenAD_Symbol_101),INT(OpenAD_Symbol_100))%d
     + = 0.0d0
                X(INT(OpenAD_Symbol_105))%d = X(INT(OpenAD_Symbol_105))%
     +d+TFLD(INT(OpenAD_Symbol_104),INT(OpenAD_Symbol_103),INT(OpenAD_Sy
     +mbol_102),INT(OpenAD_Symbol_101),INT(OpenAD_Symbol_100))%d*(3.0D00
     +)
                TFLD(INT(OpenAD_Symbol_104),INT(OpenAD_Symbol_103),INT(O
     +penAD_Symbol_102),INT(OpenAD_Symbol_101),INT(OpenAD_Symbol_100))%d
     + = 0.0d0
                OpenAD_Symbol_31 = INT(OpenAD_Symbol_31)+1
              END DO
              OpenAD_Symbol_29 = INT(OpenAD_Symbol_29)+1
            END DO
            OpenAD_Symbol_27 = INT(OpenAD_Symbol_27)+1
          END DO
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_97 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_98 = integer_tape(integer_tape_pointer)
          integer_tape_pointer = integer_tape_pointer-1
          OpenAD_Symbol_99 = integer_tape(integer_tape_pointer)
          X(INT(OpenAD_Symbol_99))%d = X(INT(OpenAD_Symbol_99))%d+LOCPRE
     +S(INT(OpenAD_Symbol_98),INT(OpenAD_Symbol_97))%d*(2.0D00)
          LOCPRES(INT(OpenAD_Symbol_98),INT(OpenAD_Symbol_97))%d = 0.0d0
          OpenAD_Symbol_25 = INT(OpenAD_Symbol_25)+1
        END DO
        OpenAD_Symbol_23 = INT(OpenAD_Symbol_23)+1
      END DO
C adjoint end
            our_rev_mode%arg_store = .false.
            our_rev_mode%arg_restore = .true.
            our_rev_mode%plain = .false.
            our_rev_mode%tape = .true.
            our_rev_mode%adjoint = .false.
          end if
        end subroutine head
